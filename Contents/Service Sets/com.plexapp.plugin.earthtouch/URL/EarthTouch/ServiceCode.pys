## FIX Metadata
BASE			= "http://www.earth-touch.com"
SHOWS 			= BASE + "/shows/"
VIMEO 			= "http://vimeo.com"
NAMESPACES_A   = {
    'itunes':'http://www.itunes.com/dtds/podcast-1.0.dtd',
    'media':'http://search.yahoo.com/mrss/',
    'feedburner':'http://rssnamespace.org/feedburner/ext/1.0'
}

####################################################################################################
def MediaObjectsForURL(url):
  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, format='hd'))],
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      video_resolution = '720',
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, format='sd'))],
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      video_resolution = '480',
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True
    )
  ]

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
@indirect
def PlayVideo(url, format = None):

	serie 	= SHOWS + url.split('/')[4] + "/mrss"
	clip	= str.lower(url.split('/')[5])

	for video in XML.ElementFromURL(serie).xpath('//item', namespaces=NAMESPACES_A):
		# Get MRSS feed for clip info to determine the actual vimeo player link
		link = video.xpath('category', namespaces=NAMESPACES_A)[0].get('domain')
		secondclip	= str.lower(link.split('/')[5])

		if secondclip == clip:
			vimeolink 	= video.xpath('enclosure', namespaces=NAMESPACES_A)[0].get('url')
			vimeolink	= VIMEO + vimeolink.split('external')[1]
			vimeolink	= vimeolink.split('.hd.mp4')[0]

			media = URLService.MediaObjectsForURL(vimeolink)
	
	if format == "hd":		
		return Redirect(media[0].parts[0].key)
	else:
		return Redirect(media[1].parts[0].key)

####################################################################################################
def MetadataObjectForURL(url):
	serie 	= SHOWS + url.split('/')[4] + "/mrss"
	clip	= str.lower(url.split('/')[5])
	
	for video in XML.ElementFromURL(serie).xpath('//item', namespaces=NAMESPACES_A):
		link = video.xpath('category', namespaces=NAMESPACES_A)[0].get('domain')
		secondclip	= str.lower(link.split('/')[5])

		if secondclip == clip:
			vimeolink 	= video.xpath('enclosure', namespaces=NAMESPACES_A)[0].get('url')
			vimeolink	= VIMEO + vimeolink.split('external')[1]
			vimeolink	= vimeolink.split('.hd.mp4')[0]

	return URLService.MetadataObjectForURL(vimeolink)