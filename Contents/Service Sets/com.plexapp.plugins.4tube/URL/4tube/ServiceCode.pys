def NormalizeURL(url):

	url = url.split('?')[0].rstrip('/')
	url = 'http://www.4tube.com/%s' % url.split('4tube.com/')[1]

	return url

####################################################################################################
def MetadataObjectForURL(url):

	url = url.replace('http://www.4tube.com', 'http://m.4tube.com')

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	video = html.xpath('//video')

	if len(video) < 1:
		return None

	title = html.xpath('//title')[0].text.rsplit(' - ')[0]
	summary = html.xpath('//meta[@name="description"]')[0].get('content')
	thumb = video[0].get('poster')

	try:
		duration = html.xpath('//div[@id="mediaplayer"]')[0].get('data-length')
		duration = int(duration) * 1000
	except:
		duration = None

	try:
		date = html.xpath('//*[@class="datetime"]')[0].text
		originally_available_at = Datetime.ParseDate(date).date()
	except:
		originally_available_at = None

	return VideoClipObject(
		title = title,
		thumb = thumb,
		duration = duration,
		originally_available_at = originally_available_at,
		genres = ['XXX','Adult','18+'],
		content_rating_age = 18
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = 'mp4',
			video_resolution = 'sd',
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	url = url.replace('http://www.4tube.com', 'http://m.4tube.com')

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	video = html.xpath('//video')

	if len(video) < 1:
		return None

	video_url = video[0].get('src')

	return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def TestURLs():

	test_urls = []
	urls = HTML.ElementFromURL('http://www.4tube.com/').xpath('//a[contains(@href, "/videos/")]/@href')

	for url in urls:
		if url not in test_urls:
			test_urls.append(url)

		if len(test_urls) == 3:
			break

	return test_urls
