RE_DATA = Regex("Published Date: (.+) Rating: (\d+).+Views:.+Length: (\d+m\d+)s  Watch (.+) and other p")
RE_VIDEO_ID = Regex("videoconfig(?:\?v=|%3Fv%3D)([\d\-]+)")
XML_URL = 'http://www.4tube.com/player/videoconfig?v=%s'

####################################################################################################
def NormalizeURL(url):

	url = url.split('?')[0].rstrip('/')
	url = 'http://www.4tube.com/%s' % url.split('4tube.com/')[1]

	return url

####################################################################################################
def MetadataObjectForURL(url):

	try:
		data = HTTP.Request(url).content
		video_id = RE_VIDEO_ID.search(data).group(1)
		html = HTML.ElementFromString(data)
	except:
		raise Ex.MediaNotAvailable

	description = html.xpath('//meta[@name="description"]/@content')[0].replace('\n', '')
	(date, rating, duration, title) = RE_DATA.findall(description)[0]

	originally_available_at = Datetime.ParseDate(date).date()
	rating = float(rating)/10
	duration = TimeToMs(duration.replace('m', ':'))

	xml = XML.ElementFromURL(XML_URL % video_id)
	thumb = xml.xpath('//image/text()')[0]

	return VideoClipObject(
		title = title,
		duration = duration,
		originally_available_at = originally_available_at,
		rating = rating,
		thumb = thumb,
		genres = ['XXX','Adult','18+'],
		content_rating = 'X'
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res=1080))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '1080',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res=720))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res=480))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '480',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res=1080):

	try:
		data = HTTP.Request(url).content
		video_id = RE_VIDEO_ID.search(data).group(1)
		xml = XML.ElementFromURL(XML_URL % video_id)
	except:
		raise Ex.MediaNotAvailable

	available_versions = xml.xpath('//stream[@label]/@label')

	if len(available_versions) < 1:
		raise Ex.MediaNotAvailable

	closest = min((abs(res - int(i.split('p')[0])), i.split(' ')[0]) for i in available_versions)[1]
	video_url = xml.xpath('//stream[starts-with(@label, "%s")]/file/text()' % closest)[0]

	return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def TestURLs():

	test_urls = []
	urls = HTML.ElementFromURL('http://www.4tube.com/').xpath('//a[contains(@href, "/videos/")]/@href')

	for url in urls:
		if url not in test_urls:
			test_urls.append(url)

		if len(test_urls) >= 3:
			break

	return test_urls

####################################################################################################
def TimeToMs(timecode):

	seconds = 0
	duration = timecode.split(':')
	duration.reverse()

	for i in range(0, len(duration)):
		seconds += int(duration[i]) * (60**i)

	return seconds * 1000
