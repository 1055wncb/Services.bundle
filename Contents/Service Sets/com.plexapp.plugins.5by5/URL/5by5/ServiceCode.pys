import re

####################################################################################################

def MetadataObjectForURL(url):

    page = HTML.ElementFromURL(url)

    # Extract the information from the page...
    show = page.xpath("//h1/a/text()")[0]
    title = page.xpath("//h2[@class='title']/text()")[0]
    thumb = page.xpath("//div[@id='mast']//img")[0].get('src')

    # The duration of the podcast will be in the form MINS:SECS. We need to use a regular expression
    # to try and obtain it, before then converting it into milliseconds.
    duration = None
    duration_text = ''.join(page.xpath("//div[@class='audio_links']/p/text()")).strip()
    try: 
        duration_dict = re.match("(?P<mins>[0-9]+):(?P<secs>[0-9]+)", duration_text).groupdict()
        mins = int(duration_dict['mins'])
        secs = int(duration_dict['secs'])
        duration = ((mins * 60) + secs) * 1000
    except: pass

    # The episode details are in the form "Episode #NUM - DATE"
    episode_details = page.xpath("//div[@class='episode_notes']/h5/text()")[0]

    # Extract the episode's index
    episode_index = None
    try: episode_index = int(re.match("Episode #(?P<index>[0-9]+).*", episode_details).groupdict()['index'])
    except: pass

    return TrackObject(
        title = title,
        artist = show,
        index = episode_index,
        thumb = thumb,
        duration = duration)

####################################################################################################

def MediaObjectsForURL(url):
    return [
      MediaObject(
        audio_codec = AudioCodec.MP3,
        parts = [PartObject(key=Callback(PlayTrack, url = url))]
      )
    ]

####################################################################################################

def PlayTrack(url):

    page = HTML.ElementFromURL(url)

    # Redirect to the available MP3
    track_url = page.xpath("//a[contains(text(), 'MP3')]")[0].get('href')
    return Redirect(track_url)
