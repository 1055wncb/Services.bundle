ABC_URL = "http://abc.go.com"
HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:19.0) Gecko/20100101 Firefox/19.0'
}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].replace(' ', '%20')

####################################################################################################
def MetadataObjectForURL(url):

	data = HTML.ElementFromURL(url, headers=HTTP_HEADERS)

	try: # Try to return an episode object first
		show_title = data.xpath('//meta[@name="title"]')[0].get('content').split(' - ')[1]
		episode_title = data.xpath('//h2[@id="video_title"]')[0].text
		summary = data.xpath('//p[@id="video_desc"]')[0].text
		episode_index = data.xpath('//li[@id="video_num"]')[0].text.strip('Episode ')
		duration = data.xpath('//li[@id="video_dur"]')[0].text
		durationParts = duration.split(':')
		duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
		rating = data.xpath('//li[@id="video_rating"]')[0].text.split(' ')[0]
		thumb_url = data.xpath('//link[@rel="image_src"]')[0].get('href')

		# Construct a metadata item
		return EpisodeObject(
			title = episode_title,
			show = show_title,
			duration = duration, 
			index = int(episode_index),
			content_rating = rating,
			summary = summary,
			thumb = thumb_url
		)

	except: # If it's not an episode return a clip object
		clip_title = data.xpath('//meta[@name="title"]')[0].get('content').split(' - ')[0]

		try:
			thumb_url = data.xpath('//div[@id="show_callout"]/img')[0].get('src')
		except:
			thumb_url = ''

		return VideoClipObject(
			title = clip_title,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb_url)
		)

####################################################################################################
def MediaObjectsForURL(url):

	video_id = url.split('/')[-2].replace('VDKA', '')
	f4m_url = 'http://cdnapi.kaltura.com/p/585231/sp/58523100/playManifest/entryId/%s/format/http/protocol/http/cdnHost/cdnbakmi.kaltura.com/storageId/1561/uiConfId/8628152/tags/uplynk/a/a.f4m?playbackContext=ct%%3Da%%26brand%%3D001%%26device%%3D001' % video_id

	return [
		MediaObject(
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			parts = [
				PartObject(
					key = Callback(PlayVideo, f4m_url=f4m_url, post_url=f4m_url, ext='m3u8')
				)
			]
		)
	]

####################################################################################################
def PlayVideo(f4m_url=None, **kwargs):

	if not f4m_url:
		raise Ex.MediaNotAvailable

	xml = XML.ElementFromURL(f4m_url)
	video_url = xml.xpath('//a:media/@url', namespaces={'a': 'http://ns.adobe.com/f4m/1.0'})

	if len(video_url) < 1:
		raise Ex.MediaNotAvailable

	return Redirect(video_url[0])

####################################################################################################
def TestURLs():

	test_urls = []
	data = HTML.ElementFromURL(ABC_URL, headers=HTTP_HEADERS)

	for url in data.xpath('//h2[contains(text(), "full episodes")]/following-sibling::div[@class="carouselListWrapper"]//a[@class="framedThumbnail"]/@href'):
		if url not in test_urls:
			test_urls.append(url)

		if len(test_urls) > 2:
			break

	return test_urls
