HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:19.0) Gecko/20100101 Firefox/19.0'}
RE_SXX_EXX = Regex('Season (\d+).+Episode (\d+)')

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].replace(' ', '%20')

####################################################################################################
def MetadataObjectForURL(url):

	if not '/VDKA' in url:
		raise Ex.MediaNotAvailable

	data = HTML.ElementFromURL(url, headers=HTTP_HEADERS)
	episode_title = data.xpath('//div[@class="video_title"]/text()')

	if len(episode_title) < 1:
		raise Ex.MediaExpired

	episode_title = episode_title[0]
	show_title = data.xpath('//meta[@name="title"]/@content')[0].split('  ')[0]
	summary = data.xpath('//meta[@property="og:description"]/@content')[0]

	try:
		sxx_exx = data.xpath('//meta[@name="title"]/@content')[0]
		(season, index) = RE_SXX_EXX.search(sxx_exx).groups()
	except:
		season = None
		index = None

	duration = data.xpath('//span[contains(@class, "video_duration")]/text()')[0]
	duration_parts = duration.split(':')
	duration = ((int(duration_parts[0])*60) + int(duration_parts[1]))*1000

	rating = data.xpath('//span[contains(@class, "video_rating")]/text()')[0].split(' ')[0]
	thumb_url = data.xpath('//meta[@property="og:image"]/@content')[0]

	return EpisodeObject(
		title = episode_title,
		show = show_title,
		duration = duration,
		season = int(season) if season else None,
		index = int(index) if index else None,
		content_rating = rating,
		summary = summary,
		thumb = thumb_url
	)

####################################################################################################
def MediaObjectsForURL(url):

	if not '/VDKA' in url:
		raise Ex.MediaNotAvailable

	video_id = url.split('/')[-2].replace('VDKA', '')
	storage_id = 1561

	if url.split('/')[4] in (
		'2020',
		'good-morning-america',
		'nightline',
		'this-week',
		'what-would-you-do',
		'world-news-with-diane-sawyer',
		'world-news-with-david-muir'
	): storage_id = 1841

	f4m_url = 'http://cdnapi.kaltura.com/p/585231/sp/58523100/playManifest/entryId/%s/format/http/protocol/http/cdnHost/cdnbakmi.kaltura.com/storageId/%d/uiConfId/8628152/tags/uplynk/a/a.f4m?playbackContext=ct%%3Da%%26brand%%3D001%%26device%%3D001' % (video_id, storage_id)

	return [
		MediaObject(
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			video_resolution = '480',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [
				PartObject(
					key = Callback(PlayVideo, f4m_url=f4m_url, post_url=f4m_url, ext='m3u8')
				)
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(f4m_url=None, **kwargs):

	if not f4m_url:
		raise Ex.MediaNotAvailable

	try:
		xml = XML.ElementFromURL(f4m_url)
		video_url = xml.xpath('//a:media/@url', namespaces={'a': 'http://ns.adobe.com/f4m/1.0'})[0]
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=video_url))
	except:
		raise Ex.MediaNotAvailable

####################################################################################################
def TestURLs():

	test_urls = []
	data = HTML.ElementFromURL('http://abc.go.com/', headers=HTTP_HEADERS)

	for url in data.xpath('//h2[contains(text(), "full episodes")]/following-sibling::div[@class="carouselListWrapper"]//a[@class="framedThumbnail"]/@href'):
		if url not in test_urls:
			test_urls.append(url)

		if len(test_urls) > 2:
			break

	return test_urls
