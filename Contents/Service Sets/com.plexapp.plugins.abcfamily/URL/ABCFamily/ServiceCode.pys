import re

####################################################################################################

def NormalizeURL(url):
  return url

####################################################################################################

def MetadataObjectForURL(url):
    data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')
    
    mo = None
    
    if '/abc-family-movies/' in url: #content is a movie, therefore return a MovieObject
        try:
          title = data.xpath('//div[@class="tune-in"]')[0].text
          summary = data.xpath('//p[@class="tune-in-desc"]')[0].text
          run_time = data.xpath('//ul[@class="tune-in-info"]/li')[4].text
          duration = Duration_ms(run_time)
          thumb = re.search("var thumbnail = '(http://.+\.jpg)';", HTML.StringFromElement(data)).group(1)

          mo = MovieObject(
              title = title,
              duration = duration,
              content_rating = rating,
              summary = summary,
              thumb = thumb
              )
        except: pass
        
    else: #if it's not a movie, assume it's an episode
        try:
            show_title = data.xpath('//meta[@name="title"]')[0].get('content').split(' - ')[1]
            episode_title = data.xpath('//div[@class="tune-in"]')[0].text
            summary = data.xpath('//p[@class="tune-in-desc"]')[0].text
            episodeDetails = data.xpath('//ul[@class="tune-in-info"]')[0]
            episode_index = episodeDetails.xpath('./li')[2].text.split(' ')[1]
            season_index = episodeDetails.xpath('./li')[0].text.split(' ')[1]
            run_time = episodeDetails.xpath('./li')[4].text
            duration = Duration_ms(run_time)
            content_rating = episodeDetails.xpath('./li')[6].text
            thumbUrl = data.xpath('//link[@rel="image_src"]')[0].get('href')

            # Construct a metadata item
            mo = EpisodeObject(
                title = episode_title,
                show = show_title,
                duration = duration,
                index = int(episode_index),
                season = int(season_index),
                content_rating = rating,
                summary = summary,
                thumb = thumbUrl
            )
        except: pass
    #if it's not a movie and not an episode, it must be a clip
    if mo == None:

        title = None
        try:
            title = data.xpath('//meta[@property="og:title"]')[0].get('content')
        except:
            title = data.xpath('//title/text()')[0].split(' - ')[1]

        summary = None
        try:
            summary = data.xpath('//meta[@property="og:description"]')[0].get('content')
        except:
            summary = data.xpath('//meta[@name="description"]')[0].get('content')

        thumb = None
        try:
            thumb = data.xpath('//meta[@property="og:image"]')[0].get('content')
        except: pass

        mo = VideoClipObject(
            title = title,
            summary = summary,
            thumb = thumb
        )

    mo.source_title = "ABC Family"
    return mo
  
####################################################################################################

def MediaObjectsForURL(url):
  
    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            protocol = Protocol.RTMP,
            aspect_ratio = "1.78"
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            protocol = Protocol.RTMP,
            bitrate = 1600,
            aspect_ratio = "1.78"
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            protocol = Protocol.RTMP,
            bitrate = 1000,
            aspect_ratio = "1.78"
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            protocol = Protocol.RTMP,
            bitrate = 700,
            aspect_ratio = "1.78"
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            protocol = Protocol.RTMP,
            bitrate = 500,
            aspect_ratio = "1.78"
        )
    ]

####################################################################################################
def PlayVideo(url, bitrate = None):
  
    FEED_URL = "http://cdn.abc.go.com/vp2/ws/s/contents/2000/utils/mov/13/9024/%s/432"
    BIT_RATES = ['500','700','1000','1600']
  
    video_id = url.split('/')[-2]
  
    if not bitrate:
      index = BIT_RATES.index(Prefs["abc_bitrate"])
    else:
        index = BIT_RATES.index(str(bitrate))
    
    content = XML.ElementFromURL(FEED_URL % video_id)
  
    available = False
    clip = None

    while not available and index >= 0:
        path = '//video[@bitrate="%s"]' % BIT_RATES[index]
        res = content.xpath(path)
        if len(res) > 0 and len(res[0].get('src')) > 0:
            clip = res[0].get('src')
            available = True
        index = index - 1
  
    player = "rtmp://cp88586.edgefcs.net/ondemand/"
    return Redirect(RTMPVideoURL(player, clip))

####################################################################################################
def Duration_ms(run_time):
    durationParts = runtime.split(':')
    duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
    return duration

####################################################################################################
def TestURLs():
    
    test_urls = []

    page = HTML.ElementFromURL('http://abcfamily.go.com/')
    results = page.xpath("//div[contains(@class, 'chartbeattoppages_videos')]//li[contains(@class, 'contentArea')]//a")
    for item in results:

        url = item.get('href')
        test_urls.append(url)

        if len(test_urls) > 3:
            break

    return test_urls