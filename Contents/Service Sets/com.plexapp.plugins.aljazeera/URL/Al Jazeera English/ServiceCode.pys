RE_EXTERNAL = Regex('param name="flashvars" value="file=(http://www.youtube.com/watch.+)&amp;image.+"')

####################################################################################################

def NormalizeURL(url):
  return url

####################################################################################################

def MetadataObjectForURL(url):
  
  data = HTML.ElementFromURL(url)
  
  show = data.xpath('//meta[@name="channel"]')[0].get('content')
  episode = data.xpath('//meta[@name="title"]')[0].get('content')
  date = data.xpath('//meta[@name="LastModifiedDate"]')[0].get('content')
  tagline = data.xpath('//meta[@property="og:description"]')[0].get('content')
  thumb = data.xpath('//meta[@name="image"]')[0].get('content')
  summary = data.xpath('//td[@class="DetailedSummary"]//text()')
  summary_text= ''
  for item in summary:
    summary_text += item
  summary = summary_text.split('Click here for more')[0].strip()
  source = data.xpath('//meta[@property="og:sitename"]')[0].get('content')
  
  eo = EpisodeObject(
    show = show,
    title = episode,
    summary = summary,
    originally_available_at = Datetime.ParseDate(date).date(),
    thumb = thumb,
    source_title = source
  )
  
  return eo
 
####################################################################################################

def MediaObjectsForURL(url):
  return [
    MediaObject(
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      video_resolution = "1080",
      optimized_for_streaming = True,
      audio_channels = 2,
      parts = [PartObject(key=Callback(PlayVideo, url = url, res = "1080"))]
    ),
    MediaObject(
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      video_resolution = "720",
      optimized_for_streaming = True,
      audio_channels = 2,
      parts = [PartObject(key=Callback(PlayVideo, url = url, res = "720"))]
    ),
    MediaObject(
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      video_resolution = "480",
      optimized_for_streaming = True,
      audio_channels = 2,
      parts = [PartObject(key=Callback(PlayVideo, url = url, res = "480"))]
    ),
    MediaObject(
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      video_resolution = "sd",
      optimized_for_streaming = True,
      audio_channels = 2,
      parts = [PartObject(key=Callback(PlayVideo, url = url, res = "sd"))]
    )
  ]

####################################################################################################
@indirect
def PlayVideo(url, res):

  # Find the external source and the available media objects.
  external_source = GetExternalSource(url)
  media = URLService.MediaObjectsForURL(external_source)

  resolutions = ["1080", "720", "480", "sd"]
  index = resolutions.index(res)
  for resolution_index in range(index, len(resolutions)):
    current_resolution = resolutions[resolution_index]
    for video in media:
      if video.video_codec != VideoCodec.H264:
        continue
      if str(video.video_resolution) == current_resolution:
        return Redirect(video.parts[0].key)

  return Redirect(media[-1].parts[0].key)

####################################################################################################
def GetExternalSource(url):

  data = HTTP.Request(url).content
  return RE_EXTERNAL.search(data).group(1)
