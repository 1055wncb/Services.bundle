HTTP_HEADERS = {'User-Agent': 'AppleCoreMedia/1.0.0.12D78 (Macintosh; U; Intel Mac OS X 10_8_3; en_us)'}
ALL_VIDEOS_INC = '%s/includes/automatic.html'
VIDEO_INC = '%s/includes/%s/automatic.html'

# 'h640w' is used as a fallback for older movies (it's not offered as an option in MediaObjectsForURL).
QUALITY = ['h1080p', 'h720p', 'h480p', 'h640w']

RE_URL_INFO = Regex('^http://trailers\.apple\.com/trailers/([^/]+)/([^/#]+)/?#?([^/]+)?$')

HTTP.CacheTime = CACHE_1DAY

####################################################################################################
def NormalizeURL(url):

	url = url.replace('/iphone/', '/')
	(studio, title, video) = RE_URL_INFO.findall(url)[0]
	if not video: video = 'trailer'

	return 'http://trailers.apple.com/trailers/%s/%s/#%s' % (studio, title, video)

####################################################################################################
def MetadataObjectForURL(url):

	video = FindVideoId(url)

	inc_html = HTML.ElementFromURL(ALL_VIDEOS_INC % url.split('/#')[0])
	title = inc_html.xpath('//a[contains(@href, "/%s/")]/h4/text()' % video)[0]

	try:
		duration = inc_html.xpath('//a[contains(@href, "/%s/")]/p[contains(text(), "Runtime:")]/text()' % video)[0].split('Runtime:')[-1].strip()
		duration = Datetime.MillisecondsFromString(duration)
	except:
		duration = None

	try:
		originally_available_at = inc_html.xpath('//a[contains(@href, "/%s/")]/p[contains(text(), "Posted:")]/text()' % video)[0].split('Posted:')[-1].strip()
		originally_available_at = Datetime.ParseDate(originally_available_at).date()
	except:
		originally_available_at = None

	amt_html = HTML.ElementFromURL(url.split('#')[0])

	movie_title = amt_html.xpath('//meta[@property="og:title"]/@content')[0].split(' - Movie Trailers')[0]
	summary = amt_html.xpath('//meta[@property="og:description"]/@content')[0]

	thumb = amt_html.xpath('//meta[@property="og:image"]/@content')[0]
	thumb_large = thumb.replace('poster.jpg', 'poster-large.jpg')
	thumb_xlarge = thumb.replace('poster.jpg', 'poster-xlarge.jpg')

	return VideoClipObject(
		title = '%s (%s)' % (movie_title, title),
		summary = summary,
		duration = duration,
		originally_available_at = originally_available_at,
		thumb = Resource.ContentsOfURLWithFallback([thumb_xlarge, thumb_large, thumb])
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='h1080p'))],
			video_resolution = '1080',
			container = Container.MOV,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='h720p'))],
			video_resolution = '720',
			container = Container.MOV,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='h480p'))],
			video_resolution = '480',
			container = Container.MOV,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, fmt=None):

	if fmt is None or url.split('.')[-1] in ('mov', 'm4v', 'mp4'):
		return None

	fmt = fmt.replace('HD ', 'h') # Keep backwards compatibility
	video = FindVideoId(url)

	html = HTML.ElementFromURL(VIDEO_INC % (url.split('/#')[0], video))
	video_url = html.xpath('//a[@class="movieLink"]/@href')

	if len(video_url) < 1:
		raise Ex.MediaNotAvailable
	else:
		video_url = video_url[0].rsplit('_' ,1)[0]

	# Find the requested video quality or figure out what the next best available quality is
	for i in range(QUALITY.index(fmt), len(QUALITY)):
		final_url = '%s_%s.mov' % (video_url, QUALITY[i])

		try:
			test = HTTP.Request(final_url, headers=HTTP_HEADERS).headers
			oc = ObjectContainer(http_headers=HTTP_HEADERS)

			oc.add(VideoClipObject(
				items = [
					MediaObject(
						parts = [PartObject(key=final_url)]
					)
				]
			))

			return oc

		except:
			continue

	raise Ex.MediaNotAvailable

####################################################################################################
def FindVideoId(url):

	(base_url, video) = url.split('/#')

	try:
		inc_html = HTML.ElementFromURL(ALL_VIDEOS_INC % base_url)
	except:
		raise Ex.MediaNotAvailable

	# If there's only one video available, use that one
	if len(inc_html.xpath('//a/h4')) == 1:
		video = inc_html.xpath('//a/h4/parent::a/@href')[0].split('/')[1]
	else:
		title = inc_html.xpath('//a[contains(@href, "/%s/")]/h4' % video)

		if len(title) < 1 and video != 'trailer':
			raise Ex.MediaNotAvailable
		else:
			# Fallback to 'trailer 2', 'theatrical trailer', 'international trailer', etc.
			title = inc_html.xpath('//a[contains(@href, "trailer")]/h4')

			if len(title) < 1:
				raise Ex.MediaNotAvailable
			else:
				video = title[0].xpath('./parent::a/@href')[0].split('/')[1]

	return video
