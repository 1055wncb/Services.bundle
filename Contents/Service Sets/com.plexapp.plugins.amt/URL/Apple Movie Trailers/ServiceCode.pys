XML_HTTP_HEADERS = {'User-Agent': 'iTunes/10.7'}
AMT_XML_NS = {'a': 'http://www.apple.com/itms/'}

# 'Large' is used as a fallback for older movies (it's not offered as an option in MediaObjectsForURL).
QUALITY = ['HD 1080p', 'HD 720p', 'HD 480p', 'Large']

RE_URL_INFO = Regex('^http://trailers\.apple\.com/trailers/([^/]+)/([^/#]+)/?#?([^/]+)?$')

####################################################################################################
def NormalizeURL(url):

	url = url.replace('/iphone/', '/')
	(studio, title, video) = RE_URL_INFO.findall(url)[0]
	if not video: video = 'trailer'

	return 'http://trailers.apple.com/trailers/%s/%s/#%s' % (studio, title, video)

####################################################################################################
def MetadataObjectForURL(url):

	xml = GetXML(url)

	if not xml:
		raise Ex.MediaNotAvailable

	movie_title = xml.xpath('//a:Path/a:PathElement[last()]', namespaces=AMT_XML_NS)[0].get('displayName')
	summary = xml.xpath('//a:ScrollView//comment()[contains(.,"DESCRIPTION")]/following-sibling::a:TextView[1]/a:SetFontStyle', namespaces=AMT_XML_NS)[0].text.strip()
	duration = None
	tracklist = xml.xpath('//a:TrackList//a:array/a:dict', namespaces=AMT_XML_NS)

	if len(tracklist) > 0:
		movie = tracklist[0]

		subtitle = movie.xpath('./a:key[text()="songName"]/following-sibling::*[1]', namespaces=AMT_XML_NS)[0].text.rsplit(' (', 1)[0]
		title = movie_title + ' (' + subtitle + ')'

		duration = movie.xpath('./a:key[text()="duration"]/following-sibling::*[1]', namespaces=AMT_XML_NS)[0].text
		duration = int(duration)
	elif url.endswith('/web'):
		subtitle = String.Unquote(url.split('#')[-1].split('/web')[0])
		title = movie_title + ' (' + subtitle + ')'
	else:
		title = movie_title

	# Poster
	try:
		thumb = xml.xpath('//a:PictureView[contains(@url, "poster.jpg") or contains(@url, "poster-large.jpg")]', namespaces=AMT_XML_NS)[0].get('url')
	except:
		try:
			thumb = xml.xpath('//a:PictureView[contains(@url, "poster") and contains(@url, ".jpg")]', namespaces=AMT_XML_NS)[0].get('url')
		except:
			thumb = None

	if thumb is not None and not thumb.startswith('http'):
		thumb = 'http://trailers.apple.com%s' % thumb

	# Construct a metadata item
	return VideoClipObject(
		title = title,
		summary = summary,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='HD 1080p'))],
			video_resolution = '1080',
			container = Container.MOV,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='HD 720p'))],
			video_resolution = '720',
			container = Container.MOV,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='HD 480p'))],
			video_resolution = '480',
			container = Container.MOV,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def GetXML(url):

	xml_url = '%s.xml' % url.replace('#', 'itsxml/')

	try:
		xml_data = HTTP.Request(xml_url, headers=XML_HTTP_HEADERS, cacheTime=CACHE_1HOUR).content.encode('latin-1').decode('utf-8')
		return XML.ElementFromString(xml_data)
	except:
		try:
			# Sometimes 'trailer' is not present, try 'trailer1'
			xml_url = xml_url.replace('/trailer.xml', '/trailer1.xml')
			xml_data = HTTP.Request(xml_url, headers=XML_HTTP_HEADERS, cacheTime=CACHE_1HOUR).content.encode('latin-1').decode('utf-8')
			return XML.ElementFromString(xml_data)
		except:
			pass

	(studio, title, video) = RE_URL_INFO.findall(url)[0]
	if title.startswith('the'):
		url = 'http://trailers.apple.com/trailers/%s/%s/#%s' % (studio, title[3:], video)
		return GetXML(url)

	Log('Loading XML failed!')
	return None

####################################################################################################
@indirect
def PlayVideo(url, fmt=None):

	if fmt is None or url.split('.')[-1] in ('mov', 'm4v', 'mp4'):
		return None

	# Try to 'fix' old /web type URLs
	if url.endswith('/web') and '#' in url:
		(url, video) = url.split('#', 1)
		video = String.Unquote(video.split('/')[0]).replace(' ', '').lower()
		url = '%s#%s' % (url, video)

	xml = GetXML(url)

	if not xml:
		return None

	video_url = None
	available = {}

	for video in xml.xpath('//a:TrackList//a:array/a:dict', namespaces=AMT_XML_NS):
		key = video.xpath('./a:key[text()="songName"]/following-sibling::*[1]', namespaces=AMT_XML_NS)[0].text.rsplit(' (', 1)[1][:-1]

		if key in QUALITY:
			video_url = video.xpath('./a:key[text()="previewURL"]/following-sibling::*[1]', namespaces=AMT_XML_NS)[0].text
			available[key] = video_url

	# Find the requested video quality or figure out what the next best available quality is
	start_index = QUALITY.index(fmt)
	end_index = len(QUALITY)

	for i in range(start_index, end_index):
		key = QUALITY[i]
		if key in available:
			video_url = available[key]
			break

	if not video_url:
		for i in reversed(range(0, start_index)):
			key = QUALITY[i]
			if key in available:
				video_url = available[key]
				break

	if not video_url:
		raise Ex.MediaNotAvailable

	oc = ObjectContainer()

	oc.add(VideoClipObject(
		items = [
			MediaObject(
				parts = [PartObject(key=video_url)]
			)
		]
	))

	oc.http_headers = XML_HTTP_HEADERS
	return oc
