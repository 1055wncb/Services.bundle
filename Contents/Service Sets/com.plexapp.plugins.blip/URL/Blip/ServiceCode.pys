httpHeaders = {'User-Agent': 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27'}

RE_CONTROL_CHARS = Regex(u'[\u0000-\u001F]')
RE_FILE_ID = Regex('blip\.tv/file/([0-9]{6,7})')
RE_PLAY_ID = Regex('blip\.tv/play/([^$.]+)')
RE_POST_ID = Regex('blip\.tv/.+/.+-([0-9]{6,7})')
RE_FLASH_XML = Regex('file=(http://(.+?)rss/flash[^&]*)')
RE_JSON = Regex('blip_ws_results\(\[(.*)\]\);', Regex.DOTALL)

####################################################################################################
def NormalizeURL(url):

	return String.StripDiacritics(url)

####################################################################################################
def MetadataObjectForURL(url):

	data = GetJson(url)

	tags = []
	if 'tags' in data:
		for tag in data['tags']:
			tags.append(tag['name'])

	summary = None
	if 'description' in data:
		summary = String.StripTags(RE_CONTROL_CHARS.sub('', data['description']))

	video = VideoClipObject(
		title = data['title'],
		summary = summary,
		originally_available_at = Datetime.ParseDate(data['datestamp']).date(),
		duration = int(data['media']['duration']) * 1000,
		thumb = data['thumbnailUrl'],
		genres = [data['categoryName']],
		tags = tags
	)

	return video

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	data = GetJson(url)
	media_objects = []

	for video in data['additionalMedia']:

		if video['archive_type'] == 'MPEG4':
			media_objects.append(MediaObject(
				parts = [PartObject(key=Callback(PlayVideo, url=video['url']))],
				container = Container.MP4,
				video_resolution = video['media_height'],
				bitrate = video['video_bitrate'],
				duration = int(video['media_length']) * 1000,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				optimized_for_streaming = True,
				audio_channels = 2
			))

	if len(media_objects) == 0:

		for video in data['additionalMedia']:

			if video['archive_type'] == 'Flash':
				media_objects.append(MediaObject(
					parts = [PartObject(key=Callback(PlayVideo, url=video['url']))],
					container = 'flv',
					video_resolution = video['media_height'],
					duration = int(video['media_length']) * 1000,
					video_codec = video['video_codec'],
					audio_codec = video['audio_codec'],
					optimized_for_streaming = True,
					audio_channels = 2
				))

	if len(media_objects) == 0:

		for video in data['additionalMedia']:

			if video['archive_type'] == 'Quicktime':
				media_objects.append(MediaObject(
					parts = [PartObject(key=Callback(PlayVideo, url=video['url']))],
					container = 'mov',
					video_resolution = video['media_height'],
					duration = int(video['media_length']) * 1000,
					video_codec = video['video_codec'],
					audio_codec = video['audio_codec'],
					optimized_for_streaming = True,
					audio_channels = 2
				))

	return media_objects

####################################################################################################
def GetJsonURL(url):

	post_id = None

	if url.find('/file/') != -1:
		file_id = RE_FILE_ID.search(url).group(1)
		url = 'http://blip.tv/file/%s' % file_id
	elif url.find('/play/') != -1:
		try:
			page = HTTP.Request(url, follow_redirects=False).headers
		except Ex.RedirectError, e:
			try:
				flash_xml = RE_FLASH_XML.search(String.Unquote(e.location)).group(1)
				embed_id = XML.ElementFromURL(flash_xml).xpath('//item/blip:embedLookup', namespaces={'blip': 'http://blip.tv/dtd/blip/1.0'})[0].text
				url = 'http://blip.tv/players/episode/%s' % embed_id
			except:
				play_id = RE_PLAY_ID.search(url).group(1)
				url = 'http://blip.tv/players/episode/%s' % play_id
	else:
		post_id = RE_POST_ID.search(url)
		if post_id:
			url = 'http://blip.tv/posts/%s' % post_id.group(1)

	return '%s?%s' % (url, 'skin=json&version=2')

####################################################################################################
def GetJson(url):

	url = GetJsonURL(url)

	try:
		json = HTTP.Request(url, cacheTime=CACHE_1DAY, headers=httpHeaders).content
		json = RE_JSON.search(json).group(1)
		json = JSON.ObjectFromString(json)

		if 'Post' in json:
			json = json['Post']

		return json

	except:
		return {}

####################################################################################################
@indirect
def PlayVideo(url):

	c = ObjectContainer()

	c.add(VideoClipObject(
		items = [
			MediaObject(
				parts = [PartObject(key=url)]
			)
		]
	))

	c.http_headers = {'User-Agent': ''}
	return c
