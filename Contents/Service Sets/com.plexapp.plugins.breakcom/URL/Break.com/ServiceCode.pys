import re

DETAILS_URL = 'http://api.break.com/invoke/content/%s/'

####################################################################################################
def MetadataObjectForURL(url):
    try:
        
        # It's possible that the ID is actually contained within the url. If this is the case, then we
        # can simply extract it from there. Otherwise, we need to load the page and find it. Once we've
        # done this, we can load the XML page which contains all the meta data associated with the title.
        id = None
        id_in_url = re.match(".*/.*-(?P<id>[0-9]+)/?$", url)
        if id_in_url != None:
            id = id_in_url.groupdict()['id']
        else:
             page = HTML.ElementFromURL(url)
             embed_url = page.xpath("//meta[@name='embed_video_url']")[0].get('content')
             id = re.match(".*/(?P<id>[0-9]+)", embed_url).groupdict()['id']

        details_page = XML.ElementFromURL(DETAILS_URL % id)

        # Extract the information available from the page.
        title = details_page.xpath("//ContentTitle/text()")[0]
        description = details_page.xpath("//ContentDescription/text()")[0]
        duration = int(details_page.xpath("//VideoLengthInSeconds/text()")[0])
        thumb = details_page.xpath("//Thumbnail/text()")[0]
        tags = details_page.xpath("//TagCollection/Tag/text()")
        content_rating = details_page.xpath("//MaturityRating/text()")[0]
        date = details_page.xpath("//PublishedDate/text()")[0]
        date = Datetime.ParseDate(date)

        return VideoClipObject(
            title = title,
            summary = description,
            thumb = thumb,
            duration = duration,
            tags = tags,
            content_rating = content_rating,
            originally_available_at = date)

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################
def MediaObjectsForURL(url):
    return [
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = 720,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = '720'))],
        audio_channels = 2
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = 480,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = '480'))],
        audio_channels = 2
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = 348,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = 'sd'))],
        audio_channels = 2
      )
    ]

####################################################################################################
def PlayVideo(url, res):

    # It's possible that the ID is actually contained within the url. If this is the case, then we
    # can simply extract it from there. Otherwise, we need to load the page and find it. Once we've
    # done this, we can load the XML page which contains all the meta data associated with the title.
    id = None
    id_in_url = re.match(".*/.*-(?P<id>[0-9]+)/?$", url)
    if id_in_url != None:
        id = id_in_url.groupdict()['id']
    else:
        page = HTML.ElementFromURL(url)
        embed_url = page.xpath("//meta[@name='embed_video_url']")[0].get('content')
        id = re.match(".*/(?P<id>[0-9]+)", embed_url).groupdict()['id']

    details_page = XML.ElementFromURL(DETAILS_URL % id)

    # Find the associated video items
    video_items = details_page.xpath("//media-group/media-content")

    # It's possible that the requested resolution is not actually available. Therefore we should clamp
    # the requested index by the length of actual video items. This should still provide a suitable
    # video as it is in ascending or of quality.
    index = 0
    if res == '480':
        index = 1
    elif res == '720':
        index = 2
    index = max(0, min(index, len(video_items) - 1))

    return Redirect(video_items[index].get('url'))