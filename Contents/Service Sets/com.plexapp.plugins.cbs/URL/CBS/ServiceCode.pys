import re

CBS_URL = 'http://www.cbs.com'
CBS_SMIL = 'http://release.theplatform.com/content.select?format=SMIL&Tracking=true&balance=true&MBR=true&pid=%s'
SMIL_NAMESPACE = {'a': 'http://www.w3.org/2001/SMIL20/Language'}

####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):
  page = HTTP.Request(url, cacheTime=7200).content
  data = HTML.ElementFromString(page)

  if len( data.xpath('//div[@id="video-metadata-display-container"]//*[contains(text(), "Full Episode")]') ) > 0:
    video_type = "Full Episode"
  else:
    video_type = "Clip"

  title = data.xpath('//meta[@property="og:title"]')[0].get('content')
  (show_title, episode_title, junk) = title.split(' - ', 2)
  summary = data.xpath('//meta[@property="og:description"]')[0].get('content')

  try:
    thumb = re.search('videoImagePlatform="([^"]+)', page).group(1)
  except:
    thumb = data.xpath('//meta[@property="og:image"]')[0].get('content')

  if video_type == "Full Episode":
    try:
      air_date = data.xpath('//div[@id="video-metadata-display-container"]//b[contains(text(), "Air Date")]/parent::p/text()')[0].strip()
      originally_available_at = Datetime.ParseDate(air_date).date()
    except:
      originally_available_at = None

    try:
      timecode = data.xpath('//div[@id="video-metadata-display-container"]//b[contains(text(), "Full Episode")]/parent::p/text()')[0].strip()
      duration = re.search('([0-9]+):([0-9]{2})', timecode)
      duration = ( (int(duration.group(1))*60) + int(duration.group(2)) ) * 1000
    except:
      duration = None

    # Construct a metadata item
    eo = EpisodeObject(
      title = episode_title,
      show = show_title,
      summary = summary,
      originally_available_at = originally_available_at,
      duration = duration, 
      thumb = thumb
    )
    return eo

  elif video_type == "Clip":
    
    # Construct a metadata item
    co = EpisodeObject(
      title = ' - '.join([show_title, episode_title]),
      summary = summary,
      thumb = thumb
    )
    return co
  
####################################################################################################
def MediaObjectsForURL(url):
 
  return [
    MediaObject(
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      video_resolution = 360,
      audio_channels = 2,
      optimized_for_streaming = True,
      parts = [PartObject(key=Callback(PlayVideo, url = url, profile = 'WIFI-MED-16x9_30'))]
    ),
    MediaObject(
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      video_resolution = 224,
      audio_channels = 2,
      optimized_for_streaming = True,
      parts = [PartObject(key=Callback(PlayVideo, url = url, profile = '3G-MED-16x9_30'))]
    )
  ]

####################################################################################################
def PlayVideo(url, profile):

  if url.find('pid=') == -1:
    page = HTML.ElementFromURL(url)
    url = page.xpath("//meta[@property = 'og:video']")[0].get('content')

  pid = re.search('pid=([^&]+)', url)

  if pid:
    pid = pid.group(1)

    smil = XML.ElementFromURL(CBS_SMIL % pid)
    video_url = smil.xpath("//a:video[@profile = '%s']" % profile, namespaces = SMIL_NAMESPACE)[0].get('src')

    return Redirect(video_url)

####################################################################################################
def TestURLs():
  test_urls = []
  data = HTML.ElementFromURL(CBS_URL + '/video/')

  url = data.xpath('//div[@id="videoCopy"]//a')[0].get('href')
  test_urls.append(url)

  return test_urls
