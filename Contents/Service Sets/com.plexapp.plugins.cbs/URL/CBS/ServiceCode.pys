import re

CBS_NAMESPACE  = {'og':'http://www.w3.org/1999/xhtml'}
CBS_SMIL = 'http://release.theplatform.com/content.select?format=SMIL&Tracking=true&balance=true&pid=%s'
CBS_URL = 'http://www.cbs.com'

####################################################################################################

def NormalizeURL(url):
  url = url.split('&')[0]
  return url

####################################################################################################

def MetadataObjectForURL(url):
  data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')
  
  details = data.xpath('//div[@class="cbs-video-metadata"]')[0]
  
  Log(details.xpath('text()')[1].strip())
  if "Full Episode" in details.xpath('text()')[1]:
    videoType = "Full Episode"
  else:
    videoType = "Clip"
  #Log(videoType)
  
  title = details.xpath('span[@class="cbs-video-title H6_14"]')[0].text
  thumbUrl = data.xpath('//meta[@property="og:image"]', namespaces=CBS_NAMESPACE)[0].get('content')
  #Log(thumbUrl)
  
  summary = details.xpath('//meta[@name="description"]')[0].get('content')
  #Log(summary)
  
  #try:
  duration = re.search('([0-9]+:[0-9]{2})', details.xpath('text()')[1]).group(1)
  #Log(duration)
  durationParts = duration.split(':')
  duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
  #Log(duration)
  
  if videoType == "Full Episode":

    show_title = title.split(' - ')[0]
    #Log(show_title)
    episode_title = title.split(' - ')[1]
    #Log(episode_title)
    air_date = details.xpath('//div[@class="inner"]/b')[1].text.strip('Air Date: ')
    #Log(air_date)

    # Construct a metadata item
    eo = EpisodeObject(
      title = episode_title,
      show = show_title,
      originally_available_at = Datetime.ParseDate(air_date).date(),
      duration = duration, 
      #index = int(episode_index),
      #parentIndex = int(season_index),
      #content_rating = rating,
      summary = summary,
      thumb = thumbUrl
    )
    return eo
  
  elif videoType == "Clip":
    
    # Construct a metadata item
    co = EpisodeObject(
      title = title,
      duration = duration,
      summary = summary,
      thumb = thumbUrl
    )
    return co
  
####################################################################################################
def MediaObjectsForURL(url):
  
  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocol = Protocol.RTMP,
      #container = 'mp4',
      aspect_ratio = "1.78",
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    )
  ]

####################################################################################################
def PlayVideo(url):
  
  pid = url.split('pid=')[1]
  
  smil = HTTP.Request(CBS_SMIL % pid).content
  player = smil.split('ref src')
  player = player[2].split('"')
  if '.mp4' in player[1]:
    player = player[1].replace('.mp4', '')
    clip = player.split(';')
    clip = 'mp4:' + clip[4]
  else:
    player = player[1].replace('.flv', '')
    clip = player.split(';')
    clip = clip[4]
  return Redirect(RTMPVideoItem(player, clip))

####################################################################################################
def TestURLs():
    test_urls = []
    data = HTML.ElementFromURL(CBS_URL + '/video/')

    url = data.xpath('//div[@id="videoCopy"]//a')[0].get('href')
    Log(url)
    test_urls.append(url)

    return test_urls

