RE_VIDEO_ID = Regex('http://www.centrictv.com/videos/.+?/([0-9]+).*')
RE_RTMP_ARGS = Regex('(?P<player>rtmp.+?/ondemand)(?P<playpath>.+)')
MRSS_URL = "http://services.centrictv.com/content/video/mrss.aspx?uri=mgid:media:video:centrictv.com:%s"

def NormalizeURL(url):
    return url
    
def MetadataObjectForURL(url):
    data = HTML.ElementFromURL(url)
    details = data.xpath('//div[@id="video-detail-meta"]')[0]
    title = data.xpath('//div[@id="video-detail-parent-meta"]/h2')[0].text
    summary = details.xpath('.//p[@class="video-dscpn"]')[0].text
    try:
        date = details.xpath('.//p[@class="subtitle"]')[0].text.split('Posted ')[1]
        date = Datetime.ParseDate(date)
    except:
        date = None
    thumb = GetThumb(url)
    mo = VideoClipObject(
        title = title,
        summary = summary,
        originally_available_at = date,
        thumb = thumb)
    return mo
    
def MediaObjectsForURL(url):
    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate='1400')),],
            video_resolution = '360',
            bitrate = '1400',
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate='900'))],
            video_resolution = '360',
            bitrate = '900',
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate='650'))],
            video_resolution = '288',
            bitrate = '650',
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate='350'))],
            video_resolution = '288',
            bitrate = '350',
            audio_channels = 2
        ),
    ]

@indirect
def PlayVideo(url, bitrate):
    feed = GetMRSS(url)
    rtmp_parts = []
    for entry in feed.entries:
        smil_url = entry.media_content[0]['url']
        smil = XML.ElementFromURL(smil_url)
        rtmp_url = smil.xpath('.//rendition[@bitrate="'+bitrate+'"]/src')[0].text
        rtmp_args = RE_RTMP_ARGS.search(rtmp_url).groupdict()
        rtmp_parts.append(PartObject(key=RTMPVideoURL(url=rtmp_args['player'], clip=rtmp_args['playpath'])))
    video_object = VideoClipObject(
        items = [
            MediaObject(
                parts = rtmp_parts
            )
        ]
    )
    return video_object

def GetMRSS(url):
    video_id = RE_VIDEO_ID.search(url).group(1)
    mRSS = RSS.FeedFromURL(MRSS_URL % video_id)
    return mRSS

def GetThumb(url):
    feed = GetMRSS(url)
    thumb_url = feed.entries[0].media_thumbnail[0]['url']
    thumb = "http://www.bet.com" + thumb_url
    return thumb

def TestURLs():
    test_urls = []
    data = HTML.ElementFromURL("http://www.centrictv.com./videos")
    for video in data.xpath('//p[@class="thumb"]/a'):
        test_urls.append('http://www.centrictv.com' + video.get('href'))
        if len(test_urls) > 2:
            break
    return test_urls