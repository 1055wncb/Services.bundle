FLV_URL_PATTERN = Regex('"url":"(http://charlierose\..+\.flv)')

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)
	title = html.xpath('//meta[@name="title"]/@content')

	if len(title) < 1:
		raise Ex.MediaNotAvailable
	else:
		title = title[0].split('Charlie Rose -')[-1].strip()

	summary = html.xpath('//dl[@class="video-description"]/dt[text()="Description"]/following-sibling::dd/p/text()')[0]

	thumb = html.xpath('//link[@rel="image_src"]/@href')

	if len(thumb) < 1:
		thumb = 'http://www.charlierose.com//images/assets/flashplayer.jpg'
	else:
		thumb = thumb[0]

	try:
		date = html.xpath('//div[@id="container"]//h2/following-sibling::p/text()[contains(., "day")]')[0].split(',',1)[-1].strip()
		originally_available_at = Datetime.ParseDate(date).date()
	except:
		originally_available_at = None

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		originally_available_at = originally_available_at
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			container = 'flv',
			video_resolution = '402',
			video_codec = 'flv1',
			audio_codec = 'mp3',
			audio_channels = 2
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	content = HTTP.Request(url).content
	flv_url = FLV_URL_PATTERN.search(content)

	if not flv_url:
		return None
	else:
		return IndirectResponse(VideoClipObject, key=flv_url.group(1))
