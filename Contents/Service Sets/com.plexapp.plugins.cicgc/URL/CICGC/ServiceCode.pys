def NormalizeURL(url):

	url = url.replace('http://www.', 'http://').rstrip('/')

	if len(url.split('/')) <= 3:
		og_url = HTML.ElementFromURL(url).xpath('//meta[@property="og:url"]')

		if len(og_url) > 0:
			url = og_url[0].get('content').rstrip('/')

	if url.endswith('/episode'):
		url = url.rsplit('/',1)[0]

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	title = html.xpath('//meta[@property="og:title"]')[0].get('content')
	summary = html.xpath('//meta[@name="description"]')[0].get('content')

	if summary.startswith('Comedians In Cars Getting Coffee - '):
		summary = summary.split(' - ',1)[1]

	thumb = html.xpath('//video')[0].get('poster')

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '720',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	html = HTML.ElementFromURL(url)
	video_url = html.xpath('//video/source')[0].get('src')

	return IndirectResponse(VideoClipObject, key=video_url)
