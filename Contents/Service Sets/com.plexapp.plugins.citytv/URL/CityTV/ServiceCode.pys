BASE_URL = 'http://video.citytv.com/video/%s'
VIDEO_URL = 'http://video.citytv.com%s'
AMF_URL = 'http://c.brightcove.com/services/messagebroker/amf'

####################################################################################################

def MetadataObjectForURL(url):
  
  data = DoAmfRequest(url)
  
  if data['customFields']['mediatype'] == 'episode':
    title = data['displayName']
    show_title = data['customFields']['displayshowname']
    summary = data['shortDescription']
    thumbUrl = data['videoStillURL']

    try:
        season = int(data['customFields']['season'])
    except:
        season = None

    try:
        episode = int(data['customFields']['episode'])
    except:
        episode = None

    date = data['publishedDate']
    duration = data['length']

    # Construct a metadata item
    mo = EpisodeObject(
      title = title,
      show = show_title,
      season = season,
      index = episode,
      originally_available_at = date,
      summary = summary,
      duration = int(duration),
      thumb = thumbUrl
    )
  
  else:
    title = data['displayName']
    summary = data['shortDescription']
    thumbUrl = data['videoStillURL']
    date = data['publishedDate']
    duration = data['length']
    related_show = data['customFields']['displayshowname']
  
    # Construct a metadata item
    mo = VideoClipObject(
      title = title,
      originally_available_at = date,
      summary = summary,
      duration = int(duration),
      thumb = thumbUrl,
      tags = [related_show]
    )
  return mo

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))],
      video_resolution = 'sd',
      aspect_ratio = '1.77',
      audio_channels = 2
    )
  ]

####################################################################################################

def PlayVideo(url):
    data = DoAmfRequest(url)
    video_url = data['IOSRenditions'][0]['defaultURL']

    return Redirect(video_url)

####################################################################################################

def DoAmfRequest(url):
    data = HTML.ElementFromURL(url).xpath('//object[@class="BrightcoveExperience"]')[0]
    playerID = data.xpath('./param[@name="playerID"]')[0].get('value')
    videoPlayer = data.xpath('./param[@name="@videoPlayer"]')[0].get('value')

    if videoPlayer == '':
        raise Ex.MediaGeoblocked

    return AmfRequest(url=url, playerID=playerID, videoPlayer=videoPlayer)

####################################################################################################
def AmfRequest(url=None, playerID=None, playerKey=None, videoPlayer=None):

    endpoint = AMF_URL
    if playerKey:
        endpoint += '?playerKey=%s' % playerKey

    client = AMF.RemotingService(url=endpoint, user_agent='', amf_version=3)
    service = client.getService('com.brightcove.experience.ExperienceRuntimeFacade')

    AMF.RegisterClass(ContentOverride, 'com.brightcove.experience.ContentOverride')
    AMF.RegisterClass(ViewerExperienceRequest, 'com.brightcove.experience.ViewerExperienceRequest')

    video_obj = ContentOverride(videoPlayer)
    experience = ViewerExperienceRequest(url, playerID, playerKey, video_obj)
    
    result = service.getDataForExperience('', experience)

    return result['programmedContent']['videoPlayer']['mediaDTO']

####################################################################################################
class ContentOverride(object):
  def __init__ (self, videoPlayer=None):
    self.contentType = int(0)
    self.contentIds = None
    self.target = 'videoPlayer'
    self.contentId = int(videoPlayer)
    self.featuredRefId = None
    self.contentRefIds = None
    self.featuredId = float('nan')
    self.contentRefId = None

class ViewerExperienceRequest(object):
  def __init__ (self, url=None, playerID=None, playerKey=None, video_obj=None):
    self.experienceId = int(playerID)
    self.playerKey = playerKey
    self.contentOverrides = []
    self.contentOverrides.append(video_obj)
    self.TTLToken = ''
    self.URL = url
    self.deliveryType = float('nan')
    
####################################################################################################
def TestURLs():
    
    test_urls = []
    
    data = HTML.ElementFromURL(BASE_URL % 'home/0/')
    for recent_video in data.xpath('.//div[@class="featured_inner"]/div[@class="item"]'):
      if len(test_urls) < 6:
        url = recent_video.xpath('./a')[0].get('href')
        if url.startswith("http://") == False:
            url = VIDEO_URL % url
        test_urls.append(url)
      else:
        break
    
    return test_urls