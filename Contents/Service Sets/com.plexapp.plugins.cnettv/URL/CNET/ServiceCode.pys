####################################################################################################
def NormalizeURL(url):

	return url.split('#')[0].split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)
	json = html.xpath('//div[@data-cnet-video-options]/@data-cnet-video-options')

	if len(json) < 1:
		raise Ex.MediaNotAvailable

	json_obj = JSON.ObjectFromString(json[0])['video']

	return VideoClipObject(
		title = json_obj['headline'],
		summary = json_obj['dek'],
		duration = json_obj['duration'] * 1000,
		thumb = Resource.ContentsOfURLWithFallback(json_obj['image']['path']),
		originally_available_at = Datetime.ParseDate(json_obj['datePublished']['date'])
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = '720',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	html = HTML.ElementFromURL(url)
	json = html.xpath('//div[@data-cnet-video-options]/@data-cnet-video-options')

	if len(json) < 1:
		raise Ex.MediaNotAvailable

	json_obj = JSON.ObjectFromString(json[0])['video']['files']['data']

	for video in json_obj:
		if video['format'] == 'tv':
			hls_url = video['uri']
			return IndirectResponse(VideoClipObject, key=hls_url)

	for video in json_obj:
		if video['type'] == 'HLS_VARIANT_TABLET':
			hls_url = video['uri']
			return IndirectResponse(VideoClipObject, key=hls_url)

	raise Ex.MediaNotAvailable
