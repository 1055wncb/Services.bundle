XML_URL = 'http://www.cnn.com/video/data/3.0/video/%s/index.xml'
MEDIA_URL = 'http://ht.cdn.turner.com/%s'
CNN_URL = 'http://www.cnn.com/video/'

NAMESPACES = {'smil': 'http://www.w3.org/2001/SMIL20/Language'}

####################################################################################################

def MetadataObjectForURL(url):
  data_url = XML_URL % url.split('#')[1].strip('/video/')
  data = XML.ElementFromURL(data_url, cacheTime=7200, errors='ignore')
  
  thumbUrl = data.xpath('//image[@name="640x480"]')[0].text
  #Log(thumbUrl)
  
  summary = data.xpath('//description')[0].text
  #Log(summary)
  
  date = data.xpath('//dateCreated')[0].text
  
  duration = data.xpath('//length')[0].text
  #Log(duration)
  durationParts = duration.split(':')
  if durationParts[0] == '':
    duration = int(durationParts[1])*1000
  else:
    duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
  #Log(duration)
  
  try: show = data.xpath('//branding')[0].text
  except: show = ''
  
  clip_title = data.xpath('//headline')[0].text
  #Log(clip_title)

  # Construct a metadata item
  co = EpisodeObject(
    title = clip_title,
    originally_available_at = Datetime.ParseDate(date).date(),
    duration = duration,
    summary = summary,
    tags = [show],
    thumb = thumbUrl,
    source_title = 'CNN.com'
    )
  return co
  
####################################################################################################
def MediaObjectsForURL(url):
  
    return [
        MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='1280x720'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = '720',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
        ),
    MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='896x504'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = '504',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
    ),
    MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='768x432'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = '432',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
    ),
    MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='640x360'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = '360',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
    ),
    MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='512x288'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = 'sd',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
    )
  ]

####################################################################################################
def PlayVideo(url, resolution):

    data_url = XML_URL % url.split('#')[1].strip('/video/')
    data = XML.ElementFromURL(data_url, cacheTime=7200, errors='ignore')

    # If the video is available directly from the original XML page, then we should simply grab it.
    video = None
    videos = data.xpath("//file[contains(@bitrate, '%s')]/text()" % resolution)
    if len(videos) > 0:
        video = videos[0]

    # Some videos do not have the appropriate base URL
    if video != None and video.startswith("http://") == False:
        video = MEDIA_URL % video

    if video == None:
        other_videos = data.xpath("//groupFiles/file[contains(text(), '%s')]/text()" % resolution)
        if len(other_videos) > 0:
            base = data.xpath("//groupFiles/baseUrl/text()")[0]
            clip = other-videos[0]
            video = base + clip

    # If the available video is not an MP4, or has not actually be found, we have to fall back to access
    # the one available via another source.
    if video == None or video.endswith(".mp4") == False:
        other_source = data.xpath("//groupFiles/file/text()")[0]
        smil = XML.ElementFromURL(other_source)
        base = smil.xpath("//smil:meta[@name='httpBase']", namespaces = NAMESPACES)[0].get('content')
        clip = smil.xpath("//smil:video[contains(@src, '%s')]" % resolution, namespaces = NAMESPACES)[0].get('src')
        video = base + clip
    return Redirect(video)

####################################################################################################
def TestURLs():
    test_urls = []
    cnn = HTML.ElementFromURL(CNN_URL)

    for video in cnn.xpath('//ol[@id="WE_RECOMMENDList"]/li'):
        if len(test_urls) > 2: break
        else: pass
        video_url = CNN_URL + '#/' + video.get('videoid')
        test_urls.append(video_url)

    return test_urls