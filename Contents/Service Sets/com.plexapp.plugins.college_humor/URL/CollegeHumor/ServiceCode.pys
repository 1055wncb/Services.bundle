IPAD_HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A523 Safari/8536.25'}
MOOGALOOP_XML = 'http://www.collegehumor.com/moogaloop/video/%s'
RE_FLV_SOURCE = Regex("flvSourceUrl: '([^']+)'")

####################################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url, cacheTime=CACHE_1DAY)

	title = page.xpath('//meta[@property="og:title"]/@content')[0]
	description = page.xpath('//meta[@name="description"]/@content')[0]
	thumb = page.xpath('//meta[@property="og:image"]/@content')[0]

	try:
		duration = page.xpath('//meta[@property="video:duration"]/@content')[0]
		duration = int(duration)*1000
	except:
		duration = None

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb,
		duration = duration
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '480',
			audio_codec = AudioCodec.AAC,
			optimized_for_streaming = True,
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	video_url = None

	if '/video/' in url:
		data = HTTP.Request(url, headers=IPAD_HTTP_HEADERS, cacheTime=CACHE_1DAY).content
		html = HTML.ElementFromString(data)

		try:
			video_url = html.xpath('//video[contains(@src, ".mp4")]/@src|//video/source[contains(@src, ".mp4")]/@src')[0]
		except:
			pass

		if not video_url:
			flv_source = RE_FLV_SOURCE.search(data)
			if flv_source:
				video_url = flv_source.group(1)

		# If we haven't found a video, lets move on and see if MOOGALOOP will give us anything
		if not video_url:
			try:
				video_id = url.split('/')[4]
				xml = XML.ElementFromURL(MOOGALOOP_XML % video_id)
				video_file = xml.xpath('//video/file/text()')[0]
				video_file = ''.join(video_file.split(',')).split('.csmil')[0].split('/z/')[1]
				video_thumbnail = xml.xpath('//video/thumbnail/text()')[0]
				host = video_thumbnail.split('/')[2]
				video_url = 'http://%s/%s' % (host, video_file)
				HTTP.Request(video_url).headers
			except:
				pass

		if video_url:
			return IndirectResponse(VideoClipObject, key=video_url)

	elif '/embed/' in url:
		video_id = url.split('/')[4]
		xml = XML.ElementFromURL(MOOGALOOP_XML % video_id)
		provider = xml.xpath('//video/provider/text()')[0]

		if provider == 'youtube':
			yt_id = xml.xpath('//video/youtubeID/text()')[0]
			yt_url = 'http://www.youtube.com/watch?v=%s' % yt_id
			media = URLService.MediaObjectsForURL(yt_url)
			resolutions = ['480', 'sd']

			for resolution_index in range(0, len(resolutions)):
				current_resolution = resolutions[resolution_index]

				for video in media:
					if video.video_codec != VideoCodec.H264:
						continue

					if str(video.video_resolution) == current_resolution:
						return Redirect(video.parts[0].key)

			return Redirect(media[-1].parts[0].key)

	raise Ex.MediaNotAvailable
