IPAD_HTTP_HEADERS = { 'X-Requested-With': 'XMLHttpRequest', 'User-Agent' : 'Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3' }
RE_DURATION = Regex("T(?P<mins>[0-9]+)M(?P<secs>[0-9]+)S")
MOOGALOOP_XML = 'http://www.collegehumor.com/moogaloop/video/%s'

####################################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url, cacheTime = CACHE_1DAY)

	# Extract the details available from the various pages.
	title = page.xpath("//head//meta[@property='og:title']")[0].get('content')
	description = page.xpath("//head//meta[@name='description']")[0].get('content')
	thumb = page.xpath("//head//meta[@ property='og:image']")[0].get('content')

	try:
		duration_text = page.xpath("//meta[@itemprop='duration']")[0].get('content')
		duration_dict = RE_DURATION.match(duration_text).groupdict()
		duration = (int(duration_dict['mins']) * 60 * 1000) + (int(duration_dict['secs']) * 1000)
	except:
		duration = None

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb,
		duration = duration
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			video_resolution = '480',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url = url))]
		)
	]

####################################################################################################
def PlayVideo(url):

	# We'll start by requesting the title page but using the HTTP headers (and user-agent) associated with the iPad. The
	# content provider is know to provide iPad specific pages which therefore might contain direct links to the MP4 streams.
	html = HTML.ElementFromURL(url, headers = IPAD_HTTP_HEADERS, cacheTime = CACHE_1DAY)

	# We can then find the available MP4 stream and redirect too it.
	video_url = html.xpath("//video")[0].get('src')

	if not video_url:
		video_id = url.split('/')[4]
		xml = XML.ElementFromURL(MOOGALOOP_XML % video_id)
		video_url = xml.xpath('//video/file')[0].text

	return Redirect(video_url)
