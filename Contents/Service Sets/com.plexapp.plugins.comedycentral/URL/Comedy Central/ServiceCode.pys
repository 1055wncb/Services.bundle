MRSS_URL = 'http://www.comedycentral.com/feeds/mrss?uri=%s'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

####################################################################################################
def MetadataObjectForURL(url):

	mgid = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR).xpath('//div[@id="video_player_box"]/@data-mgid')
	if len(mgid) < 1:
		return None

	item = XML.ElementFromURL(MRSS_URL % mgid[0], cacheTime=CACHE_1HOUR).xpath('//item')[0]

	title = item.xpath('./title')[0].text
	summary = item.xpath('./description')[0].text
	thumb = item.xpath('.//media:thumbnail', namespaces=NAMESPACES)[0].get('url')
	duration = int(float(item.xpath('.//media:content', namespaces=NAMESPACES)[0].get('duration')) * 1000)

	try:
		date = Datetime.ParseDate(item.xpath('./pubDate')[0].text).date()
	except:
		date = None

	return VideoClipObject(
		title = title,
		summary = summary,
		originally_available_at = date,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	if '/full-episodes/' in url or '/episodes/' in url:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=4))
				],
				bitrate = 3500,
				container = Container.MP4,
				video_resolution = '720',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=4))
				],
				bitrate = 2200,
				container = Container.MP4,
				video_resolution = '540',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=4))
				],
				bitrate = 1700,
				container = Container.MP4,
				video_resolution = '432',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=4))
				],
				bitrate = 1200,
				container = Container.MP4,
				video_resolution = '360',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	else:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0))
				],
				bitrate = 3500,
				container = Container.MP4,
				video_resolution = '720',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0))
				],
				bitrate = 2200,
				container = Container.MP4,
				video_resolution = '540',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0))
				],
				bitrate = 1700,
				container = Container.MP4,
				video_resolution = '432',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0))
				],
				bitrate = 1200,
				container = Container.MP4,
				video_resolution = '360',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	
####################################################################################################
def PlayVideo(url, bitrate='3500', index=0, **kwargs):

	html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	video_player_box = html.xpath('//div[@id="video_player_box"]')

	if len(video_player_box) < 1:
		raise Ex.MediaExpired

	uri = video_player_box[0].get('data-mgid')

	mrss_data = XML.ElementFromURL(MRSS_URL % uri)
	media_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)

	if index < len(media_url):
		player_url = media_url[index].get('url')
	else:
		# Return small filler movie for desktop clients
		return Redirect('http://dl.dropbox.com/u/2974527/Plex/filler.mp4')

	try:
		player_data = XML.ElementFromURL(player_url)
	except:
		raise Ex.MediaNotAvailable

	available_bitrates = player_data.xpath('//rendition[@bitrate]/@bitrate')
	if len(available_bitrates) < 1:
		raise Ex.MediaNotAvailable

	closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]
	rtmp_url = player_data.xpath('//rendition[@bitrate="%s"]/src' % closest)[0].text
	stream_url = rtmp_url.split('/viacomccstrm/')[1]
	mp4_url = MP4_URL % stream_url

	return Redirect(mp4_url)

####################################################################################################
def TestURLs():

	test_urls = []

	for episode in HTML.ElementFromURL('http://www.comedycentral.com/shows').xpath('//a[contains(@href, "/episodes/")]'):
		url = episode.get('href')

		if not url.startswith('http'):
			url = 'http://www.comedycentral.com%s' % url

		try:
			# It appears that sometimes links can be invalid. We should quickly test it before considering
			# using it as a Test URL.
			headers = HTTP.Request(url).headers
			test_urls.append(url)
		except: pass

		if len(test_urls) > 2:
			break

	return test_urls
