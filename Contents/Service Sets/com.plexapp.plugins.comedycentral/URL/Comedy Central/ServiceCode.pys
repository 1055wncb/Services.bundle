MRSS_URL = 'http://www.comedycentral.com/feeds/mrss?uri=%s'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

RE_FIX_XML = Regex('(<!--.*?-->)')
RE_BITRATE = Regex('_(\d+)_[^._]+\.mp4')

MediaObject.container = Container.MP4
MediaObject.video_codec = VideoCodec.H264
MediaObject.audio_codec = AudioCodec.AAC
MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True

####################################################################################################
def MetadataObjectForURL(url):

	try:
		mgid = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR).xpath('//div[contains(@id, "video_player_box")]/@data-mgid')

		if len(mgid) < 1:
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaNotAvailable

	try:
		xml = XML.ElementFromURL(MRSS_URL % mgid[0], cacheTime=CACHE_1HOUR)
	except Ex.HTTPError, e:
		raise Ex.MediaNotAvailable

	title = xml.xpath('//channel/title/text()')[0]
	summary = xml.xpath('//channel/description/text()')[0]

	duration = 0
	for timecode in xml.xpath('//item//media:content/@duration', namespaces=NAMESPACES):
		duration += int(float(timecode) * 1000)

	try:
		thumb = xml.xpath('//channel/image/url/text()')[0].split('?')[0].replace('/cc/', '/')
	except:
		thumb = ''

	try:
		date = Datetime.ParseDate(xml.xpath('//item[1]/pubDate')[0].text).date()
	except:
		date = None

	return VideoClipObject(
		title = title,
		summary = summary,
		duration = duration if duration > 0 else None,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb),
		originally_available_at = date
	)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	try:
		mgid = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR).xpath('//div[contains(@id, "video_player_box")]/@data-mgid')

		if len(mgid) < 1:
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaExpired

	mrss_data = HTTP.Request(MRSS_URL % mgid[0], cacheTime=CACHE_1HOUR).content
	mrss_data = RE_FIX_XML.sub('', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)

	available_streams = {}

	for media_url in media_urls:

		try:
			video_data = XML.ElementFromURL(media_url, cacheTime=CACHE_1HOUR)
		except:
			raise Ex.MediaNotAvailable

		renditions = video_data.xpath('//rendition[@type="video/mp4"]')

		if len(renditions) < 1:
			raise Ex.MediaNotAvailable

		for rendition in renditions:

			rtmp_url = rendition.xpath('./src/text()')[0]

			if '/viacomccstrm/' in rtmp_url:
				mp4_url = MP4_URL % (rtmp_url.split('/viacomccstrm/')[-1])
			else:
				Log('Failed to split the rmtp_url to build the mp4_url: %s' % (rtmp_url))
				raise Ex.MediaNotAvailable

			bitrate = RE_BITRATE.search(mp4_url).group(1)

			if bitrate not in available_streams:
				available_streams[bitrate] = []

			part = {}
			part['duration'] = rendition.get('duration')
			part['height'] = rendition.get('height')
			part['mp4_url'] = mp4_url

			available_streams[bitrate].append(part)

	media_objects = []
	bitrates = [int(i) for i in available_streams.keys()]
	bitrates.sort(reverse=True)

	for bitrate in bitrates:

		parts = []

		for part in available_streams[str(bitrate)]:

			parts.append(
				PartObject(
					key = part['mp4_url'],
					duration = int(part['duration'])*1000
				)
			)

			video_resolution = int(part['height'])

		media_objects.append(
			MediaObject(
				parts = parts,
				# June 9, 2014 - The line below is necessary due to an issue with some clients not copying the media attributes for audio to the streams. 
				# Not including this line causes the Roku to transcode videos. This issue should be fixed in future versions of the client and/or framework.
				audio_codec = AudioCodec.AAC,
				bitrate = bitrate,
				video_resolution = video_resolution
			)
		)

	return media_objects

####################################################################################################
def TestURLs():

	test_urls = []

	for episode in HTML.ElementFromURL('http://www.comedycentral.com/shows').xpath('//a[contains(@href, "/episodes/")]'):
		url = episode.get('href')

		if not url.startswith('http'):
			url = 'http://www.comedycentral.com%s' % url

		try:
			# It appears that sometimes links can be invalid. We should quickly test it before considering
			# using it as a Test URL.
			headers = HTTP.Request(url).headers
			test_urls.append(url)
		except: pass

		if len(test_urls) > 2:
			break

	return test_urls
