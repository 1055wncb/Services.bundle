RE_CLIP = Regex('clipId=([0-9]+)')
RE_CLIPID = Regex('clip.id = ([0-9]+)')
RE_PLAYLIST = Regex('playlistId=([0-9]+?\.[0-9]+)')
RE_BIN = Regex('binId=([0-9]+?\.[0-9]+)')
RE_VIDEO = Regex("url:'(http://.+?)'")
RE_INITIAL_BIN = Regex("initialBinId = '([0-9]+?\.[0-9]+)';")
RE_CLIP_DATA = Regex('<script type="text/javascript">.+?create clip object(.+?)</script>', Regex.DOTALL)

VIDEO_URL = "http://esi.ctv.ca/datafeed/flv/urlgenjs.aspx?formatid=20&vid=%s" #clipId
STORY_URL = "http://www.ctvnews.ca/%s?ot=example.AjaxPageLayout.ot&pageNum=1&maxItemsPerPage=12" #binId

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):

    if 'clipId=' in url:
        data = HTML.ElementFromURL(url)
        title = data.xpath('//meta[@itemprop="name"]')[0].get('content')
        summary = data.xpath('//meta[@itemprop="description"]')[0].get('content')
        duration = Datetime.MillisecondsFromString(data.xpath('//meta[@property="video:duration"]')[0].get('content'))
        thumb = data.xpath('//meta[@itemprop="image"]')[0].get('content')
        return VideoClipObject(
            title=title,
            summary=summary,
            duration=duration,
            thumb = thumb
        )
    else:
        playlistId = RE_PLAYLIST.search(url).group(1)
        binId = RE_BIN.search(url)

        if not binId:
            data = HTTP.Request(url).content
            binId = RE_INITIAL_BIN.search(data).group(1)
        else:
            binId = binId.group(1)

        data = HTML.ElementFromURL(STORY_URL % binId)
        try:
            playlist = data.xpath('//article/a[contains(@href, "'+playlistId+'")]/img')[0]
        except:
            raise Ex.MediaExpired
        title = playlist.get('title')
        thumb = playlist.get('src').replace('box_180', 'landscape_960')
        return VideoClipObject(
            title = title,
            thumb = thumb
        )
    return None

####################################################################################################
def MediaObjectsForURL(url):
    if 'clipId=' in url:
        return [
            MediaObject(
                parts = [PartObject(key=Callback(PlayVideo, url=url))],
                container = 'mp4',
                optimized_for_streaming = True,
                video_resolution = '480',
                video_codec = VideoCodec.H264,
                audio_codec = AudioCodec.AAC,
                audio_channels = 2
            )
        ]
    else:
        return [
            MediaObject(
                container = 'mp4',
                optimized_for_streaming = True,
                video_resolution = '480',
                video_codec = VideoCodec.H264,
                audio_codec = AudioCodec.AAC,
                audio_channels = 2,
                parts = [
                    PartObject(key=Callback(PlayVideo, url=url, index=0)),
                    PartObject(key=Callback(PlayVideo, url=url, index=1)),
                    PartObject(key=Callback(PlayVideo, url=url, index=2)),
                    PartObject(key=Callback(PlayVideo, url=url, index=3))
                    ]
            )
        ]

####################################################################################################
#@indirect
def PlayVideo(url, index=None):
    if 'clipId=' in url:
        clipId = RE_CLIP.search(url).group(1)
        content = HTTP.Request(VIDEO_URL % clipId).content
        video_url = RE_VIDEO.search(content).group(1)
        return Redirect(video_url)
        #return IndirectResponse(VideoClipObject, key=video_url)
    else:
        playlistId = RE_PLAYLIST.search(url).group(1)
        binId = RE_BIN.search(url)

        if not binId:
            data = HTTP.Request(url).content
            binId = RE_INITIAL_BIN.search(data).group(1)
        else:
            binId = binId.group(1)

        content = HTTP.Request(STORY_URL % binId).content
        clips = []
        try:
            all_clips = RE_CLIP_DATA.findall(content)
            playlistMap = "playlistMap['%s'].push(clip)" % playlistId
            for clip in all_clips:
                if playlistMap in clip:
                    clips.append(clip)
                else:
                    pass
            clipId = RE_CLIPID.search(clips[index]).group(1)
            content = HTTP.Request(VIDEO_URL % clipId).content
            video_url = RE_VIDEO.search(content).group(1)
            return Redirect(video_url) ###Redirect()s not supported on Win-PMS
            #return IndirectResponse(VideoClipObject, key=video_url) ###IndirectResponse()s for stacked PartObjects not supported by Laika
        except:
            raise Ex.MediaNotAvailable
    return