RE_VIDEO_URL = Regex('videoIDTouch:"(http://ctvmmsolx.rd.llnwd.net/.+?)"')

BASE_URL = 'http://www.ctvolympics.ca'

def MetadataObjectForURL(url):
    data = HTML.ElementFromURL(url)
    title = data.xpath('//meta[@property="og:title"]')[0].get('content')
    summary = data.xpath('//meta[@property="og:description"]')[0].get('content')
    thumb = data.xpath('//meta[@property="og:image"]')[0].get('content')

    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
    )

def MediaObjectsForURL(url):
    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            container = 'mp4',
            optimized_for_streaming = True,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC
        )
    ]

@indirect
def PlayVideo(url):
    httpheaders = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:8.0.1) Gecko/20100101 Firefox/8.0.1'}
    content = HTTP.Request(url, headers=httpheaders).content
    video_url = RE_VIDEO_URL.search(content).group(1)

    try:
        page = HTTP.Request(video_url, follow_redirects=False, headers=httpheaders).headers
    except Ex.RedirectError, e:
        video_url = e.location

    return IndirectResponse(VideoClipObject, key=video_url)

def TestURLs():
    test_urls = []
    data = HTML.ElementFromURL(BASE_URL + '/videos/index.html')

    for video in data.xpath('//div[@id="ctv-videospecial-items"]//a'):
        test_urls.append(BASE_URL + video.get('href'))

        if len(test_urls) > 2:
            break

    return test_urls
