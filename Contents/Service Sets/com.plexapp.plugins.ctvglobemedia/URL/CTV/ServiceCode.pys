import re
EPISODE_LOOKUP	= 'http://watch.%s/AJAX/ClipLookup.aspx?episodeid=%s'
CLIP_LOOKUP	= 'http://watch.%s/AJAX/ClipLookup.aspx?clipid=%s'
#http://watch.thecomedynetwork.ca/AJAX/ClipLookup.aspx?clipid=565275

SITES = ['ctv.ca', 'tsn.ca', 'discoverychannel.ca', 'thecomedynetwork.ca', 'bravo.ca', 'spacecast.com', 'fashiontelevision.com']

SOURCE = {
  "ctv.ca"              : "CTV",
  "ctv.ca/news"         : "CTV News",
  "tsn.ca"              : "TSN",
  "discoverychannel.ca" : "Discorery Channel",
  "thecomedynetwork.ca" : "Comedy Network",
  "bravo.ca"            : "Bravo.ca",
  "bravofact.com"       : "BravoFact!",
  "spacecast.com"       : "Space",
  "muchmusic.com"       : "Much Music",
  "fashiontelevision.com":"Fashion Television"
  }

####################################################################################################

def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):

  try:
    data = HTML.ElementFromURL(url)
    
    title = data.xpath('//meta[@name="title"]')[0].get('content').split(' : ')
    show_title = title[0]
    episode_title = title[1]
    summary = data.xpath('//meta[@name="description"]')[0].get('content')
    thumbUrl = data.xpath('//meta[@name="Thumbnail"]')[0].get('content')
  
    try: season = int(re.search('season\-([0-9]+)', url).group(1))
    except: season = None
    try: episode = int(re.search('-ep-([0-9]+)-', url).group(1).lstrip(season))
    except: episode = None

    # Construct a metadata item
    mo = EpisodeObject(
      title = episode_title,
      show = show_title,
      season = season,
      index = episode,
      summary = summary,
      thumb = thumbUrl
    )
  
  except:
    network = re.search('watch\.(.+)/.+', url).group(1)
    #Log(network)
    clipId = url.split('#clip')[1]
    #Log(clipId)
    
    clip_details = JSON.ObjectFromString(re.search("({EpisodePermalink:.+, IsCanadaOnly:'.'})", HTTP.Request(CLIP_LOOKUP % (network, clipId)).content).group(1))
    #Log(clip_details)
    
    #item = data.xpath('//dt/a[@href="'+url+'"]')[0]
    #onclick = item.get('onclick')
    #details = JSON.ObjectFromString('{' + onclick.split('{')[1].split('}')[0] + '}')
    title = clip_details['Title']
    #Log(title)
    summary = clip_details['Description']
    #Log(summary)
    thumb = clip_details['Thumbnail']
    #Log(thumb)
    
    mo = VideoClipObject(
      title = title,
      summary = summary,
      thumb = thumb
    )
  
  source_site = re.search("http://watch.(.+\.(ca|com))/.*", url).group(1)
  #Log(source_site)
  source = SOURCE[source_site]
  
  mo.source_title = source
  return mo

####################################################################################################
def MediaObjectsForURL(url):

  return [(MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocol = Protocol.WebKit
        )
      )
    ]

####################################################################################################
def PlayVideo(url):
  video_url = None
  
  try:
    episode_id = HTML.ElementFromURL(url).xpath('//meta[@name="EntityId"]')[0].get('content')
    #Log(episode_id)
    network = re.search('watch\.(.+?)/', url).group(1)
    #Log(network)
  
    show = HTTP.Request(EPISODE_LOOKUP %(network, episode_id)).content
    #Log(show)
    expression = re.compile("EpisodePermalink:'(.+?)'", re.MULTILINE)
    permalink = expression.search(show).group(1)
    #Log(permalink)
    level = 0
    format = re.search("Format:'(.+?)'", show).group(1)
    #Log(format)

    if format == 'WMV':
      video_url = url + '#Silverlight'
    else:
      video_url = url + '#Flash'
  except:
    video_url = url + '#Flash'
    
  #Log(video_url)

  return Redirect(WebVideoURL(video_url))

####################################################################################################
def TestURLs():
    test_urls = []
    
    for site in SITES:
        #Log(site)
        data = HTML.ElementFromURL('http://watch.%s' % site)
        url = data.xpath('.//div[@id="CatalogContainer"]//dl[@class="Item"]//a')[0].get('href')
        test_urls.append(url)
        
    return test_urls