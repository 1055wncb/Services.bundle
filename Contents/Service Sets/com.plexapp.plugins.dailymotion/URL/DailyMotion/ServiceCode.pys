import re, urllib2

JSON_URL = 'http://www.dailymotion.com/json/video/%s?fields=video_id,title,thumbnail_large_url,url,stream_h264_sd_url,stream_h264_url,stream_h264_hd_url,rating,duration,description'

####################################################################################################
def NormalizeURL(url):

  video_id = re.search('dailymotion\.com/video/([0-9A-Z]+)', url, re.IGNORECASE)

  if video_id:
    return 'http://www.dailymotion.com/video/%s' % video_id.group(1)
  else:
    return url.split('#', 1)[0].split('_', 1)[0]

####################################################################################################
def MetadataObjectForURL(url):

  video = GetClip(url)

  title = video['title']
  summary = video['description']
  thumbUrl = video['thumbnail_large_url']
  duration = int(video['duration'])*1000
  dateString = thumbUrl.split('?')[-1]
  date = '%s/%s/%s' % (dateString[4:6], dateString[6:8], dateString[0:4])
  rating = float(video['rating'])

  # Construct a metadata item
  vc = VideoClipObject(
    title = title,
    summary = summary,
    thumb = thumbUrl,
    duration = duration,
    originally_available_at = Datetime.ParseDate(date).date(),
    rating = rating
  )

  return vc

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='hd'))],
      container = Container.MP4,
      bitrate = '1500',
      video_resolution = '720',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='sd'))],
      container = Container.MP4,
      bitrate = '400',
      video_resolution = 'sd',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='low-res'))],
      container = Container.MP4,
      bitrate = '180',
      video_resolution = 'sd',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True
    )
  ]

####################################################################################################
#@indirect
def PlayVideo(url, fmt=''):

  video = GetClip(url)

  if fmt == 'hd':
    if video['stream_h264_hd_url']:
      video_url = video['stream_h264_hd_url']
    else:
      video_url = video['stream_h264_url']
  elif fmt == 'sd':
    if video['stream_h264_url']:
      video_url = video['stream_h264_url']
    else:
      video_url = video['stream_h264_sd_url']
  else:
    video_url = video['stream_h264_sd_url']
  
  request = urllib2.Request(video_url)
  opener = urllib2.build_opener(SmartRedirectHandler)
  f = opener.open(request)
  if f.status == 301 or f.status == 302:
    redirect_url = String.Unquote(f.url, usePlus=False)
    return Redirect(redirect_url)
  else:
    return Redirect(video_url)

####################################################################################################
def GetClip(url):

  video_id = url.rsplit('/',1)[1]
  return JSON.ObjectFromURL(JSON_URL % video_id)

####################################################################################################
class SmartRedirectHandler(urllib2.HTTPRedirectHandler):
  def http_error_301(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_301(self, req, fp, code, msg, headers)
    result.status = code
    return result

  def http_error_302(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)
    result.status = code
    return result
