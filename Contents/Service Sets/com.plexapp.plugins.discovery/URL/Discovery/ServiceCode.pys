USER_AGENT = 'Mozilla/5.0 (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53'

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    pageElement = HTML.ElementFromURL(url)
    
    if 'apl.tv' in url:    
        title = pageElement.xpath('//meta[@property="og:title"]')[0].get('content')
        
        try:
            summary = pageElement.xpath('//meta[@name="description"]')[0].get('content')
        except:
            summary = None
            
        try:
            thumb = pageElement.xpath('//meta[@property="og:image"]')[0].get('content')
        except:
            thumb = None
        
        return EpisodeObject(
            title = title,
            summary = summary,
            thumb = thumb
        )
        
    else:   
        title = pageElement.xpath("//meta[@property='og:title']/@content")[0].strip()
        
        try:
            show = pageElement.xpath("//head/@title")[0].split("|")[1].strip()
        except:
            show = None
        
        try:
            summary = pageElement.xpath("//meta[@property='og:description']/@content")[0].strip()
        except:
            summary = None
            
        try:
            thumb = pageElement.xpath("//meta[@property='og:image']/@content")[0].strip()
        except:
            thumb = None
    
        return EpisodeObject(
            title = title,
            show = show,
            summary = summary,
            thumb = thumb
        )

####################################################################################################
def MediaObjectsForURL(url):
    mediaObjs = []

    if 'apl.tv' in url:
        mediaObjs.append(
            MediaObject(
                container               = 'mpegts',
                video_codec             = VideoCodec.H264,
                audio_codec             = AudioCodec.AAC,                 
                audio_channels          = 2,
                optimized_for_streaming = True,
                parts                   = [
                    PartObject(
                        key = HTTPLiveStreamURL(Callback(PlayLive, url = url))
                    )
                ]
            )
        )
        
    else:
        mediaObjs.append(
            MediaObject(
                container               = Container.MP4,
                video_codec             = VideoCodec.H264,
                audio_codec             = AudioCodec.AAC,
                audio_channels          = 2,
                video_resolution        = '720',
                optimized_for_streaming = True,
                parts                   = [
                    PartObject(
                        key = Callback(PlayVideo, url = url)
                    )
                ]
            )
        )

    return mediaObjs

####################################################################################################
@indirect
def PlayLive(url):
    try:
        pageElement     = HTML.ElementFromURL(url)
        videoUStreamURL = pageElement.xpath("//div[contains(@class, 'video-container')]//iframe/@src")[0]
        videoID         = Regex('(?<=embed/)[0-9]+').search(videoUStreamURL).group(0)
        hlsurl          = 'http://iphone-streaming.ustream.tv/ustreamVideo/%s/streams/live/playlist.m3u8' % videoID
    except:
        raise Ex.MediaNotAvailable
   
    return IndirectResponse(
        VideoClipObject,
        key = HTTPLiveStreamURL(url = hlsurl)
    )

####################################################################################################
@indirect
def PlayVideo(url):
    headers = {}
    headers['User-Agent'] = USER_AGENT

    pageContent = HTTP.Request(url, headers=headers).content

    try:
        video_url = Regex('.*"src" *: *"(http.*\.mp4)".*').search(pageContent).groups()[0]
    except:
        try:
            video_url = Regex('content *= *"(http.*\.mp4)"').search(pageContent).groups()[0]
            video_url = video_url.replace('110k', '3500k')
        except:
            raise Ex.MediaNotAvailable

    return IndirectResponse(
        VideoClipObject,
        key = video_url
    )
