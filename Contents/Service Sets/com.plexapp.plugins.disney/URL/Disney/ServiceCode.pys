HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:21.0) Gecko/20100101 Firefox/21.0'}
JSON_URL = 'http://video.disney.com/_grill/json/watch/%s'
STREAM_BASE = 'http://cdn.videos.dolimg.com/%s'

AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = GetJSON(url)
	title = data['title']
	summary = data['description']
	duration = int(data['duration_sec'])*1000
	thumb = data['thumb']

	if "Full Episode" in data['vType']:
		show_title = data['ptitle']

		return EpisodeObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			show = show_title
		)
	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)

####################################################################################################
def MediaObjectsForURL(url):

	resolutions = ["1080", "720", "480"]
	bitrates = {
		"1080":["8000","6000","4300"],
		"720":["3000","2200","1500"],
		"480":["1000","600"]
	}

	media_objects = []

	for res in resolutions:
		for bitrate in bitrates[res]:
			media_objects.append(
				MediaObject(
					parts = [
						PartObject(
							key = Callback(PlayVideo, url=url, bitrate=bitrate)
						)
					],
					bitrate = int(bitrate),
					container = Container.MP4,
					video_resolution = res,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True
				)
			)

	return media_objects

####################################################################################################
@indirect
def PlayVideo(url, bitrate):

	bitrates = ["600","1000","1500","2200","3000","4300","6000","8000"]
	index = bitrates.index(bitrate)
	json = GetJSON(url)
	videos = sorted(json['flavors'], key=lambda k: k['bitrate'], reverse=True)

	while index > -1:
		for video in videos:
			if video['format'] == 'mp4' and video['bitrate'] <= int(bitrates[index]):
					video_url = video['url']

					if video_url.startswith('mp4:'):
						video_url = STREAM_BASE % video_url.split('mp4:',1)[-1]

					return IndirectResponse(VideoClipObject, key=video_url)

		index = index - 1

	raise Ex.MediaNotAvailable

####################################################################################################
def GetJSON(url):

	path = url.split('/watch/',1)[1]
	json_url = JSON_URL % path
	json = JSON.ObjectFromURL(json_url)
	return json['stack'][0]['data'][0]
