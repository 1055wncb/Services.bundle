import re

DEFAULT_AUDIO_THUMB = 'http://www.dumpert.nl/gfx/thumb_audio.png'
THUMB_URL = 'http://static.dumpert.nl/sq_thumbs/%s_%s.jpg'

####################################################################################################

def MetadataObjectForURL(url):
    try:

        # Request the page
        page = HTML.ElementFromURL(url)

        # Extract the details from the page...
        title = page.xpath("//meta[@name='title']")[0].get('content')
        summary = page.xpath("//meta[@name='description']")[0].get('content')

        # If the url contains an audio clip, we should return a suitable 
        # TrackObject.
        audio_elements = page.xpath("//script[contains(text(), 'audio')]")
        if len(audio_elements) > 0:

            thumb = DEFAULT_AUDIO_THUMB
            return TrackObject(
                title = title,
                thumb = thumb)

        # Otherwise, the page contains a VideoClipObject. 
        thumb = page.xpath("//link[@rel='image_src']")[0].get('href')
        return VideoClipObject(
            title = title,
            summary = summary,
            thumb = thumb)

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    page = HTML.ElementFromURL(url)

    # If the page contains an audio element, then it's associated media is an MP3.
    audio_elements = page.xpath("//div[@class='audio']")
    if len(audio_elements) > 0:
        track_url = audio_elements[0].get('data-audurl')
        return [
          MediaObject(
            audio_codec = AudioCodec.MP3,
            parts = [PartObject(key=track_url)]
          )
        ]

    # Since the page does not contain audio, it must contain video
    video_url = page.xpath("//div[@class='video']")[0].get('data-vidurl')
    container = 'flv'
    if video_url.endswith(".mp4"):
        container = Container.MP4

    return [
      MediaObject(
        audio_codec = AudioCodec.AAC,
        container = container,
        parts = [PartObject(key=video_url)]
      )
    ]