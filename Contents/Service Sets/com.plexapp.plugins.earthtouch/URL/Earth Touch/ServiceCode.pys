BASE = "http://www.earth-touch.com"
SHOWS = BASE + "/shows/"
VIMEO = "http://vimeo.com/%s"

####################################################################################################
def NormalizeURL(url):

	url = url.split('?')[0]

	if not url.endswith('/'):
		url = '%s/' % url

	return url

####################################################################################################
def MetadataObjectForURL(url):

	series = SHOWS + url.split('/')[4] + "/mrss"
	item_node = XML.ElementFromURL(series).xpath('//item/category[@domain="%s"]/parent::item' % url)[0]

	vimeolink = item_node.xpath('./enclosure')[0].get('url')
	vimeolink = VIMEO % vimeolink.split('external/')[1]
	vimeolink = vimeolink.split('.hd.mp4')[0]

	metadata = URLService.MetadataObjectForURL(vimeolink)

	if metadata is not None:
		return metadata
	else:
		return VideoClipObject(
			title = 'Test'
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, format='hd'))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, format='sd'))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			video_resolution = '480',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, format=None):

	series = SHOWS + url.split('/')[4] + "/mrss"
	item_node = XML.ElementFromURL(series).xpath('//item/category[@domain="%s"]/parent::item' % url)[0]

	vimeolink = item_node.xpath('./enclosure')[0].get('url')
	vimeolink = VIMEO % vimeolink.split('external/')[1]
	vimeolink = vimeolink.split('.hd.mp4')[0]

	metadata = URLService.MetadataObjectForURL(vimeolink)

	if metadata is not None:
		media = URLService.MediaObjectsForURL(vimeolink)

	else:
		iframe = HTML.ElementFromURL(url).xpath('//iframe[contains(@src, "vimeo.com")]')

		if iframe:
			embed_url = iframe[0].get('src')
			media = URLService.MediaObjectsForURL('%s#referer=%s' % (embed_url, String.Quote(url)))
		else:
			raise Ex.MediaNotAvailable

	if format == "hd":
		return Redirect(media[0].parts[0].key)
	else:
		return Redirect(media[1].parts[0].key)
