BASE = "http://www.earth-touch.com"
SHOWS = BASE + "/shows/"
VIMEO = "http://vimeo.com/%s"

####################################################################################################
def NormalizeURL(url):

	url = url.split('?')[0]

	if not url.endswith('/'):
		url = '%s/' % url

	return url

####################################################################################################
def MetadataObjectForURL(url):

	series = SHOWS + url.split('/')[4] + "/mrss"
	item_node = XML.ElementFromURL(series).xpath('//item/category[@domain="%s"]/parent::item' % url)

	if len(item_node) < 1:
		return None

	vimeo_link = item_node[0].xpath('./enclosure')[0].get('url')

	if not 'vimeo.com' in vimeo_link:
		try:
			HTTP.Request(vimeo_link, follow_redirects=False).headers
		except Ex.RedirectError, e:
			vimeo_link = e.location

	vimeo_link = VIMEO % vimeo_link.split('external/')[1]
	vimeo_link = vimeo_link.split('.hd.mp4')[0]

	metadata = URLService.MetadataObjectForURL(vimeo_link)

	if metadata is not None:
		return metadata
	else:
		return VideoClipObject(
			title = 'Test'
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, format='hd'))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			video_resolution = 720,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, format='sd'))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			video_resolution = 480,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def PlayVideo(url, format=None):

	series = SHOWS + url.split('/')[4] + "/mrss"
	item_node = XML.ElementFromURL(series).xpath('//item/category[@domain="%s"]/parent::item' % url)

	if len(item_node) < 1:
		return None

	video_link = item_node[0].xpath('./enclosure')[0].get('url')
	video_link = video_link.replace('format=hd', 'format=%s' % format)
	return Redirect(video_link)
