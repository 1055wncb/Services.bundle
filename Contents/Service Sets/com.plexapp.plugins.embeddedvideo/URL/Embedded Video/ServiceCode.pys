import re

EMBEDDED_VIDEO = [
  ("//iframe", "src"), 
  ("//embed", "src"), 
  ("//object", "data"), 
  ("//param[@name = 'flashvars']", "value")]

EMBEDDED_SOURCES = [
  "youtube\.com\/watch(?:_popup)?\?v=([^&]+)",
  "youtube\.com\/embed\/([^?\/]+)",
  "youtu\.be\/([^?\/]+)",
  "youtube\.com\/v\/([^?\/]+)",
  "player\.vimeo\.com\/video\/(\d+)",
  "vimeo\.com\/(\d+)",
  "vimeo\.com\/[^#]+#(\d+)",
  "clip_id=(\d+)"]

####################################################################################################

def MetadataObjectForURL(url):

  req = HTTP.Request(url)
  if ShouldParse(req):
    source_url = FindExternalSource(req)
    if source_url is not None:
      return URLService.MetadataObjectForURL(source_url)

####################################################################################################

def MediaObjectsForURL(url):

  req = HTTP.Request(url)
  if ShouldParse(req):
    source_url = FindExternalSource(req)
    if source_url is not None:
      return URLService.MetadataObjectForURL(source_url)

####################################################################################################

def ShouldParse(req):
  # Check the content type and content length headers
  try:
    content_type = req.headers['content-type'].split(';')[0].strip()
  except:
    content_type = 'Unknown'
  try:
    content_length = int(req.headers['content-length'])
  except:
    content_length = 0
    
  Log("Length: %d  Type: %s", content_length, content_type)
  if (content_length <= 0 or content_length > max_length) and content_type not in valid_types:
    Log("Content length for unknown type %s is invalid - aborting", content_type)
    return False
  
  return True

####################################################################################################

def FindExternalSource(req):
  doc_content = req.content
  doc = HTML.ElementFromString(doc_content)

  # We're going to search through the HTML for known embedded video types. If we find any, 
  # then we can check their validity using the currently supported regular expressions.
  for (select, node) in EMBEDDED_VIDEO:
    for video in doc.xpath(select):
      try:
        node_url = video.get(node)
        for sources_check in EMBEDDED_SOURCES:
          try: 
            if len(re.findall(sources_check, node_url)) > 0:
              return node_url
          except: pass
      except: pass

  return None

