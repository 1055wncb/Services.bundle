RE_FLASHVARS = Regex('flashvars=&quot;config=(?P<url>[^&]+)&quot;')

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

#	page = HTML.ElementFromURL(url)
	page = HTML.ElementFromURL('http://surf-proxy.de/index.php?q=%s' % String.Quote(url, usePlus=True), cacheTime=CACHE_1MONTH)

	title = page.xpath("//meta[@name='title']")[0].get('content')
	description = page.xpath("//meta[@name='description']")[0].get('content')
	thumb = page.xpath("//meta[@property='og:image']")[0].get('content')

	# Attempt to extract the date.
	try:
		date = page.xpath("//span[@class='utc_timestamp']/text()")[0]
		date = Datetime.ParseDate(date)
	except:
		date = None

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb,
		originally_available_at = date
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, post_url=url))],
			container = Container.MP4,
			video_resolution = 'sd',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	page_content = HTTP.Request(url).content

	# Find the 'flashvars' associated with the player. This contains the required config path.
	config_url = RE_FLASHVARS.search(page_content).group('url')
	config_url = String.Unquote(config_url, usePlus=True)

	# We can use the config path to actually get a JSON page which contains the actual MP4 path to the associated video.
	json_page = HTTP.Request('http://surf-proxy.de/index.php?q=%s' % String.Quote(config_url, usePlus=True)).content
	json_page = json_page.replace("'", '"')
	json = JSON.ObjectFromString(json_page)

	video_url = json['playlist'][1]['url']
	return IndirectResponse(VideoClipObject, key=video_url)
