RE_FLASHVARS = Regex('flashvars=&quot;config=(?P<url>[^&]+)&quot;')
HTTP_HEADERS = {
	'Cookie': 'age_gate_birthday=19800101',
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:23.0) Gecko/20100101 Firefox/23.0'
}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

#	page = HTML.ElementFromURL(url)
	page = HTML.ElementFromURL('http://www.uswebproxy.com/index.php?q=%s' % String.Base64Encode(url), headers=HTTP_HEADERS, timeout=5.0, cacheTime=CACHE_1MONTH)

	title = page.xpath('//meta[@property="og:title"]/@content')[0]
	description = page.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = page.xpath('//meta[@property="og:image"]/@content')[0]

	# Attempt to extract the date.
	try:
		date = page.xpath("//span[@class='utc_timestamp']/text()")[0]
		date = Datetime.ParseDate(date)
	except:
		date = None

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb,
		originally_available_at = date
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, post_url=url))],
			container = Container.MP4,
			video_resolution = 'sd',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	page_content = HTTP.Request(url).content

	# Find the 'flashvars' associated with the player. This contains the required config path.
	config_url = RE_FLASHVARS.search(page_content)

	if not config_url:
		raise Ex.MediaNotAvailable

	config_url = String.Unquote(config_url.group('url'), usePlus=True)

	# We can use the config path to actually get a JSON page which contains the actual MP4 path to the associated video.
	json_page = HTTP.Request('http://www.uswebproxy.com/index.php?q=%s' % String.Base64Encode(config_url), timeout=5.0).content
	json_page = json_page.replace("'", '"')
	json = JSON.ObjectFromString(json_page)

	video_url = json['playlist'][1]['url']
	return IndirectResponse(VideoClipObject, key=video_url)
