RE_JSON = Regex('(\[\["video".+)\.forEach')
RE_AVAILABLE = Regex('currently unavailable', Regex.IGNORECASE)

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	page_content = HTTP.Request(url).content

	if RE_AVAILABLE.search(page_content):
		raise Ex.MediaNotAvailable

	title = HTML.ElementFromString(page_content).xpath('//h2/text()')[0]
	duration = None
	thumb = ''

	json = RE_JSON.search(page_content).group(1)
	json_obj = JSON.ObjectFromString(json)

	for i in json_obj:
		if i[0] == 'thumbnail_src':
			thumb = String.Unquote(i[1])
		elif i[0] == 'video_duration':
			duration = int(i[1]) * 1000

	return VideoClipObject(
		title = title,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(thumb, fallback='icon-default.png')
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '720',
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='720'))]
		),
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = 'sd',
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='sd'))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res='720'):

	page_content = HTTP.Request(url).content
	video = None

	if RE_AVAILABLE.search(page_content):
		raise Ex.MediaNotAvailable

	json = RE_JSON.search(page_content).group(1)
	json_obj = JSON.ObjectFromString(json)

	for i in json_obj:
		if i[0] == 'video':
			video = String.Unquote(i[1])
			video = JSON.ObjectFromString(video)
			break

	if not video:
		raise Ex.MediaNotAvailable

	if res == '720' and 'hd_src' in video:
		video_url = video['hd_src']
	elif 'sd_src' in video:
		video_url = video['sd_src']
	else:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video_url)
