RE_AMPERSAND = Regex('&(?!amp;)')

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	xml = GetXML(url)

	title = xml.xpath('//clipName/text()')[0]
	summary = xml.xpath('//abstract/text()')[0]
	duration = Datetime.MillisecondsFromString(xml.xpath('//length/text()')[0])
	thumb = xml.xpath('//thumbnailUrl/text()')[0].replace('_92x69.jpg', '_480x360.jpg')

	return VideoClipObject(
		title = title,
		summary = summary,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	xml = GetXML(url)
	url = xml.xpath('//videoUrl/text()')[0].replace('http://wms','rtmp://flash').replace('.wmv','').replace('scrippsnetworks.com/','scrippsnetworks.com/ondemand/&').split('&')

	return [
		MediaObject(
			video_resolution = '480',
			audio_channels = 2,
			parts = [
				PartObject(key=RTMPVideoURL(url=url[0], clip=url[1]))
			]
		)
	]

####################################################################################################
def GetXML(url):

	id = url.split('/')[-1].split('.')[0]

	# NB: must do it this way as the first line of their xml is a carriage return (which makes it invalid)
	xml = HTTP.Request('http://www.foodnetwork.com/content/food/videos/%s.videoplayer.xml' % id).content.strip()
	xml = RE_AMPERSAND.sub('&amp;', xml)

	return XML.ElementFromString(xml)
