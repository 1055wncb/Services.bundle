RE_VIDEO_DETAILS = Regex('video: ({"id":.+?"}),', Regex.DOTALL)
RE_COOKIE_STRING = Regex('hdnea=ip=.+?~st=[0-9]+~(?P<expiry>exp=[0-9]+~acl=.+)~id=.+(?P<hmac>~hmac=.+)')
SMIL_NAMESPACES = {"a":"http://www.w3.org/2005/SMIL21/Language"}

IPAD_HTTP_HEADERS = {'User-Agent':'Mozilla/5.0 (iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10'}

####################################################################################################
def MetadataObjectForURL(url):
    video = GetDetails(url)
    
    episode_title = video['name']
    summary = video['shortDescription']
    show = video['category'].split('Series/')[1]
    thumbs = [video['videoStillURL'], video['thumbnailURL']]
    duration = int(video['length'])*1000
    index = int(video['episode'])
    season = int(video['season'])
    rating = video['rating']
    date = Datetime.ParseDate(video['airdate']).date()
    
    return EpisodeObject(title=episode_title, show=show, summary=summary, index=index,
            season=season, duration=duration, content_rating=rating, originally_available_at=date,
            thumb=Resource.ContentsOfURLWithFallback(url=thumbs, fallback='icon-default.png'))
      
####################################################################################################
def MediaObjectsForURL(url):
    return [
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "720",
            audio_channels = 2,
            parts = [PartObject(key=Callback(PlayVideo, url=url, res="720"))]
        ),
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "576",
            audio_channels = 2,
            parts = [PartObject(key=Callback(PlayVideo, url=url, res="576"))]
        ),
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "360",
            audio_channels = 2,
            parts = [PartObject(key=Callback(PlayVideo, url=url, res="360"))]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, res):
    video = GetDetails(url)
    smil_url = video['videoURL']
    smil = XML.ElementFromURL(smil_url, headers=IPAD_HTTP_HEADERS)
    media_url = smil.xpath('//a:video', namespaces=SMIL_NAMESPACES)[0].get('src')
    http_cookies = HTTP.CookiesForURL(url)
    Log(http_cookies)
    c = ObjectContainer()
    c.add(VideoClipObject(
        items = [
                MediaObject(
                    parts=[PartObject(key=media_url)]
                )
            ]
        )
    )
    c.http_cookies = http_cookies
    c.http_headers = IPAD_HTTP_HEADERS
    return c

####################################################################################################
def GetDetails(url):
    content = HTTP.Request(url, headers=IPAD_HTTP_HEADERS).content
    video = JSON.ObjectFromString(RE_VIDEO_DETAILS.search(content).group(1))
    
    return video

####################################################################################################
def SignedURL(url):
    sig_string = ""
    foxLock = "#100FoxLock"
    foxSecret = "FoxKey"
    lead = "00"
    expiry = int(Datetime.TimestampFromDatetime(Datetime.Now())) + 60*1000
    relativeURL = url.split('link.theplatform.com/s/')[1].split('?')[0]
    checksum = CheckSum(lead, expiry, relativeURL)
    tokn = GenerateToken(lead, expiry, checksum, foxSecret) 
    signed_url = url + "&sig=" + token
    return

def CheckSum(expiry, relativeURL, lead="00"):
    _local4 = ((this.getFlags(_arg3) + this.getExpirationDate(_arg2).toString(16)) + Hex.fromString(this.getRelativePath(_arg1)));
    check_sum = lead + expiry + FromString(relativeURL)
    return check_sum

def FromString(s):
    return
    
def GenerateToken(lead, expiry, checksum, secret):
    return

#http://link.theplatform.com/s/fox.com/pTuZM9H_pKjg?mbr=true&feed=Fox.com%20Metadata%20Feed&format=SMIL&Tracking=true&Embedded=true

#00 4fa6d0ce 7592592467aefda46a31b4ca89af5819c5a35d23 466f784b6579"
# "00" + "4fa6d0ce" + "" + "466f784b6579"
    
#public function generateToken(_arg1:String, _arg2:uint, _arg3:Boolean=true):String{
#            return ((((this.getFlags(_arg3) + this.getExpirationDate(_arg2).toString(16)) + this.getCheckSum(_arg1, _arg2, _arg3)) + Hex.fromString(SECRET_NAME)));
#        }
### Evaluates to >>> ("00" + (Now+60s).toString(16)) + ... 

#private var a:String = "#100FoxLock";
#_arg1 = url (eg. http://link.theplatform.com/s/fox.com/pTuZM9H_pKjg?mbr=true&feed=Fox.com%20Metadata%20Feed&format=SMIL&Tracking=true&Embedded=true)
#_arg2 = 60 >>> 60 second lifespan of signature
#_arg3 = false >>> _includeQueryStringInChecksum
#SECRET_NAME:String = "FoxKey";

#private function getFlags(_arg1:Boolean):String{
#            if (_arg1){
#                return ("10");
#            };
#            return ("00");
#        }
### Evaluates to >>> "00"

#protected function getExpirationDate(_arg1:uint):uint{
#            var _local2:Date = new Date(); >>> timestamp for NOW
#            var _local3:uint = uint((_local2.valueOf() / 1000)); >>>divide timestamp by 1000
#            return ((_local3 + _arg1)); >>> timestamp plus 60 seconds
#        }
### Evaluates to timestamp for Now+60seconds

###### >>>>>>
# protected function getCheckSum(_arg1:String, _arg2:uint, _arg3:Boolean):String{
#            var _local4:HMAC = Crypto.getHMAC("sha1");
#            var _local5:ByteArray = Hex.toArray(this.getClearText(_arg1, _arg2, _arg3));
#            var _local6:ByteArray = Hex.toArray(Hex.fromString(this.a));
#            var _local7:ByteArray = _local4.compute(_local6, _local5);
#            return (Hex.fromArray(_local7));
#        }

#public static function toArray(_arg1:string):ByteArray{
#            var _local2:ByteArray;
#            var _local3:uint;
#            _arg1 = _arg1.replace(/\s|:/gm, "");
#            _local2 = new ByteArray();
#            if ((_arg1.length & (1 == 1))){
#                _arg1 = ("0" + _arg1);
#            };
#            _local3 = 0;
#            while (_local3 < _arg1.length) {
#                _local2[(_local3 / 2)] = parseint(_arg1.substr(_local3, 2), 16);
#                _local3 = (_local3 + 2);
#            };
#            return (_local2);
#       }

#public static function fromArray(_arg1:ByteArray, _arg2:boolean=false):string{
#            var _local3:string;
#            var _local4:uint;
#            _local3 = "";
#            _local4 = 0;
#            while (_local4 < _arg1.length) {
#                _local3 = (_local3 + ("0" + _arg1[_local4].tostring(16)).substr(-2, 2));
#                if (_arg2){
#                    if (_local4 < (_arg1.length - 1)){
#                        _local3 = (_local3 + ":");
#                    };
#                };
#                _local4++;
#            };
#            return (_local3);
#        }

#public static function getHMAC(_arg1:String):HMAC{
#            var _local2:Array;
#            var _local3:uint;
#            _local2 = _arg1.split("-");
#            if (_local2[0] == "hmac"){
#                _local2.shift();
#            };
#            _local3 = 0;
#            if (_local2.length > 1){
#                _local3 = parseInt(_local2[1]);
#            };
#            return (new HMAC(getHash(_local2[0]), _local3));
#        }

#public static function getHash(_arg1:String):IHash{
#            switch (_arg1){
#                case "md2":
#                    return (new MD2());
#                case "md5":
#                    return (new MD5());
#                case "sha":
#                case "sha1":
#                    return (new SHA1());
#                case "sha224":
#                    return (new SHA224());
#                case "sha256":
#                    return (new SHA256());
#            };
#            return (null);
#        }

#public static function fromString(_arg1:String, _arg2:Boolean=false):String{
#            var _local3:ByteArray;
#            _local3 = new ByteArray();
#            _local3.writeUTFBytes(_arg1);
#            return (fromArray(_local3, _arg2));
#        }

#private function getClearText(_arg1:String, _arg2:uint, _arg3:Boolean):String{
#            var _local4:String;
#            if (_arg3){
#                _local4 = (((this.getFlags(_arg3) + this.getExpirationDate(_arg2).toString(16)) + Hex.fromString(this.getRelativePath(_arg1))) + Hex.fromString(this.getQueryString(_arg1)));
#            } else {
#                _local4 = ((this.getFlags(_arg3) + this.getExpirationDate(_arg2).toString(16)) + Hex.fromString(this.getRelativePath(_arg1)));
#            };
#            return (_local4);

#private function getRelativePath(_arg1:string):string{
#            var _local2:string;
#            var _local3:boolean;
#            if (_arg1.indexof("content.select?") > -1){
#                _local3 = true;
#            } else {
#                _local3 = false;
#            };
#            if (_local3){
#                _local2 = _arg1.slice((_arg1.indexof("content.select?") + 15));
#                _local2 = _local2.slice((_local2.indexof("pid=") + 4));
#                if (_local2.indexof("&") > -1){
#                    _local2 = _local2.slice(0, _local2.indexof("&"));
#                };
#            } else {
#                _local2 = _arg1.slice((_arg1.indexof("theplatform.com/s/") + 18));
#                if (_local2.indexof("?") > -1){
#                    _local2 = _local2.slice(0, _local2.indexof("?"));
#                };
#            };
#            return (_local2);

