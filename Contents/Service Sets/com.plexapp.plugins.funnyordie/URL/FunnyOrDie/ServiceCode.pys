IPAD_URL = 'http://v.fod4.com/i/v/%s/v,%s,.mp4.csmil/master.m3u8?__b__=600__a__=off'
RE_VIDEO_ID = Regex('/videos/(?P<video_id>[^/]+)')

####################################################################################################
def NormalizeURL(url):

	url = url.split('?',1)[0]

	if '/embed/' in url:
		url = url.replace('/embed/', '/videos/')

	return url

####################################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)

	# Extract the details available directly form the page.
	title = page.xpath("//head//meta[@property='og:title']")[0].get('content')
	description = page.xpath("//head//meta[@property='og:description']")[0].get('content')
	thumb = page.xpath("//head//meta[@property='og:image']")[0].get('content')

	try:
		duration = int(page.xpath("//head//meta[@property='video:duration']")[0].get('content'))*1000
	except:
		duartion = None

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb,
		duration = duration
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '720',
			parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url, res='RESOLUTION=1280x720')))],
			audio_channels = 2
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = 'sd',
			parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url, res='RESOLUTION=480x270')))],
			audio_channels = 2
		)
	]

####################################################################################################
def PlayVideo(url, res='RESOLUTION=1280x720'):

	video_id = RE_VIDEO_ID.search(url).group('video_id')

	# Not all clips are available in higher bitrates, but most appear to have up to 1200 at least.
	# Use 110 as a last resort.

	try:
		master_playlist = HTTP.Request(IPAD_URL % (video_id, '110,200,400,600,1200,1800,2500')).content.split('\n')
	except:
		try: 
			master_playlist = HTTP.Request(IPAD_URL % (video_id, '110,200,400,600,1200')).content.split('\n')
		except:
			try:
				master_playlist = HTTP.Request(IPAD_URL % (video_id, '110')).content.split('\n')
			except:
				raise Ex.MediaNotAvailable

	playlist_url = None

	for i, line in enumerate(master_playlist):
		if res in line:
			playlist_url = master_playlist[i+1]
		if 'avc1' in line:
			fallback_playlist_url = master_playlist[i+1]

	if not playlist_url:
		playlist_url = fallback_playlist_url

	return Redirect(playlist_url)
