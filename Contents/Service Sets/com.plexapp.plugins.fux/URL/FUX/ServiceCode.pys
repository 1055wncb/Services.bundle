BASE_URL = 'http://www.fux.com'
RE_PLAYLIST = Regex('playlist: \[(.+)\],', Regex.DOTALL)

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	json_obj = GetJSON(url)

	return VideoClipObject(
		title = json_obj['title'],
		thumb = json_obj['image'],
		genres = ['XXX','Adult','18+'],
		content_rating = 'X'
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res=1080))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			video_resolution = '1080',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res=720))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res=480))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			video_resolution = '480',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res=1080):

	json_obj = GetJSON(url)
	available_versions = []

	for source in json_obj['sources']:
		label = int(source['label'].strip('p'))
		available_versions.append(label)

	if len(available_versions) < 1:
		raise Ex.MediaNotAvailable

	closest = min((abs(res - i), i) for i in available_versions)[1]

	for source in json_obj['sources']:
		if source['label'] == '%dp' % closest:
			return IndirectResponse(VideoClipObject, key=source['file'])

	raise Ex.MediaNotAvailable

####################################################################################################
def GetJSON(url):

	data = HTTP.Request(url).content
	json = RE_PLAYLIST.search(data)

	if not json:
		raise Ex.MediaNotAvailable

	return JSON.ObjectFromString(json.group(1))

####################################################################################################
def TestURLs():

	test_urls = []
	urls = HTML.ElementFromURL(BASE_URL).xpath('//a[contains(@href, "/video/")]/@href')

	for url in urls:
		if not url.startswith('http://'):
			url = '%s%s' % (BASE_URL, url)
		
		if url not in test_urls:
			test_urls.append(url)

		if len(test_urls) >= 3:
			break

	return test_urls
