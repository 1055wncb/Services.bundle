import re, string
XML_URL = 'http://www.g4tv.com/xml/BroadbandPlayerService.asmx/GetEmbeddedVideo?videoKey=%s&strPlaylist=&playLargeVideo=true&excludedVideoKeys=&playlistType=normal&maxPlaylistSize=1&cb=1288569'
HD_XML_URL = 'http://www.g4tv.com/xml/BroadbandPlayerService.asmx/GetEmbeddedHdVideo?videoKey=%s&strPlaylist=&playLargeVideo=true&excludedVideoKeys=&playlistType=normal&maxPlaylistSize=1&cb=1288569'

####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):

  data = GetVideoData(url, False)

  clip_title = data.xpath('//title')[0].text
  clip_summary = data.xpath('//description')[0].text
  date = data.xpath('//date')[0].text
  thumb_url = data.xpath('//largeimage')[0].text
  duration = data.xpath('//duration')[0].text
  duration = int(duration)*1000
  
  # Construct a metadata item
  vc = VideoClipObject(
    title = clip_title,
    originally_available_at = Datetime.ParseDate(date).date(),
    summary = clip_summary,
    thumb = thumb_url,
    duration = duration
  )

  return vc

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, HD=True))],
      container = 'flv',
      video_resolution = '540',
      aspect_ratio = '1.77',
      bitrate = '2000',
      video_codec = VideoCodec.VP6,
      audio_codec = AudioCodec.MP3
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, HD=False))],
      container = 'flv',
      aspect_ratio = '1.33',
      bitrate = '704',
      video_resolution = 'sd',
      video_codec = VideoCodec.VP6,
      audio_codec = AudioCodec.MP3
    )
  ]

####################################################################################################
def PlayVideo(url, HD=False):

  data = GetVideoData(url, HD)

  video_url = data.xpath('//filepath')[0].text
  video_url= String.Unquote(video_url.split('r=')[1])

  return Redirect(video_url)

####################################################################################################
def GetVideoData(url, HD):

  details_xml = XML_URL
  if HD:
    details_xml = HD_XML_URL

  video_id = re.search('/(\d+?)/', url).group(1)

  try: 
    # We'll grab the details page, and also verify that it has information about some videos.
    data = HTML.ElementFromURL(details_xml % video_id, cacheTime = 7200, errors = 'ignore')
    data.xpath('//embeddedvideos')[0]
  except:
    video_page = HTML.ElementFromURL(url, cacheTime = 7200, errors = 'ignore')
    video_id = video_page.xpath('//div[@class="video-player-wrap"]')[0].get('id').split('_')[1]
    data = HTML.ElementFromURL(details_xml % video_id, cacheTime = 7200, errors = 'ignore')

  return data