NAMESPACES = {"media":"http://search.yahoo.com/mrss/"}
MRSS_URL = 'http://www.gametrailers.com/feeds/mrss?uri=%s'
MP4_URL = "http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s"
RE_AMPERSANDS = Regex('&(?!amp;)')

MediaObject.container = Container.MP4
MediaObject.video_codec = VideoCodec.H264
MediaObject.audio_codec = AudioCodec.AAC
MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True
AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):
	return url

####################################################################################################
def MetadataObjectForURL(url):

	uri = GetURI(url)

	if not uri:
		return None

	feed = RSS.FeedFromURL(MRSS_URL % uri)
	video = feed.entries[0]
	title = video.title
	date = video.updated
	description = video.summary
	duration = int(float(video.media_content[0]['duration'])*1000)
	thumb = video.media_thumbnail[0]['url']

	return VideoClipObject(
		title = title,
		originally_available_at = Datetime.ParseDate(date).date(),
		summary = description,
		duration = duration,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	bitrates = ['3500','2200','1700','1200']
	resolutions = ['720','540','432','360']
	media_objects = []

	for i, bitrate in enumerate(bitrates):
		if 'bonus-round' in url:
			media_objects.append(
				MediaObject(
					parts = [
						PartObject(key=Callback(PlayVideo, url=url, bitrate=bitrate, index=0)),
						PartObject(key=Callback(PlayVideo, url=url, bitrate=bitrate, index=1))
						],
					bitrate = bitrate,
					video_resolution = resolutions[i]
				)
			)
		else:
			media_objects.append(
				MediaObject(
					parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=bitrate, index=0))],
					bitrate = bitrate,
					video_resolution = resolutions[i]
				)
			)

	return media_objects

####################################################################################################
def PlayVideo(url, bitrate='1700', index=0, fmt=None):

	BITRATES = ['1200', '1700', '2200', '3500']

	uri = GetURI(url)

	if not uri:
		return None

	mrss_data = HTTP.Request(MRSS_URL % uri).content
	mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	try:
		player_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)[index].get('url')
	except:
		raise Ex.MediaNotAvailable

	player_data = XML.ElementFromURL(player_url)
	try:
		rtmp_url = player_data.xpath('//rendition[@bitrate="'+bitrate+'"]/src')[0].text
	except:
		rtmp_url = ''
		index = BITRATES.index(bitrate)
		while index > -1:
			try:
				rtmp_url = player_data.xpath('//rendition/src')[index].text
				break
			except:
				index = index - 1

	stream_url = rtmp_url.split('/mtvnorigin/')[1]
	mp4_url = MP4_URL % stream_url

	return Redirect(mp4_url)

####################################################################################################
def GetURI(url):

	data = HTML.ElementFromURL(url)
	uri = data.xpath('//div[@id="video-player"]')

	if len(uri) < 1:
		return None
	else:
		return uri[0].get('data-mgid')
