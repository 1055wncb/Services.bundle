NAMESPACES = {"a":"http://www.w3.org/2001/SMIL20/Language", "tp":"http://xml.theplatform.com/mps/metadata/content/custom"}
SMIL_URL = "http://release.theplatform.com/content.select?format=SMIL&pid=%s"
VIDEO_URL = 'http://www.globaltv.com/video/%s/video.html?v=%s&pid=%s#%s/video/full+episodes'
RE_PID = Regex('pid: \"([^"]+)\"')

#########################################################################################
def NormalizeURL(url):
	return url


#########################################################################################
def MetadataObjectForURL(url):
	smil = GetSMIL(url)
	details = GetSRC(smil)
	
	title = details.get('title')
	summary = details.get('abstract')
	try:
		duration = int(details.get('dur').strip('ms'))
	except:
		duration = 0

	try:
		show_title = details.get('tp:Show', namespaces=NAMESPACES)
		season = int(details.get('tp:Season', namespaces=NAMESPACES))
		episode = int(details.get('tp:Episode', namespaces=NAMESPACES))

		return EpisodeObject(
			title = title,
			summary = summary,
			duration = duration,
			show = show_title,
			season = season, 
			index = episode,
			thumb = R('icon-default.png')
		)
	except:
		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = R('icon-default.png')
		)
	
#########################################################################################
def MediaObjectsForURL(url):
	return [
		MediaObject(
			video_resolution = "480",
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

#########################################################################################
@indirect
def PlayVideo(url):
	smil = GetSMIL(url)
	details = GetSRC(smil)
	src = details.get('src')
	
	# try splitting in {break} -- all newer content is done like this
	src = src.split('{break}')	
	# older videos it's <break> instead of {break} and needs different handling later
	if len(src) < 2:
		src = details.get('src').split('<break>')

	player = src[0].split('ondemand/')[0]+'ondemand/'
	app = 'ondemand' + src[0].split('ondemand')[1]
	clip = src[1].replace(".flv","") # replace .flv needed if legacy <break> was used
	
	return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=clip, app=app))
	



#########################################################################################
def GetSMIL(url):
	# from the plugin we get handed the pID as it's labour intesive/slow to extract it 
	# manually for lists and when loading show lists from the platform in the plugin we  
	# are provided these and include them in our key url
	try:
		pID = url.split('&pid=')[1].split('#')[0]
	except:
		# if this didn't work we're loading in myplex or an otherwise direct url
		# or didn't get it passed so we can parse it out of the page content
		src = HTTP.Request(url.replace(' ','%20')).content
		pID = RE_PID.findall(src)[0]

	smil = XML.ElementFromURL(SMIL_URL % pID)
	return smil

def GetSRC(smil):
	return smil.xpath('//a:ref[starts-with(@src, "rtmp")]', namespaces=NAMESPACES)[0]

#########################################################################################
def TestURLs():
	# NB:  We are limiting the amount of entries in the JSON items via the URL query
	# 10 for the main list (we have to make sure we get at least one or two Full Episodes)
	# and 20 for the actual show queries (Some shows have the first 4 as the same PID we
	# we want at least 2 separate PIDs for shows to return -- Gerk - 2012/06/05
	test_urls = []
	entries = JSON.ObjectFromURL("http://feeds.theplatform.com/ps/JSON/PortalService/2.2/getCategoryList?PID=W_qa_mi18Zxv8T8yFwmc8FIOolo_tp_g&startIndex=1&endIndex=10&query=hasReleases&query=CustomText|PlayerTag|z/Global%20Video%20Centre&field=fullTitle&field=PID&field=title&field=ID")

	for entry in entries['items']:
		# don't try to parse non Full Episode items
		if not('Full Episodes' in entry['fullTitle']):
			continue

		iid = entry['ID']
		data = JSON.ObjectFromURL('http://feeds.theplatform.com/ps/JSON/PortalService/2.2/getReleaseList?PID=W_qa_mi18Zxv8T8yFwmc8FIOolo_tp_g&startIndex=1&endIndex=5&query=categoryIDs|%s&field=PID&field=contentId&contentCustomField=Show' % iid)

		for item in data['items']:
			PID = item['PID']
			iid = item['contentID']
			showtitle = item['contentCustomData'][0]['value']

			# remove spaces for URL purposes for this provider
			showtitle=showtitle.replace(' ','')
			# corner case for "Who's the Boss?" (they strip out the ? instead of encoding it)
			# -- Gerk - 2012/06/04
			showtitle = showtitle.replace('?', '')

			test_urls.append(VIDEO_URL % (showtitle, iid, PID, showtitle))
			if len(test_urls) > 5:
				break
		if len(test_urls) > 5:
			break
	
	return test_urls
