SMIL_URL = 'http://release.theplatform.com/content.select?pid=%s&path=1aviva_gc_video_banners_opt_companion&format=SMIL&Embedded=true'
SMIL_NS = {'a': 'http://www.w3.org/2001/SMIL20/Language'}
RE_PID = Regex('pid=(.+)%26path=')

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	smil = GetSMIL(url)

	if not smil:
		return None

	video = smil.xpath('//a:ref', namespaces=SMIL_NS)[0]

	title = video.get('title')
	summary = video.get('abstract')
	duration = int(video.get('dur').strip('ms'))

	return VideoClipObject(
		title = title,
		summary = summary,
		duration = duration
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			protocol = 'webkit'
		)
	]

####################################################################################################
def GetSMIL(url):

	data = HTTP.Request(url).content
	pid = RE_PID.search(data)

	if not pid:
		return None
	else:
		smil = XML.ElementFromURL(SMIL_URL % pid.group(1))
		return smil

####################################################################################################
def PlayVideo(url):

	smil = GetSMIL(url)

	if not smil:
		return None

	rtmp_url = smil.xpath('//a:meta', namespaces=SMIL_NS)[0].get('base')
	clip = smil.xpath('//a:ref', namespaces=SMIL_NS)[0].get('src')
	clip = clip.strip('.flv')

	return Redirect(RTMPVideoURL(url=rtmp_url, clip=clip))
