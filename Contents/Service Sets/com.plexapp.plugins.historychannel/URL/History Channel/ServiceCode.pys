SIGNATURE_REQUEST = 'http://www.history.com/components/get-signed-signature?url=%s'
RE_MRSS = Regex('mrssData =[ ]+"([^"]+)')
MRSS_NS = {'media': 'http://search.yahoo.com/mrss/'}

####################################################################################################
def MetadataObjectForURL(url):

  item = GetVideoItem(url)

  if not item:
    raise Ex.MediaNotAvailable

  page = HTML.ElementFromURL(url)

  show_title = page.xpath('//div[@class="show-heading"]/h2/text()')
  if len(show_title) < 1:
    show_title = None
  else:
    show_title = show_title[0]
    if '- New Episodes' in show_title:
      show_title = show_title.rsplit('-', 1)[0].strip()

  episode_title = item.xpath("./title/text()")[0]
  summary = item.xpath("./media:description/text()", namespaces=MRSS_NS)[0]
  duration = int(item.xpath("./media:content", namespaces=MRSS_NS)[0].get('duration')) * 1000
  thumb = item.xpath("./media:thumbnail", namespaces=MRSS_NS)[-1].get('url')

  if show_title:
    return EpisodeObject(
      title = episode_title,
      show = show_title,
      duration = duration,
      summary = summary,
      thumb = thumb
    )
  else:
    return VideoClipObject(
      title = episode_title,
      duration = duration,
      summary = summary,
      thumb = thumb
    )

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      video_resolution = '360',
      optimized_for_streaming = True,
      audio_channels = 2,
      parts = [PartObject(key=Callback(PlayVideo, url = url))]
    )
  ]

####################################################################################################
def PlayVideo(url):

  item = GetVideoItem(url)

  if not item:
    raise Ex.MediaNotAvailable

  video_link = item.xpath("./media:text[contains(text(), 'm3uUrl=')]/text()", namespaces=MRSS_NS)[0].split('?')[0].replace('m3uUrl=', '')
  video_id = video_link[video_link.find('/s/') + 3:]

  auth_token = HTTP.Request(SIGNATURE_REQUEST % video_id, cacheTime = 0).content
  video_url = video_link + '?format=redirect&sig=' + auth_token

  return Redirect(video_url)

####################################################################################################
def GetVideoItem(url):

  try:
    page_content = HTTP.Request(url).content
  except:
    return None

  mrssdata = RE_MRSS.search(page_content)

  if mrssdata:
    mrssdata = String.Unquote(String.Base64Decode(mrssdata.group(1)))
    data = XML.ElementFromString(mrssdata)

    if url.find('#') != -1:
      video_name = url[url.find('#') + 1:]
      item = data.xpath("//item/link[contains(text(), '%s')]/.." % video_name)

      if len(item) < 1:
        raise Ex.MediaNotAvailable
      else:
        return item[0]

    else:
      item = data.xpath("//item")[0]
      return item

  else:
    return None

####################################################################################################
def TestURLs():

    test_urls = []

    page = HTML.ElementFromURL('http://www.history.com/shows')

    for link in page.xpath("//a[@class='watch more']"):
        if len(test_urls) < 3:
            url = link.get('href')
            url = "http://www.history.com" + url

            if url not in test_urls:
                test_urls.append(url)

        else:
            break

    return test_urls
