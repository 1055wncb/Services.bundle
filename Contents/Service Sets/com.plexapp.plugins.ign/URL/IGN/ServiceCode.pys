CONFIG_URL = "%s.config?windowLocation=%s"
IGN_NS = {'smil': 'http://www.w3.org/2001/SMIL20/Language'}
RE_DATE = Regex('([a-z]{3}\s[0-9]{1,2},\s[0-9]{4})', Regex.IGNORECASE)
RE_FLASHVARS_URL = Regex('var videoUrl = "([^"]+)')

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]
 
####################################################################################################
def MetadataObjectForURL(url):

	video_page_url = VideoPageURL(url)

	if not video_page_url:
		return None

	data = HTML.ElementFromURL(video_page_url)
	title = data.xpath('//meta[@property="og:title"]')[0].get('content').split(' - ')[0]
	summary = data.xpath('//meta[@property="og:description"]')[0].get('content')
	thumb = data.xpath('//meta[@property="og:image"]')[0].get('content')

	originally_available_at = None
	try:
		date = data.xpath('//ul[@class="video-details"]/li')
		if len(date) > 0:
			date = RE_DATE.search(date[0].text)
			if date:
				originally_available_at = Datetime.ParseDate(date.group(1)).date()
	except:
		pass

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb,
		originally_available_at = originally_available_at
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=5000000))],
			container = 'mp4',
			video_resolution = 720,
			#aspect_ratio = '1.78',
			bitrate = 5000,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=3000000))],
			container = 'mp4',
			video_resolution = 540,
			#aspect_ratio = '1.78',
			bitrate = 3000,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=1700000))],
			container = 'mp4',
			video_resolution = 360,
			#aspect_ratio = '1.78',
			bitrate = 1700,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=1200000))],
			container = 'mp4',
			video_resolution = 360,
			#aspect_ratio = '1.78',
			bitrate = 1200,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=500000))],
			container = 'mp4',
			video_resolution = 360,
			#aspect_ratio = '1.78',
			bitrate = 500,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def VideoPageURL(url):

	# Try to find the 'real' video page url
	try:
		page = HTTP.Request(url).content
	except:
		raise Ex.MediaNotAvailable

	# See if we can find the url in the flashvars (xpath)
	flashvars = HTML.ElementFromString(page).xpath('//param[@name="flashvars"]')

	if len(flashvars) >= 1:
		video_page_url = flashvars[0].get('value').split('url=',1)[1]
		return video_page_url

	# See if we can find the url in some javascript code
	video_page_url = RE_FLASHVARS_URL.search(page)

	if video_page_url:
		return video_page_url.group(1).replace('\\x3A', ':').replace('\\x2F', '/').replace('\\x2D', '-')

	# See if we can find a link to the video page
	link = HTML.ElementFromString(page).xpath('//a[contains(@href, "/videos/")]//span[contains(@class, "play")]/parent::a')

	if len(link) >= 1:
		return link[0].get('href')

	return None

####################################################################################################
@indirect
def PlayVideo(url, bitrate):

	video_page_url = VideoPageURL(url)

	if not video_page_url:
		raise Ex.MediaNotAvailable

	data = JSON.ObjectFromURL(CONFIG_URL % (video_page_url, String.Quote(video_page_url, usePlus=False)))
	media_url = data['playlist']['media']['url']
	video_url = None

	if '.smil' in media_url:
		smil = XML.ElementFromURL(media_url)
		available_bitrates = smil.xpath('//smil:video[@system-bitrate]/@system-bitrate', namespaces=IGN_NS)

		if len(available_bitrates) < 1:
			raise Ex.MediaNotAvailable

		closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]
		video_url = smil.xpath('//smil:video[@system-bitrate="' + closest + '"]', namespaces=IGN_NS)[0].get('src')

	else:
		video_url = media_url

	if not video_url.startswith('http://'):
		video_url = 'http://%s' % video_url

	return IndirectResponse(VideoClipObject, key=video_url)
