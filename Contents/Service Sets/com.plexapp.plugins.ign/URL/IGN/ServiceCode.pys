import re

####################################################################################################
def NormalizeURL(url):
	return url
 
####################################################################################################
def MetadataObjectForURL(url):

	data = HTML.ElementFromURL(url)
	title = data.xpath('//meta[@property="og:title"]')[0].get('content').split(' - ')[0]
	summary = data.xpath('//meta[@property="og:description"]')[0].get('content').split('"')[1]
	thumb = data.xpath('//meta[@property="og:image"]')[0].get('content')

	try:
		date = data.xpath('//ul[@class="video-details"]/li')
		if len(date) > 0:
			date = re.search('([a-z]{3}\s[0-9]{1,2},\s[0-9]{4})', date[0].text, re.IGNORECASE)
			if date:
				originally_available_at = Datetime.ParseDate(date.group(1)).date()
	except:
		originally_available_at = None

	vc = VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb,
		originally_available_at = originally_available_at
	)

	return vc

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt=720))],
			container = Container.MP4,
			video_resolution = '720',
			aspect_ratio = '1.77',
			bitrate = 3000,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt=540))],
			container = Container.MP4,
			video_resolution = '540',
			aspect_ratio = '1.77',
			bitrate = 2500,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt=360))],
			container = Container.MP4,
			video_resolution = '360',
			aspect_ratio = '1.77',
			bitrate = 1000,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def PlayVideo(url, fmt):

	data = HTTP.Request(url).content
	bitrates = re.search('"bitrates":(\[.+?\])', data)
	available = []

	if bitrates:
		bitrates = JSON.ObjectFromString(bitrates.group(1))

		for b in bitrates:
			available.append( b['height'] )

		closest = min((abs(fmt - i), i) for i in available)[1]

		for b in bitrates:
			if closest == b['height']:
				url = b['url'].replace('mp4:', '')
				url = 'http://assets.ign.com/%s' % url
				return Redirect(url)

	else:
		clip = re.search('"clip":({.+?})', data)

		if clip:
			clip = JSON.ObjectFromString(clip.group(1))
#			url = clip['url'].replace('flvlow', 'flvhigh')
			url = clip['url']
			return Redirect(url)
