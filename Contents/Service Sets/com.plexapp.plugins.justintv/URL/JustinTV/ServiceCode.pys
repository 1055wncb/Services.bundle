ARCHIVES = 'http://api.justin.tv/api/channel/archives/%s.json'
CLIP_DATA = 'http://api.justin.tv/api/clip/show/%s.json'

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	video = VideoFromURL(url)

	try:
		originally_available_at = Datetime.ParseDate(video['updated_on'])
	except:
		try:
			originally_available_at = Datetime.ParseDate(video['created_on'])
		except:
			originally_available_at = None

	return VideoClipObject(
		title = video['title'],
		thumb = video['image_url_medium'],
		originally_available_at = originally_available_at,
		duration = int(video['length']) * 1000
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = 'flv',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 1,
			optimized_for_streaming = True,
			parts = [PartObject(key = Callback(PlayVideo, url = url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	video = VideoFromURL(url)
	return IndirectResponse(VideoClipObject, key=video['video_file_url'])

####################################################################################################
def VideoFromURL(url):

	# Request the details page associated with the video clip
	video_id = url.split('/')[-1]
	video = JSON.ObjectFromURL(CLIP_DATA % video_id)
	return video[0]

####################################################################################################
def TestURLs():

	test_urls = []
	users = ['hazerjr3', 'nl_kripp']

	for user in users:
		user_test_urls = []
		page = HTML.ElementFromURL('http://www.justin.tv/%s/videos' % user)

		for item in page.xpath('//div[@id="videos"]//a[@class="thumb"]'):
			video_url = 'http://www.justin.tv' + item.get('href')

			if video_url.find('/b/') > -1:
				user_test_urls.append(video_url)

			if len(user_test_urls) >= 2:
				break

		test_urls = test_urls + user_test_urls

	return test_urls
