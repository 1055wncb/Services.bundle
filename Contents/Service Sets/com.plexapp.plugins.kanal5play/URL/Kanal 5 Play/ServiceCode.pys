import re

RE_CACHETOKEN = Regex('cacheToken: "(.+?)",')
RE_VIDEO_ID	= Regex('/video/([0-9]+)')
RE_EP_INDEX = Regex('Avsnitt ([0-9]+)')
RE_SE_INDEX = Regex('song ([0-9]+)')

API_IPAD = 'http://www.kanal5play.se/api/getVideoCached?cacheToken=%s&format=IPAD&videoId=%s&withTheme=true'
API_FLASH = 'http://www.kanal5play.se/api/getVideoCached?cacheToken=%s&format=FLASH&videoId=%s&withTheme=true'
RSS_URLS = ['http://www.kanal5play.se/rss?type=CLIP', 'http://www.kanal5play.se/rss?type=PROGRAM']

API_IPAD_EXT = '/api/getVideoCached?cacheToken=%s&format=IPAD&videoId=%s&withTheme=true'
API_FLASH_EXT = '/api/getVideoCached?cacheToken=%s&format=FLASH&videoId=%s&withTheme=true'

####################################################################################################
def NormalizeURL(url):

	if '#!' in url:
		url = url.replace('progam#!', '')
		url = url.replace('/play/', '')
		url = url.split('|')[0]

	return url

####################################################################################################
def MetadataObjectForURL(url):

	details = GetDetails(url)

	episode_title = details['title']
	show_title = details['program']['name']
	episode_summary = details['description']
	episode_duration = int(details['length'])
	episode_thumb = details['posterUrl']

	try: season_index = int(details['seasonNumber'])
	except: season_index = None

	try: episode_index = int(details['episodeNumber'])
	except: episode_index = None

	try: originally_available_at = Datetime.FromTimestamp(details['shownOnTvDateTimestamp']/1000)
	except: originally_available_at = None

	if "SEGMENT" in details['type'] or episode_index is None:
		return VideoClipObject(
			title = show_title + ' - ' + episode_title,
			summary = episode_summary,
			duration = episode_duration,
			thumb = episode_thumb
		)
	else:
		return EpisodeObject(
			title = episode_title,
			index = episode_index,
			season = season_index,
			show = show_title,
			originally_available_at = originally_available_at,
			summary = episode_summary,
			duration = episode_duration,
			thumb = episode_thumb
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			optimized_for_streaming = True,
			parts = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			]
		)
	]

####################################################################################################
def PlayVideo(url):

	details = GetDetails(url, API_IPAD_EXT)

	if 'reasonsForNoStreams' in details:
		if "Videon 채r inte tillg채nglig i din region." in details['reasonsForNoStreams']:
			raise Ex.MediaGeoblocked
		else:
			return PlayRTMPVideo(url)

	HLSStreams = getHLSStreams(details['streams'][0]['source'])

	maxBitrateUrl = ""
	sortedStreams = sorted(HLSStreams, key=lambda stream: stream["bitrate"], reverse=True)

	for s in sortedStreams:
		maxBitrateUrl = s["url"]
		break

	newPlaylist = ""
	orgPlayList = HTTP.Request(maxBitrateUrl).content
	prefix = re.sub("(.*_ipad/).*", "\\1", maxBitrateUrl)
	path = url[ : url.rfind('/') + 1]

	for line in orgPlayList.splitlines():
		if 'media' in line:
			newPlaylist = newPlaylist + prefix + line + '\n'
		else:
			newPlaylist = newPlaylist + line + '\n'

	return newPlaylist

####################################################################################################
def getHLSStreams(hlsUrl):

	streams = []
	Found = True

	try:
		pageElement = HTML.ElementFromURL(hlsUrl)
	except:
		Found = False

	if Found:
		streamSpec = pageElement.xpath("text()")[0]
		streamSpecLines = streamSpec.splitlines()

		path = hlsUrl[ : hlsUrl.rfind('/') + 1]

		# Parse the m3u8 file to get:
		# - URL
		# - Resolution
		# - Bitrate
		for line in streamSpecLines:
			if "BANDWIDTH" in line:
				bwm = re.search('(?<=BANDWIDTH=)[0-9]+', line)

				stream = {}
				stream["bitrate"] = int(bwm.group(0))

				if "RESOLUTION" in line:
					rnm = re.search('(?<=RESOLUTION=)[0-9]+x[0-9]+', line)
					stream["resolution"] = int(rnm.group(0).split("x")[1])
				else:
					stream["resolution"] = 0

			elif ".m3u8" in line:
				stream["url"] = line
				Log("STREAM: " + stream["url"])
				streams.append(stream)

	return streams

####################################################################################################
def GetDetails(url, api=API_FLASH_EXT):

	base_url = "http://www.kanal5play.se"

	if base_url in url:
		api = base_url + api
	else:
		api = "http://www.kanal9play.se" + api

	content = HTTP.Request(url).content
	cacheToken = RE_CACHETOKEN.search(content).group(1)

	try:
		vid_id = RE_VIDEO_ID.search(url).group(1)
	except:
		data = HTML.ElementFromString(content)
		og_url = data.xpath('//meta[@property="og:url"]')[0].get('content')
		vid_id = RE_VIDEO_ID.search(url).group(1)

	try:
		details = JSON.ObjectFromURL(api % (cacheToken, vid_id))
	except:
		raise Ex.MediaNotAvailable

	return details

####################################################################################################
def TestURLs():

	test_urls = []

	for url in RSS_URLS:
		data = XML.ElementFromURL(url)

		for item in data.xpath('//item/link'):
			test_urls.append(item.text)

			if len(test_urls) > 2:
				break

	return test_urls

####################################################################################################
def PlayRTMPVideo(url):

	details = GetDetails(url)

	if 'reasonsForNoStreams' in details:
		if "Videon 채r inte tillg채nglig i din region." in details['reasonsForNoStreams']:
			raise Ex.MediaGeoblocked
		else:
			raise Ex.MediaNotAvailable

	rtmp_url = details['streamBaseUrl']
	playpath = ''

	for stream in details['streams']:
		if stream['bitrate'] == 900000:
			playpath = stream['source']
			break

	if playpath == '':
		playpath = details['streams'][-1]['source']

		playpath = re.sub("^.*:(.*)", ".\\1.mp4", playpath)
		rtmp_url = rtmp_url + playpath
		playpath = None

		return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=rtmp_url, clip=playpath))
