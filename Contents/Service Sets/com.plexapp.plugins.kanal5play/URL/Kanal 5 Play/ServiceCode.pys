RE_CHANNEL = Regex('http://www\.kanal([0-9]+)play\.se')
RE_VIDEO_ID = Regex('/video/([0-9]+)')

API_URL  = 'http://www.kanal%splay.se/api/getVideo?format=FLASH&videoId=%s&withTheme=true'
RSS_URLS = ['http://www.kanal%splay.se/rss?type=CLIP', 'http://www.kanal%splay.se/rss?type=PROGRAM']

####################################################################################################
def NormalizeURL(url):

	if '#!' in url:
		url = url.replace('progam#!', '')
		url = url.replace('/play/', '')
		url = url.split('|')[0]

	return url

####################################################################################################
def MetadataObjectForURL(url):

	details = GetDetails(url)

	episode_title = details['title']
	show_title = details['program']['name']
	episode_summary = details['description']
	episode_duration = int(details['length']) if 'length' in details else None
	episode_thumb = details['posterUrl']

	try: season_index = int(details['seasonNumber'])
	except: season_index = None

	try: episode_index = int(details['episodeNumber'])
	except: episode_index = None

	try: originally_available_at = Datetime.FromTimestamp(details['shownOnTvDateTimestamp']/1000)
	except: originally_available_at = None

	if "SEGMENT" in details['type'] or episode_index is None:
		return VideoClipObject(
			title = show_title + ' - ' + episode_title,
			summary = episode_summary,
			duration = episode_duration,
			thumb = episode_thumb
		)
	else:
		return EpisodeObject(
			title = episode_title,
			summary = episode_summary,
			duration = episode_duration,
			thumb = episode_thumb,
			index = episode_index,
			season = season_index,
			show = show_title,
			originally_available_at = originally_available_at
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			protocol = 'rtmp',
			video_resolution = 480,
			audio_channels = 2,
			parts = [
				PartObject(
					key = Callback(PlayRTMP, url=url)
				)
			]
		)
	]

####################################################################################################
@indirect
def PlayRTMP(url, **kwargs):

	details = GetDetails(url)

	if not 'streams' in details:
		if 'reasonsForNoStreams' in details and 'region' in details['reasonsForNoStreams'][0]:
			raise Ex.MediaGeoblocked
		else:
			raise Ex.MediaNotAvailable

	max_bitrate_found = 0

	for stream in details['streams']:

		if stream['bitrate'] > max_bitrate_found:
			max_bitrate_found = stream['bitrate']
			clip = stream['source']
			rtmp_url = details['streamBaseUrl']

	if rtmp_url:

		return IndirectResponse(VideoClipObject, key=RTMPVideoURL(
			url = rtmp_url,
			clip = clip,
			swf_url = 'http://www.kanal5play.se/flash/K5StandardPlayer.swf'
		))

	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def GetDetails(url, **kwargs):

	channel = RE_CHANNEL.search(url).groups()[0]
	content = HTTP.Request(url).content

	try:
		vid_id = RE_VIDEO_ID.search(url).group(1)
	except:
		data = HTML.ElementFromString(content)
		og_url = data.xpath('//meta[@property="og:url"]/@content')[0]
		vid_id = RE_VIDEO_ID.search(url).group(1)

	return JSON.ObjectFromURL(API_URL % (channel, vid_id))

####################################################################################################
def TestURLs():

	test_urls = []

	for channel in ["5", "9", "11"]:
		for url in RSS_URLS % channel:
			data  = XML.ElementFromURL(url)
			count = 0

			for item in data.xpath('//item/link'):
				test_urls.append(item.text)
				count = count+1

				if count > 1:
					break

	return test_urls
