RE_CACHETOKEN = Regex('cacheToken: "(.+?)",')
RE_VIDEO_ID	= Regex('/video/([0-9]+)')
RE_EP_INDEX = Regex('Avsnitt ([0-9]+)')
RE_SE_INDEX = Regex('song ([0-9]+)')

API_URL = 'http://www.kanal5play.se/api/getVideoCached?cacheToken=%s&format=FLASH&videoId=%s&withTheme=true'
RSS_URLS = ['http://www.kanal5play.se/rss?type=CLIP', 'http://www.kanal5play.se/rss?type=PROGRAM']

####################################################################################################
def NormalizeURL(url):

	if '#!' in url:
		url = url.replace('progam#!', '')
		url = url.replace('/play/', '')
		url = url.split('|')[0]
	else:
		pass

	return url

####################################################################################################
def MetadataObjectForURL(url):

	details = GetDetails(url)

	episode_title = details['title']
	show_title = details['program']['name']
	episode_summary = details['description']
	episode_duration = int(details['length'])
	episode_thumb = details['posterUrl']
	season_index = int(details['seasonNumber'])
	episode_index = int(details['episodeNumber'])

	originally_available_at = Datetime.FromTimestamp(details['shownOnTvDateTimestamp']/1000)

	if "SEGMENT" in details['type']:
		return VideoClipObject(
			title = show_title + ' - ' + episode_title,
			summary = episode_summary,
			duration = episode_duration,
			thumb = episode_thumb
		)
	else:
		return EpisodeObject(
			title = episode_title,
			index = episode_index,
			season = season_index,
			show = show_title,
			originally_available_at = originally_available_at,
			summary = episode_summary,
			duration = episode_duration,
			thumb = episode_thumb
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			bitrate = 900,
			parts = [PartObject(key = Callback(PlayVideo, url=url, bitrate=900000))]
		),
		MediaObject(
			bitrate = 450,
			parts = [PartObject(key = Callback(PlayVideo, url=url, bitrate=450000))]
		),
		MediaObject(
			bitrate = 250,
			parts = [PartObject(key = Callback(PlayVideo, url=url, bitrate=250000))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, bitrate):

	details = GetDetails(url)
	rtmp_url = details['streamBaseUrl']
	playpath = ''

	for stream in details['streams']:
		if stream['bitrate'] == bitrate:
			playpath = stream['source']
			break

	if playpath == '':
		playpath = details['streams'][-1]['source']

	return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=rtmp_url, clip=playpath))

####################################################################################################
def GetDetails(url):

	content = HTTP.Request(url).content
	cacheToken = RE_CACHETOKEN.search(content).group(1)
	try:
		vid_id = RE_VIDEO_ID.search(url).group(1)
	except:
		data = HTML.ElementFromString(content)
		og_url = data.xpath('//meta[@property="og:url"]')[0].get('content')
		vid_id = RE_VIDEO_ID.search(url).group(1)

	details = JSON.ObjectFromURL(API_URL % (cacheToken, vid_id))

	return details

####################################################################################################
def TestURLs():

	test_urls = []

	for url in RSS_URLS:
		data = XML.ElementFromURL(url)
		count = 0

		for item in data.xpath('//item/link'):
			test_urls.append(item.text)
			count = count+1

			if count > 1:
				break
	
	return test_urls
