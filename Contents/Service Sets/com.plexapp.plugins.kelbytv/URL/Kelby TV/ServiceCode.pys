BASE_URL = 'http://kelbytv.com'
RE_EP_INDEX = Regex('Episode (?P<ep_index>[0-9]+)')
RE_VIDEO_URL = Regex('file\s+:.+?(http.+?\.mp?4v?)')

####################################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)

	show = page.xpath('//title')[0].text.rsplit(' | ', 1)[1]
	episode_title = page.xpath('//div[@class="show"]//h2/span/text()')[0]
	description = page.xpath('//div[contains(@class, "showinfo")]//div[@class="quickabout"]//strong')[0].text.strip()
	thumb = page.xpath('//video[@id="player"]')[0].get('poster')
	if thumb.startswith('http') == False:
		thumb = BASE_URL + thumb

	try:
		full_title = page.xpath('//h2[@class="episodetitle"]/span/text()')[0]
		index = int(RE_EPISODE.search(full_title).group('ep_index'))
	except:
		index = None

	published = page.xpath('//div[contains(@class, "showinfo")]/p[@class="meta"]/text()')[0].strip('Published:').strip()
	date = Datetime.ParseDate(published)

	return EpisodeObject(
		show = show,
		title = episode_title,
		index = index,
		summary = description,
		thumb = thumb,
		originally_available_at = date
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url = url))],
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			video_resolution = '480',
			audio_channels = 2,
			optimized_for_streaming = True,
			bitrate = 400
		)
	]

####################################################################################################
def PlayVideo(url):

	# Read the page associated with the url. We should find a number of video paths located within it.
	content = HTTP.Request(url).content
	video = RE_VIDEO_URL.findall(content)[0]

	return Redirect(video)
