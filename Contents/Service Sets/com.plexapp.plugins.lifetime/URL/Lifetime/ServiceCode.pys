RE_PLAYLIST = Regex('jQuery.extend\(Drupal.settings, {.+?"videos":(\[.+?}\])},', Regex.DOTALL)
RE_BASE = Regex('meta base="(rtmp.+)"')

SMIL_NS = {"a":"http://www.w3.org/2005/SMIL21/Language"}

MediaObject.container = Container.MP4
MediaObject.video_codec = VideoCodec.H264
MediaObject.audio_codec = AudioCodec.AAC
AudioStreamObject.language_code = Locale.Language.English

RESOLUTIONS = ["540","432","404","360"]

####################################################################################################
def TestURLs():

  test_urls = []
  data = HTML.ElementFromURL('http://www.mylifetime.com/video')

  for video in data.xpath('//a[contains(@id,"video-image-link-")]'):
    url = video.get('href')
    if url.startswith('http://'):
      test_urls.append(url)

    if len(test_urls) > 2:
      break

  return test_urls

####################################################################################################
def MetadataObjectForURL(url):

  video = GetJSON(url)
  releaseURL = video['pdk_flash_url'] + '&format=script'
  data = JSON.ObjectFromURL(releaseURL)
  thumb = data['defaultThumbnailUrl']
  summary = data['description']
  duration = data['duration']
  date = Datetime.FromTimestamp(float(data['pubDate'])/1000).date()
  content_rating = data['ratings'][0]['rating']
  title = data['title']

  if data['AETN$mrssLengthType'] == "Episode":
    show = data['AETN$seriesNameGlobal']
    index = int(data['AETN$episode'])
    season = int(data['AETN$season'])

    return EpisodeObject(
      title=title,
      show=show,
      summary=summary,
      index=index,
      season=season,
      duration=duration,
      originally_available_at=date,
      content_rating=content_rating,
      thumb=thumb
    )
  elif data['AETN$mrssLengthType'] == "Feature_Film":
    return MovieObject(
      title=title,
      summary=summary,
      duration = duration,
      originally_available_at=date,
      content_rating=content_rating,
      thumb=thumb
    )
  else:
    return VideoClipObject(
      title=title,
      summary=summary,
      duration = duration,
      originally_available_at=date,
      content_rating=content_rating,
      thumb=thumb
    )

####################################################################################################
def MediaObjectsForURL(url):

  media_objects = []

  for res in RESOLUTIONS:
    media_objects.append(
      MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, res=res))],
        video_resolution = res,
        container = Container.MP4
      )
    )

  return media_objects

####################################################################################################
@indirect
def PlayVideo(url, res):

  video = GetJSON(url)
  smil_url = video['pdk_html5_url']
  smil_url = smil_url.replace('switch=hls', 'format=SMIL')
  smil = XML.ElementFromURL(smil_url)
  index = RESOLUTIONS.index(res)
  video_url = None

  if smil.xpath('//a:ref', namespaces=SMIL_NS)[0].get('title') == "Geographic Restriction":
    raise Ex.MediaGeoblocked

  while index < len(RESOLUTIONS):
    for video in smil.xpath("//a:video", namespaces=SMIL_NS):
      if video.get('height') == RESOLUTIONS[index]:
        video_url = video.get('src')
        break
    index += 1

  if video_url and video_url.startswith('http://'):
    return IndirectResponse(VideoClipObject, key=video_url)
  else:
    raise Ex.MediaNotAvailable

####################################################################################################
def GetJSON(url):

  try:
    content = HTTP.Request(url).content.decode('utf8','replace')
  except:
    raise Ex.MediaNotAvailable

  playlist = RE_PLAYLIST.search(content).group(1)
  playlist_json = JSON.ObjectFromString(playlist)

  return playlist_json[0]  
