RE_FILE_URL = Regex('&file_url=(?P<url>[^&]*)&')
RE_ITEM_TOKEN = Regex('item_token=([^&]+)')

####################################################################################################
def NormalizeURL(url):

	if 'll_embed' in url:
		embed_html = HTTP.Request(url).content
		item_token = RE_ITEM_TOKEN.search(embed_html)

		if item_token:
			url = 'http://www.liveleak.com/view?i=%s' % item_token.group(1)

	return url

####################################################################################################
def MetadataObjectForURL(url):

	page = HTTP.Request(url).content

	if not RE_FILE_URL.search(page):
		return None

	html = HTML.ElementFromString(page)

	title = html.xpath("//head/title/text()")[0]
	description = html.xpath("//head/meta[@property='og:description']")[0].get('content')
	thumb = html.xpath("//head/meta[@property='og:image']")[0].get('content')

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	page_content = HTTP.Request(url).content

	# Find the video url from inside the player's config
	video_url = RE_FILE_URL.search(page_content)

	if not video_url:
		return None

	video_url = String.Unquote(video_url.group('url'))

	return IndirectResponse(VideoClipObject, key=video_url)
