RE_FILE_URL = Regex('&file_url=(?P<url>[^&]*)&')
RE_ITEM_TOKEN = Regex('item_token=([^&"]+)')

####################################################################################################
def NormalizeURL(url):

	if 'll_embed' in url:
		embed_html = HTTP.Request(url).content
		item_token = RE_ITEM_TOKEN.search(embed_html)

		if item_token:
			url = 'http://www.liveleak.com/view?i=%s' % item_token.group(1)

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	# Check script tag for video and iframes for YouTube embeds
	script = html.xpath('//script[contains(text(), "file_url=")]/text()')
	youtube = html.xpath('//iframe[contains(@src, "youtube.com/embed")]/@src')

	if len(script) == 1 and RE_FILE_URL.search(script[0]):
		pass
	elif len(youtube) == 1:
		return URLService.MetadataObjectForURL(youtube[0])
	else:
		raise Ex.MediaNotAvailable

	title = html.xpath("//meta[@property='og:title']/@content")[0].split(' - ', 1)[-1]
	description = html.xpath("//meta[@property='og:description']/@content")[0]
	thumb = html.xpath("//head/meta[@property='og:image']/@content")[0]

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = 'sd',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	page_content = HTTP.Request(url).content

	# Find the video url from inside the player's config
	video_url = RE_FILE_URL.search(page_content)

	if not video_url:
		raise Ex.MediaNotAvailable

	video_url = String.Unquote(video_url.group('url'))

	return IndirectResponse(VideoClipObject, key=video_url)
