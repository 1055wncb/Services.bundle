NAMESPACES = {"media":"http://search.yahoo.com/mrss/"}

MRSS_URL = "http://www.logotv.com/player/includes/rss.jhtml?uri=%s"
MP4_URL = "http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s"

RE_EPISODE_URI = Regex('MTVN.Player.episodeUri = \"(.+?)\"')
RE_CLIP_URI	= Regex('MTVN.Player.videoUri = \"(.+?)\"')

####################################################################################################
def NormalizeURL(url):

	return url.split('#')[0]

####################################################################################################
def MetadataObjectForURL(url):

    data = GetRSS(url)
    title = data.xpath('//title')[0].text

    try: summary = data.xpath('//description')[0].text
    except: summary = None

    # The thumb is in item vs the main content in the xml files
    thumb = data.xpath('//item/image//@url')[0]
    date = Datetime.ParseDate(data.xpath('//pubDate')[0].text).date()

    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb),
        originally_available_at = date
        )
####################################################################################################
def MediaObjectsForURL(url):

    if 'playlist' in url:
        num_parts = 11
    else:
        num_parts = 1

    return [
        MediaObject(
            parts = [
                PartObject(
                    key=Callback(PlayVideo, url=url, bitrate=str(bitrate), index=i)
                    ) for i in range(num_parts)
            ],
            bitrate = bitrate,
            container = Container.MP4,
            video_resolution = resolution,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
	    # Resolutions for old videos are different. And include 1200/360, 1800/432, 600/240  
	    # But they are handled with the closest command in the PlayVideo function
        ) for bitrate,resolution in [(3500, '720'), (2200, '540'), (1700, '432'), (1200, '360'), (750, '288')]
    ]
    
####################################################################################################
def PlayVideo(url, bitrate='1700', index=0):

    mrss_data = GetRSS(url)
    media_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)

    if index < len(media_url):
        player_url = media_url[index].get('url')
    else:
        # Return small filler movie for desktop clients
        return Redirect('http://dl.dropbox.com/u/2974527/Plex/filler.mp4')

    try:
        player_data = XML.ElementFromURL(player_url)
    except:
        raise Ex.MediaNotAvailable

    available_bitrates = player_data.xpath('//rendition[@bitrate]/@bitrate')
    if len(available_bitrates) < 1:
        raise Ex.MediaNotAvailable

    closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]
    rtmp_url = player_data.xpath('//rendition[@bitrate="%s"]/src' % closest)[0].text

    stream_url = rtmp_url.split('/viacomlogostrm/')[1]
    mp4_url = MP4_URL % stream_url

    return Redirect(mp4_url)
####################################################################################################
# Using regex to pull uri. 
# Make it a separate function so it can be used for the metadataobject too
def GetRSS(url):
    content = HTTP.Request(url).content
    if 'playlist' in url:
        uri = RE_EPISODE_URI.search(content).group(1)
    else:
        uri = RE_CLIP_URI.search(content).group(1)
    if not uri:
        raise Ex.MediaExpired

    mrss_data = XML.ElementFromURL(MRSS_URL % uri)

    return mrss_data
