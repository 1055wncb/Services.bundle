NAMESPACES = {"media":"http://search.yahoo.com/mrss/"}

MRSS_URL = "http://www.logotv.com/player/includes/rss.jhtml?uri=%s"
MP4_URL = "http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s"
URI_FORMAT = 'mgid:uma:%s:mtv.com:%s'

RE_URI = Regex('MTVN.Player.(?:episode|video)Uri = \"(.+?)\"')
RE_PLAYLIST = Regex('MTVN.Player.defaultPlaylistId = (\d{7})')
RE_RES_BIT = Regex('.+_\d{3,4}x(\d{3,4})_(\d{3,4})_(?:h|m)\d{2}.mp4$')
####################################################################################################
def NormalizeURL(url):

	return url.split('#')[0]

####################################################################################################
def MetadataObjectForURL(url):

    data = GetRSS(url)
    title = data.xpath('//title')[0].text

    try: summary = data.xpath('//description')[0].text
    except: summary = None

    # The thumb is in item vs the main content in the xml files
    thumb = data.xpath('//item/image//@url')[0]
    date = Datetime.ParseDate(data.xpath('//pubDate')[0].text).date()

    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb),
        originally_available_at = date
    )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    mrss_data = GetRSS(url)
    media_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
    available_streams = {}
    bitrates = []
    bitrates_heights = []
    index = 0
        
    while index < len(media_url):
        player_url = media_url[index].get('url')
        player_url = player_url.replace('{device}', 'Other')

        try:
            player_data = XML.ElementFromURL(player_url)
        except:
            raise Ex.MediaNotAvailable

        mediagen_list = player_data.xpath('//rendition')
        if len(mediagen_list)<1:
            raise Ex.MediaNotAvailable
        # Make sure the value for the first rtmp url listed is not a "video unavailable" image. 
        # If the value for the rtmp url is a png file, delete this part/media from the media_url list and continue
        first_rend = player_data.xpath('//rendition/src//text()')[0]
        if first_rend.endswith('.png'):
            media_url.pop(index)
            Log('This media is an image and the video is no longer available')
            continue

        for rendition in mediagen_list:
            duration = rendition.get('duration')
            rtmp_url = rendition.xpath('./src')[0].text
            # NOT SURE IF THIS IS NECESSARY WITH LOGO UNLIKE MTV BUT WILL PREVENT ANY ERRORS FROM WRONGLY ENTERED URLS
            # Try getting bitrate and resolution from video url
            try:
                height = RE_RES_BIT.search(rtmp_url).group(1)
                bitrate = RE_RES_BIT.search(rtmp_url).group(2)
            # Just in case there is an issue with the url get bitrate and hieght from xml
            except:
                bitrate = rendition.get('bitrate')
                height = rendition.get('height')

            if '/viacomlogostrm/' in rtmp_url:
                stream_url = rtmp_url.split('/viacomlogostrm/')[1]
            else:
                raise Ex.MediaNotAvailable
            
            mp4_url = MP4_URL % stream_url
            # Use the first video to create the bitrates and available_streams lists
            # Otherwise if a later part has an additional or different/odd sized bitrate, it will create a separate bitrate listing
            # in the avialable streams with only index for that one part and all other bitrates will be missing the index for that part 
            if index == 0:
                bitrates.append(int(bitrate))
                # create a separate list of bitrates and heights to use if a later if a part has 
                # an additional or different value for bitrate than those established by the first part
                bitrates_heights.append((bitrate, height))
                available_streams[unicode(bitrate)] = {}
                available_streams[unicode(bitrate)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}
            else:
                if unicode(bitrate) in available_streams.keys():
                    available_streams[unicode(bitrate)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}
                else:
                    # Here we use the hieght of this part and the bitrates_heights lists from the first part to find the closest bitrate
                    closest = FindClosest(bitrates_heights, bitrate, height)
                    if closest:
                        available_streams[unicode(closest)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}

        index += 1

    bitrates.sort()
    bitrates.reverse()
    #Log('the value of available_streams is %s' %available_streams)        

    media_objects = []

    for bitrate in bitrates:
        # Since the closest code above should resolve any issues with bitrates missing indexes in available streams
        # below we just add a line to skip bitrate lists that are not complete to keep the parts.append from failing due to missing indexes
        if len(available_streams[unicode(bitrate)]) < len(media_url):
            Log('for %s bitrate, the length of media_url is %s and the length of available_streams is %s' %(bitrate, len(media_url), len(available_streams[unicode(bitrate)])))
            continue
        # Create the list of all video resolutions for a bitrate and then use the first video resolution here to prevent issues with missing indexes
        vid_res_list = available_streams[unicode(bitrate)].values()
        vid_res = int(vid_res_list[0]["height"])
        i = 0
        parts = []
        while i < len(media_url):
            parts.append(
                PartObject(key=available_streams[unicode(bitrate)][unicode(i)]["mp4_url"], duration=int(available_streams[unicode(bitrate)][unicode(i)]["duration"])*1000)
            )                    
            i += 1
        media_objects.append(
            MediaObject(
                parts=parts,
                bitrate = int(bitrate),
                video_resolution = vid_res
            )
        )
            
    return media_objects

####################################################################################################
# Using regex to pull uri. Make it a separate function so it can be used for the metadataobject too. 
def GetRSS(url):

    # Not using number in url or its length to determine the uri since seven digit numbers can be a full episode or a video clip. 
    # Since the uri in the content of a url maay not reflect a possible video clip playlist, we first check for a playlist id

    # First check the url to see if it for a video playlist and if so build a videolist uri
    content = HTTP.Request(url).content
    try: mgid_num = RE_PLAYLIST.search(content).group(1)
    except: mgid_num = None
    if mgid_num:
        uri = URI_FORMAT %('videolist', mgid_num)
    # Otherwise pull the uri from the web page content
    else:
        # Pull the uri from the web page
        content = HTTP.Request(url).content
        try: uri = RE_URI.search(content).group(1)
        except: raise Ex.MediaNotAvailable

    xml = XML.ElementFromURL(MRSS_URL % uri)

    if len(xml.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)) < 1:
        raise Ex.MediaNotAvailable
    else:
        return xml
##################################################################################################
# This is a function to find the closest bitrate in the bitrates list for varying indexes using the height
def FindClosest(bitrates_heights, bitrate, height):

    closest = None
    for bitrate_value,height_value in bitrates_heights:
        if height_value==height:
            closest = bitrate_value
            # Since often a height or resolution may have multiple bitrates, if we use a break below, it will find the 
            # the lowest bitrate with an equal height but if we do not put break it will find the highest bitrate with an equal height
            break
    #Log(' the value of closest to be returned by this function is %s' %closest)
    return closest


