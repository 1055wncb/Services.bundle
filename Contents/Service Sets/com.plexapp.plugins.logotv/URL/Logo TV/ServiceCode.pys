NAMESPACES = {"media":"http://search.yahoo.com/mrss/"}
MRSS_URL = "http://www.logotv.com/feeds/mrss?uri=%s"
MRSS_URL2 = "http://www.logotv.com/player/includes/rss.jhtml?uri=%s"

URI_FORMAT = 'mgid:uma:videolist:logotv.com:%s'

RE_RES_BIT = Regex('x(\d+)_(\d+)_?[^._]*\.(mp4|flv)')

MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True

####################################################################################################
def MetadataObjectForURL(url):

    try:
        content = HTTP.Request(url).content
        html = HTML.ElementFromString(content)
    except:
       raise Ex.MediaNotAvailable

    title = html.xpath('//meta[@property="og:title"]/@content')[0]
    summary = html.xpath('//meta[@property="og:description"]/@content')[0]
    thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0]
    duration = 0

    data = GetRSS(url)
    media_urls = data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)

    for segment in media_urls:
        if segment.get('duration') != "":
            if ':' in segment.get('duration'):
                duration += Datetime.MillisecondsFromString(segment.get('duration'))
            else:
                duration += int(float(segment.get('duration'))*1000)
    try:
        air_date = data.xpath('//pubDate/text()')[0]
        originally_available_at = Datetime.ParseDate(air_date)
    except:
        originally_available_at = None

    if 'playlist' in url:

        show = data.xpath('//title/text()', namespaces=NAMESPACES)[0]

        return EpisodeObject(
            show = show,
            title = title,
            summary = summary,
            duration = duration,
            thumb = Resource.ContentsOfURLWithFallback(url=thumb),
            originally_available_at = originally_available_at
        )

    else:

        return VideoClipObject(
            title = title,
            summary = summary,
            duration = duration,
            thumb = Resource.ContentsOfURLWithFallback(url=thumb),
            originally_available_at = originally_available_at
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    mrss_data = GetRSS(url)
    media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)
    available_streams = {}
        
    for media_url in media_urls:

        try:
            video_data = XML.ElementFromURL(media_url, cacheTime=CACHE_1HOUR)
        except:
            raise Ex.MediaNotAvailable

        renditions = video_data.xpath('//rendition[@type="video/mp4"]')

        if len(renditions) < 1:
            raise Ex.MediaNotAvailable

        for rendition in renditions:

            rtmp_url = rendition.xpath('./src/text()')[0]

            if '.flv' in rtmp_url:
                continue
            # For video with incorrect fields, try to get the bitrate and height from the rtmp url first
            # Found one that was different, adjusted regex, but still best to put in a try/except
            try:
                bitrate = RE_RES_BIT.search(rtmp_url).group(2)
            except:
                bitrate = rendition.get('bitrate')

            try:
                height = RE_RES_BIT.search(rtmp_url).group(1)
            except:
                height = rendition.get('height')

            if bitrate not in available_streams:
                available_streams[bitrate] = []

            # Set up to pull the video file
            part = {}
            part['duration'] = rendition.get('duration')
            part['height'] = height
            part['rtmp_url'] = rtmp_url.split('/viacomlogostrm/')[-1]

            available_streams[bitrate].append(part)

    media_objects = []
    bitrates = [int(i) for i in available_streams.keys()]
    bitrates.sort(reverse=True)

    for bitrate in bitrates:

        parts = []

        for part in available_streams[str(bitrate)]:

            parts.append(
                PartObject(
                    key = RTMPVideoURL(
                        url='rtmpe://viacommtvstrmfs.fplive.net:1935/viacommtvstrm/',
                        clip='mp4:%s' %(part['rtmp_url'])
                    ),
                    duration = int(part['duration'])*1000
                )
            )

            video_resolution = int(part['height'])

        media_objects.append(
            MediaObject(
                parts = parts,
                bitrate = bitrate,
                video_resolution = video_resolution
            )
        )

    return media_objects

####################################################################################################
# Get the uri and produce the RSS xml page 
def GetRSS(url):

    html = HTML.ElementFromURL(url)
    if 'id=' in url:
        mgid_num = url.split('id=')[1]
        # if there is a playlist id, build a videolist type uri
        uri = URI_FORMAT %mgid_num 
        rss_url = MRSS_URL2 % uri
    else:
        # Pull the uri from the web page and use the feed mrss url
        try:
            html = HTML.ElementFromURL(url)
            uri = html.xpath('//div[@class="video_player"]/@data-mgid')[0]
            rss_url = MRSS_URL % uri
        except: raise Ex.MediaNotAvailable

    xml = XML.ElementFromURL(rss_url)

    if len(xml.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)) < 1:
        raise Ex.MediaNotAvailable
    else:
        return xml
