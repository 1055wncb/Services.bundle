####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def GetExternalSource(url):

	# Find the appropriate video source
	html = HTML.ElementFromURL(url)
	youtube_url = html.xpath('//figure[@class="video loading"]//iframe/@src')[0]

	if 'www.youtube.com/embed/' in youtube_url:
		youtube_id = youtube_url.split('embed/')[1]
		return 'https://www.youtube.com/watch?v=%s' % (youtube_id)

	return None

####################################################################################################
def MetadataObjectForURL(url):

	external_source = GetExternalSource(url)

	if external_source:
		return URLService.MetadataObjectForURL(external_source)
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	external_source = GetExternalSource(url)

	if external_source:
		return URLService.MediaObjectsForURL(external_source)
	else:
		raise Ex.MediaNotAvailable
