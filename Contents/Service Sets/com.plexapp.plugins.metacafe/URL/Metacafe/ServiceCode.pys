API_URL = 'http://www.metacafe.com/api/item/%s/'
API_NS = {'media':'http://search.yahoo.com/mrss/'}
VIDEO_URL = '%s?__gda__=%s'
RE_ITEM_ID = Regex('/watch/(?P<id>\d+)')
RE_MEDIA = Regex('mediaData=(?P<media>[^&]+)')
HTTP_HEADERS = {'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:15.0) Gecko/20100101 Firefox/15.0.1'}

####################################################################################################
def MetadataObjectForURL(url):

	item_id = RE_ITEM_ID.search(url)

	if item_id is None:
		raise Ex.MediaNotAvailable

	video_id = item_id.group('id')
	data = XML.ElementFromURL(API_URL % video_id).xpath('//item/id[text()="'+video_id+'"]/parent::item')[0]

	title = data.xpath('./media:title', namespaces=API_NS)[0].text
	summary = data.xpath('./media:description', namespaces=API_NS)[0].text
	thumb = data.xpath('./media:thumbnail', namespaces=API_NS)[0].get('url')
	date = data.xpath('./pubDate')[0].text.split(' ')[0]
	date = Datetime.ParseDate(date)
	duration = data.xpath('./media:content', namespaces=API_NS)[0].get('duration')
	duration = int(duration) * 1000
	rating = data.xpath('./rank')[0].text
	rating = float(rating) * 2

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb,
		originally_available_at = date,
		duration = duration,
		rating = rating
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = 'mp4',
			video_resolution = '720',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url, post_url=url, res='hd'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = 'mp4',
			video_resolution = 'sd',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url, post_url=url, res='sd'))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res):

	page = HTML.ElementFromURL(url, cacheTime=0, headers=HTTP_HEADERS)

	flash_vars_encoded = page.xpath('//object/param[@id="flashVars"]')[0].get('value')
	flash_vars = String.Unquote(flash_vars_encoded)

	media = JSON.ObjectFromString(RE_MEDIA.search(flash_vars).group('media'))

	if res == 'hd' and 'highDefinitionMP4' in media:
		video_url = media['highDefinitionMP4']['mediaURL']
		key = media['highDefinitionMP4']['access'][0]['value']
	elif 'MP4' in media:
		video_url = media['MP4']['mediaURL']
		key = media['MP4']['access'][0]['value']
	else:
		video_url = media['flv']['mediaURL']
		key = media['flv']['access'][0]['value']

	return IndirectResponse(VideoClipObject, key=VIDEO_URL % (video_url.replace(' ', '%20'), key))
