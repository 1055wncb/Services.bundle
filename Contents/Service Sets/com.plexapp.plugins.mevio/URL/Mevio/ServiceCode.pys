RE_JSON_DATA = Regex('var q = ({.*});')

####################################################################################################

def NormalizeURL(url):
  return url

####################################################################################################

def MetadataObjectForURL(url):

  clip_details = GetClipJSON(url)
  
  try:
    title = "%s: %s" % (clip_details["parent_name"], clip_details["name"])
    summary = clip_details["summary"]
    thumbUrl = clip_details["images"]["large"]
    duration = int(clip_details["data"]["playtime_seconds"])*1000
    date = Datetime.ParseDate(clip_details["date_created_formatted"]).date()
    rating = float(clip_details["rating"]["group"]["Rating"])
  except:
    clip_xml = GetXML(url)
    title = clip_xml.title
    summary = String.StripTags(clip_xml.description)
    thumbUrl = clip_xml.image.href
    duration = int(clip_xml.enclosures[0].length)
    date = Datetime.ParseDate(clip_xml.updated).date()
    rating = None
  
  # Construct a metadata item
  vc = VideoClipObject(
    title = title,
    summary = summary,
    thumb = thumbUrl,
    duration = duration,
    originally_available_at = date,
    rating = rating
  )
  return vc
  
####################################################################################################
def MediaObjectsForURL(url):
  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='720'))],
      container = Container.MP4,
      bitrate = '1600',
      video_resolution = '720',
      aspect_ratio = '1.77',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='544'))],
      container = Container.MP4,
      bitrate = '1000',
      video_resolution = '544',
      aspect_ratio = '1.77',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='sd'))],
      container = Container.MP4,
      bitrate = '500',
      video_resolution = 'sd',
      aspect_ratio = '1.77',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    )
  ]

####################################################################################################
def PlayVideo(url, fmt=''):
  
  clip_details = GetClipJSON(url)
  try:
    video_url = clip_details["media_urls"]["h264"]
    if fmt == '720':
      try: video_url = clip_details["media_urls"]["mp4"]
      except: pass
    elif fmt == '544':
      try: video_url = clip_details["media_urls"]["m4v"]
      except: pass
    elif fmt == 'sd': video_url = clip_details["media_urls"]["h264"]
  except:
    clip_xml = GetXML(url)
    video_url = clip_xml.guid
  return Redirect(video_url)

####################################################################################################

def GetJSON(url):
  content = HTTP.Request(url, cacheTime=7200, errors='ignore').content
  data = RE_JSON_DATA.search(content).group(1)
  details = JSON.ObjectFromString(data)
  return details
  
####################################################################################################

def GetClipJSON(url):
  
  details = GetJSON(url)
  
  try:
    clip_id = url.split('mId=')[1]
    key_id = None
  except:
    clip_id = None
    key_id = url.split('episode/')[1].split('/')[0]
  
  clip_details = {}
  
  for item in details["items"]:
    if clip_id:
      if item["media"]["id"] == clip_id:
        clip_details = item["media"]
      else:
        pass
    else:
      if item["media"]["key_id"] == key_id:
        clip_details = item["media"]
      else:
        pass
  
  return clip_details

####################################################################################################
  
def GetXML(url):
  clip_details = GetJSON(url)
  rss_url = clip_details['feed_urls']['xml']['url']
  feed = RSS.FeedFromURL(rss_url)
  for item in feed.entries:
    if item.link == url:
      return item
    else:
      pass
  return None
  