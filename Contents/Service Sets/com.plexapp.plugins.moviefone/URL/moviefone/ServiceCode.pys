def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	title = html.xpath('//h1//text()')[0].strip()
	summary = html.xpath('//div[@class="trailer-description"]/text()')[0]
	thumb = 'http://%s' % html.xpath('//meta[@property="og:image"]/@content')[0].split('http://')[-1]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='HD 1080p'))],
			video_resolution = '1080',
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='HD 720p'))],
			video_resolution = '720',
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='HD 480p'))],
			video_resolution = '480',
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, fmt):

	html = HTML.ElementFromURL(url)

	if fmt == 'HD 1080p':
		url = html.xpath('//span[@class="butoneshd hd1080"]/a/@href')[0]
	elif fmt == 'HD 720p':
		url = html.xpath('//span[@class="butoneshd hd720"]/a/@href')[0]
	else:
		url = html.xpath('//span[@class="butoneshd hd480"]/a/@href')[0]

	return IndirectResponse(VideoClipObject, key=url)
