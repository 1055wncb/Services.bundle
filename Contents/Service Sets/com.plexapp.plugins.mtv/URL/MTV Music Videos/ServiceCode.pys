MTV_VIDEOS = "http://www.mtv.com/music/videos/"

####################################################################################################

def NormalizeURL(url):
  return url

####################################################################################################

def MetadataObjectForURL(url):
  data = HTML.ElementFromURL(url)
  video_title = data.xpath('//meta[@name="mtvn_title"]')[0].get('content')
  artist = data.xpath('//meta[@name="mtvn_artist"]')[0].get('content')
  title = '%s - %s' % (artist, video_title)
  date = Datetime.ParseDate(data.xpath('//meta[@name="mtvn_date"]')[0].get('content')).date()
  thumb = data.xpath('//meta[@name="thumbnail"]')

  vc = VideoClipObject(
    title = title,
    originally_available_at = date,
    thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
  )

  return vc

####################################################################################################
def MediaObjectsForURL(url):
  return [
    MediaObject(
      parts = [PartObject(key=WebVideoURL(url))]
    )
  ]

####################################################################################################
def TestURLs():
  test_urls = []
  data = HTML.ElementFromURL(MTV_VIDEOS)
  for video in data.xpath('//item'):
    try:
      link = video.xpath('.//img')[0].get('src')
      test_urls.append(link)
    except:
      continue
    if len(test_urls) > 3:
      break
    else:
      pass
  return test_urls
