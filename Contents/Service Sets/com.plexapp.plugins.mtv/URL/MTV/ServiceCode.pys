# Variables for Vevo Music videos
VEVO_URL = 'http://www.vevo.com/watch/%s/%s/%s'
RE_VEVO_URL_PATH = Regex('http://www\.(?:mtv|vh1|cmt)\.com/videos?/([^/]+)/\d+/(.+?)\.jhtml')
RE_VEVO_ID = Regex('MTVN.Player.vevoVideoId = "(.+?)";')

# Broke this into two parts in case we pull a full uri from the website code
MRSS_URL = 'http://www.mtv.com/player/embed/AS3/rss/?uri=%s'
URI = 'mgid:uma:%s:mtv.com:%s'
# THIS PULLS THE MGID NUMBER FROM ALL URLS (4 DIGIT NUMBERS GO TO VEVO)
RE_MGID_NUM = Regex('(?:\/|vid=|id=)(\d{5,7})\/?')

NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'
RE_RES_BIT = Regex('.+_\d{3,4}x(\d{3,4})_(\d{3,4})_(?:h|m)\d{2}.mp4$')

# EXAMPLE OF FOUR DIGIT URL IS http://www.mtv.com/videos/?vid=9479
# IF URL CONTAINS "playlist" OR "/videos/?id=" THEN IT IS VIDEOLIST MGID

####################################################################################################
def NormalizeURL(url):

    url = url.split('#')[0]

    return url

####################################################################################################
# Took out thumb and separate check for title in episodes since all mgid return as video or playlist
def MetadataObjectForURL(url):

    # this part is only for music videos
    vevo_url = VevoURL(url)
    if vevo_url:
        return URLService.MetadataObjectForURL(vevo_url)

    data = GetURI(url)
    title = data.xpath('//title/text()')

    if len(title) < 1:
        raise Ex.MediaNotAvailable

    title = title[0]

    try: summary = data.xpath('//description/text()')[0]
    except: summary = None

    # The thumb is in item vs the main content in the MTV/VH1/CMT xml files
    try:
        thumb = data.xpath('//item/image/@url')[0]
    except:
        thumb = ''

    try:
        date = Datetime.ParseDate(data.xpath('//pubDate/text()')[0]).date()
    except:
        date = None

    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb),
        originally_available_at = date
    )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    # Get vevo url
    vevo_url = VevoURL(url)

    # this part is only for music videos
    if vevo_url:
        return URLService.MediaObjectsForURL(vevo_url)
            
    # For show videos
    else:
        mrss_data = GetURI(url)
        media_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
        available_streams = {}
        bitrates = []
        index = 0
        
        while index < len(media_url):
            player_url = media_url[index].get('url')
            player_url = player_url.replace('{device}', 'Other')

            try:
                player_data = XML.ElementFromURL(player_url)
            except:
                raise Ex.MediaNotAvailable

            for rendition in player_data.xpath('//rendition'):
                duration = rendition.get('duration')
                rtmp_url = rendition.xpath('./src')[0].text
                # Try getting bitrate and resolution from video url
                try:
                    height = RE_RES_BIT.search(rtmp_url).group(1)
                    bitrate = RE_RES_BIT.search(rtmp_url).group(2)
                # Just in case there is an issue with the url get bitrate and hieght from xml
                except:
                    bitrate = rendition.get('bitrate')
                    height = rendition.get('height')

                if '/viacommtvstrm/' in rtmp_url:
                    stream_url = rtmp_url.split('/viacommtvstrm/')[1]
                elif '/mtvnorigin/' in rtmp_url:
                    stream_url = rtmp_url.split('/mtvnorigin/')[1]
                else:
                    raise Ex.MediaNotAvailable
            
                mp4_url = MP4_URL % stream_url
                if unicode(bitrate) in available_streams.keys():
                    available_streams[unicode(bitrate)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}
                else:
                    available_streams[unicode(bitrate)] = {}
                    available_streams[unicode(bitrate)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}
                if int(bitrate) not in bitrates:
                    bitrates.append(int(bitrate))

            index += 1

        bitrates.sort()
        bitrates.reverse()
        #Log('the value of available_streams is %s' %available_streams)        

        media_objects = []

        for bitrate in bitrates:
            # Pulling video resolution here instead of in media object to prevent errors if first part is empty
            try: vid_res = int(available_streams[unicode(bitrate)][unicode(0)]["height"])
            except: vid_res = int(available_streams[unicode(bitrate)][unicode(1)]["height"])
            # HERE WE WOULD FIX ANY WITH MISSING PARTS
            if len(available_streams[unicode(bitrate)]) < len(media_url):
                Log('the length of media_url is %s and the length of available_streams is %s' %(len(media_url), len(available_streams[unicode(bitrate)])))
                closest = FindClosest(bitrates, bitrate)
            i = 0
            parts = []
            while i < len(media_url):
                # Put data pull in a try in case a part is missing for the available_streams for the bitrate 
                try:
                    parts.append(
                        PartObject(key=available_streams[unicode(bitrate)][unicode(i)]["mp4_url"], duration=int(available_streams[unicode(bitrate)][unicode(i)]["duration"])*1000)
                    )
                except:
                    parts.append(
                        PartObject(key=available_streams[unicode(closest)][unicode(i)]["mp4_url"], duration=int(available_streams[unicode(closest)][unicode(i)]["duration"])*1000)
                    )
                    
                i += 1
            media_objects.append(
                MediaObject(
                    parts=parts,
                    bitrate = int(bitrate),
                    video_resolution = vid_res
                )
            )
            
    return media_objects

##################################################################################################
# This is a function to find the adjacent bitrate in the bitrates list to use when an available_streams list is missing parts
def FindClosest(bitrates, bitrate):

    x=0
    for bitrate_value in bitrates:
        x=x+1
        if bitrate_value==bitrate:
            break
    if x < len(bitrates):
        closest = bitrates[x]
    else:
        alt_x = len(bitrates) - 2
        closest = bitrates[alt_x]
        
    #Log(' the value of closest is %s' %closest)
    return closest

##################################################################################################
# This is a function to check for Vevo video IDs and build the Vevo url
def VevoURL(url):

    try:
        content = HTTP.Request(url).content
        html = HTML.ElementFromString(content)
    except:
        raise Ex.MediaNotAvailable

    # First check the web page to see if it has a Vevo id and is a Vevo video
    try:
        id = RE_VEVO_ID.search(content).group(1)
        local_url = html.xpath('//meta[@property="og:url"]/@content')[0]
        (artist, title) = RE_VEVO_URL_PATH.search(local_url).groups()
        vevo_url = VEVO_URL % (artist, title, id)
    # otherwise get the id number and build the mgid
    except:
        vevo_url = None

    #Log(' the value of vevo_url is %s' %vevo_url)
    return vevo_url

##################################################################################################
# This is a function builds the video uri and pull the MRSS xml page
def GetURI(url):
            
    try:
        id_num = RE_MGID_NUM.search(url).group(1)
    except:
        Log('no id in url')
        raise Ex.MediaNotAvailable
    # Usually a seven digit number is a video playlist but some video clips now have 7 digits
    # So we first need to check the pattern of the URL before building the uri
    if len(id_num) == 7:
        if '/misc/' in url or '/interview/' in url or '/promo/' in url:
            id = URI %('video', id_num)
        else:
            id = URI %('videolist', id_num)
    else:
        id = URI %('video', id_num)

    mrss_data = XML.ElementFromURL(MRSS_URL %id)
    
    # Test to make sure there are items in the MRSS to make sure it is a video list
    item_list = mrss_data.xpath('//item')
    if len(item_list) < 1:
        if 'videolist' in id:
            id = URI %('video', id_num)
        else:
            id = URI %('videolist', id_num)
        mrss_data = XML.ElementFromURL(MRSS_URL %id)
    
    #Log(' the value of id is %s' %id)
    return mrss_data

####################################################################################################
def TestURLs():

    test_urls = []
    data = HTML.ElementFromURL('http://www.mtv.com/most-popular/videos/?metric=numberOfViews&range=today&order=desc')

    for url in data.xpath('//li[@itemtype="http://schema.org/VideoObject"]//a/@href'):
        url = 'http://www.mtv.com' + url
        test_urls.append(url)

        if len(test_urls) > 2:
            break

    return test_urls
