# Variables for Vevo Music videos
VEVO_URL = 'http://www.vevo.com/watch/%s/%s/%s'
RE_VEVO_URL_PATH = Regex('http://www\.(?:mtv|vh1|cmt)\.com/videos?/([^/]+)/\d+/(.+?)\.jhtml')
RE_VEVO_ID = Regex('MTVN.Player.vevoVideoId = "(.+?)";')

# rss needs video and videolist option based on clips or full episodes
MRSS_URL = 'http://www.mtv.com/player/embed/AS3/rss/?uri=mgid:uma:%s:mtv.com:%s'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s/%s'

# A FEW VIDEOS ONLY HAVE FOUR DIGITS BUT HAVING THE REGEX ACCEPT FOUR DIGITS INTERFERES WITH ANY URL THAT HAS A YEAR IN THE NAME.
# EXAMPLE OF FOUR DIGIT URL IS http://www.mtv.com/videos/?vid=9479
# ADDED FOUR DIGIT TO RANGE OF SERVICEINFO.PLIST AND KEPT REGEX RANGE 5 TO 7 SINCE MUSIC VIDEOS GO TO VEVO AND DON'T USE REGEX
# OTHER ODD URL EXAMPLE IN MUSIC VIDEOS http://www.mtv.com/videos/tye-james/975425/zombie-remix.jhtml
RE_MGID = Regex('(?:\/|vid=|id=)(\d{5,7})\/?')

####################################################################################################
# added normalize to separate
def NormalizeURL(url):
    return url.split('#')[0]

####################################################################################################
# Took out thumb and separate check for title in episodes since all mgid return as video or playlist
def MetadataObjectForURL(url):

    # this part is only for music videos
    vevo_id = VevoID(url)
    if vevo_id:
        vevo_url = GetVevoURL(url, vevo_id)
        return URLService.MetadataObjectForURL(vevo_url)

    data = GetRSS(url)
    title = data.xpath('//title')[0].text

    try: summary = data.xpath('//description')[0].text
    except: summary = None

    # The thumb is in item vs the main content in the MTV/VH1/CMT xml files
    try:
        thumb = data.xpath('//item/image/@url')[0]
    except:
        thumb = ''

    try:
        date = Datetime.ParseDate(data.xpath('//pubDate')[0].text).date()
    except:
        date = None

    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb),
        originally_available_at = date
    )

####################################################################################################
# Found that the number of parts for shows varies widely from 4 to 11. 
# CMT full episodes end with full-episode.jhtml in name instead of playlist.jhtml and did have 4-6 parts.
# But now some of the hour long shows have 11 parts
def MediaObjectsForURL(url):

    if 'full-episode' in url or 'playlist' in url:
        num_parts = 11
    else:
        num_parts = 1

    return [
        MediaObject(
            parts = [
                PartObject(
                    key=Callback(PlayVideo, url=url, bitrate=str(bitrate), index=i)
                    ) for i in range(num_parts)
            ],
            bitrate = bitrate,
            video_resolution = resolution,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
	    # Resolutions for old videos are different. And include 1200/360, 1800/432, 600/240  
	    # But they are handled with the closest command in the PlayVideo function
        ) for bitrate,resolution in [(3500, '720'), (2200, '540'), (1700, '432'), (1200, '360')]
    ]
####################################################################################################
@indirect
def PlayVideo(url, bitrate='3500', index=0, **kwargs):

    # this part is only for music videos
    vevo_id = VevoID(url)
    if vevo_id:
        vevo_url = GetVevoURL(url, vevo_id)
        vevo_media = URLService.MediaObjectsForURL(vevo_url)
        if not vevo_media:
            raise Ex.MediaNotAvailable
        vevo_video = 'None'
        for video in vevo_media:
            #Since Vevo videos only come in two resolutions similar to the Viacom vidoes, if not 720, then 420
            if bitrate=='3500':
                video_res='720'
            else:
                video_res='360'
            if str(video.video_resolution) == video_res:
                vevo_video = video.parts[0].key
            else:
                pass
        if vevo_video is 'None':
            vevo_video= vevo_media[-1].parts[0].key
        return Redirect(vevo_video)
    
    else:
        mrss_data = GetRSS(url)
        media_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)

        if index < len(media_url):
            player_url = media_url[index].get('url')
            player_url = player_url.replace('{device}', 'Other')
        else:
            # Return small filler movie for desktop clients
            return Redirect('http://dl.dropbox.com/u/2974527/Plex/filler.mp4')

        try:
            player_data = XML.ElementFromURL(player_url)
        except:
            raise Ex.MediaNotAvailable

        available_bitrates = player_data.xpath('//rendition[@bitrate]/@bitrate')
        if len(available_bitrates) < 1:
            raise Ex.MediaNotAvailable

        closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]
        rtmp_url = player_data.xpath('//rendition[@bitrate="%s"]/src' % closest)[0].text

        # Split reflects the rtmp address for MTV, VH1, and CMT videos.
        if '/gsp.originmusicstor/' in rtmp_url:
            stream_url = rtmp_url.split('/gsp.originmusicstor/')[1]
            mp4_url = MP4_URL % ('gsp.originmusicstor', stream_url)
        elif '/gsp.egvrenditions/' in rtmp_url:
            stream_url = rtmp_url.split('/gsp.egvrenditions/')[1]
            mp4_url = MP4_URL % ('gsp.egvrenditions', stream_url)
        elif '/gsp.mtvcomstor/' in rtmp_url:
            stream_url = rtmp_url.split('/gsp.mtvcomstor/')[1]
            mp4_url = MP4_URL % ('gsp.mtvcomstor', stream_url)
        elif '/gsp.vhonecomstor/' in rtmp_url:
            stream_url = rtmp_url.split('/gsp.vhonecomstor/')[1]
            mp4_url = MP4_URL % ('gsp.vhonecomstor', stream_url)
        elif '/gsp.cmtstor/' in rtmp_url:
            stream_url = rtmp_url.split('/gsp.cmtstor/')[1]
            mp4_url = MP4_URL % ('gsp.cmtstor', stream_url)
        elif '/gsp.mtvnshrdstor/' in rtmp_url:
            stream_url = rtmp_url.split('/gsp.mtvnshrdstor/')[1]
            mp4_url = MP4_URL % ('gsp.mtvnshrdstor', stream_url)
        elif '/gsp.ctnstor/' in rtmp_url:
            stream_url = rtmp_url.split('/gsp.ctnstor/')[1]
            mp4_url = MP4_URL % ('gsp.ctnstor', stream_url)
        else:
            raise Ex.MediaNotAvailable

        return IndirectResponse(VideoClipObject, key=mp4_url)

####################################################################################################
# Using regex to pull mgid from url. Added id option to regex for CMT videos. 
# Also full episodes use videolist while clips and music videos use video in rss url
def GetRSS(url):
    try:
        mgid = RE_MGID.search(url).group(1)
    except:
        raise Ex.MediaNotAvailable
    # The new regex is still not deleting slashes from music videos so need this line to pull them out
    if '/' in mgid:
        mgid = mgid.replace('/', '')

    if not mgid:
        raise Ex.MediaExpired

    # There are a few errors popping up because MTV is using videolist instead of video for some of their misc videos now
    # So changing this line to length will fix the issue, since all mgids with 7 digits use videolist, while mgids with 6 or less digits use video
    if len(mgid) > 6:
        mrss_data = XML.ElementFromURL(MRSS_URL %('videolist', mgid))
    else:
        mrss_data = XML.ElementFromURL(MRSS_URL %('video', mgid))

    return mrss_data
##################################################################################################
# This is a function to check for Vevo video IDs
def VevoID(url):

    id = ''
    content = HTTP.Request(url).content

    try:
        id = RE_VEVO_ID.search(content).group(1)
    except:
        pass

    return id

####################################################################################################
def GetVevoURL(url, vevo_id):

    html = HTML.ElementFromURL(url)
    local_url = html.xpath('//meta[@property="og:url"]')[0].get('content')
    (artist, title) = RE_VEVO_URL_PATH.search(local_url).groups()
    vevo_url = VEVO_URL % (artist, title, vevo_id)

    return vevo_url
####################################################################################################
def TestURLs():

  test_urls = []
  data = HTML.ElementFromURL('http://www.mtv.com/most-popular/videos/?metric=numberOfViews&range=today&order=desc')

  for url in data.xpath('//li[@itemtype="http://schema.org/VideoObject"]//a/@href'):
    url = 'http://www.mtv.com' + url
    test_urls.append(url)

    if len(test_urls) > 2:
      break

  return test_urls
