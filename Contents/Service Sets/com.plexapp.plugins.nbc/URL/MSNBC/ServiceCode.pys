VIDEO_URL = "http://www.msnbc.msn.com/default.cdnx/id/%s/displaymode/1157?t=.flv" #video_id

AudioStreamObject.language_code = Locale.Language.English

RE_VIDEO_ID = Regex('(\d{8})')

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	title = html.xpath('//meta[@name="title"]/@content')

	if len(title) < 1:
		if 'nbcnews.com/id/' in url and '#' in url:
			url = 'http://www.nbcnews.com/id/%s' % url.split('#')[-1]
			html = HTML.ElementFromURL(url)

			title = html.xpath('//div[@cn]/@cn')[0].strip()
			summary = html.xpath('//span[@class="textMed"]/text()')[0].strip()
			thumb = html.xpath('//a/img[contains(@src, ".jpg")]/@src')[0]
		else:
			raise Ex.MediaNotAvailable
	else:
		# Pages without video do not have the link rel image_src element
		try:
			thumb = html.xpath('//link[@rel="image_src"]/@href')[0]
		except:
			raise Ex.MediaNotAvailable

		title = title[0]
		summary = html.xpath('//meta[@name="description"]/@content')[0]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key = Callback(PlayVideo, url=url)
				)
			],
			container = 'flv',
			video_codec = 'vp6',
			audio_codec = AudioCodec.MP3,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	vid_id = RE_VIDEO_ID.findall(url)[-1]
	return IndirectResponse(VideoClipObject, key=VIDEO_URL % vid_id)

####################################################################################################
def TestURLs():

	test_urls = []
	feed = RSS.FeedFromURL('http://rss.msnbc.msn.com/id/21426473/device/rss/')

	for item in feed.entries:
		test_urls.append(item.link)

		if len(test_urls) > 2:
			break

	return test_urls
