BASE_URL = 'http://www.nbc.com'
VIDEO_DETAILS = '/video/episodes/init.xml?videoId=%s'
THUMB_URL = 'http://video.nbc.com/player/mezzanine/image.php?w=640&h=360&trusted=yes&path=/%s/%s_mezzn.jpg'

CLIP_CONFIG_ID = '16009'
RE_VIDEO_ID = Regex('(nbc|latenightwithjimmyfallon|jaylenosgarage).com/((?!Vintage_Shows).+/)?video/.+?/(?P<id>n?[0-9]{4,})')

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	# The given url should contain the video ID. We need this in order to use a different
	# url to obtain the specific details in a sensible format.
	video_id = RE_VIDEO_ID.search(url)

	if not video_id:
		return None

	id = video_id.group('id')

	# Request the page that contains the details of the title.
	show_url = url.split("/video/")[0]
	show_details_url = show_url + (VIDEO_DETAILS % id)
	show_xml = XML.ElementFromURL(show_details_url)

	config_id = show_xml.xpath("//configId/text()")[0]

	# The show title is actually the hardest thing to determine. The XML contains a list of shows
	# but no specific linked relationship from the known episode id. We therefore match the permBaseURL
	# to the show and then extract its name.
	try:
		show_base_url = show_xml.xpath("//permBaseURL/text()")[0]
		show_names = show_xml.xpath("//show//link[contains(text(), '%s')]/../name/text()" % show_base_url)
		show_name = None
		if len(show_names) > 0:
			show_name = show_names[0]
	except:
		show_name = None

	# Identify the root node of the specific show's episode
	episode_node = show_xml.xpath("//episode/videoID[contains(text(), %s)]/.." % id)

	if len(episode_node) < 1:
		raise Ex.MediaNotAvailable

	# Extract the available details
	title = episode_node[0].xpath(".//epiTitle/text()")[0]
	description = episode_node[0].xpath(".//epiDescription/text()")[0]

	thumb_url = episode_node[0].xpath(".//epiImage/text()")[0]
	thumb_id = thumb_url.rsplit('/', 1)[1].split('_', 1)[0]

	if 'nbcrewind' in thumb_url:
		video_type = 'nbcrewind2'
	elif id.startswith('n'):
		video_type = 'NBCdotCOM'
	else:
		video_type = 'nbc-hls'

	thumb = THUMB_URL % (video_type, thumb_id)

	# We can use the config id to determine if the associated title is just a video clip, or a full on
	# episode.
	if config_id == CLIP_CONFIG_ID:
		return VideoClipObject(
			title = title,
			summary = description,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
		)

	return EpisodeObject(
		title = title,
		summary = description,
		show = show_name,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
	)

####################################################################################################
def MediaObjectsForURL(url):

	video_id = RE_VIDEO_ID.search(url)

	if not video_id:
		return None

	id = video_id.group('id')

	video_url = 'http://plexapp.tv/embed/nbc.php?vid=%s' % id

	return [
		MediaObject(
			parts = [PartObject(key = WebVideoURL(video_url))]
		)
	]

####################################################################################################
def TestURLs():

	test_urls = []
	page = HTML.ElementFromURL("http://www.nbc.com/video/library/")

	# Full length episodes
	results = page.xpath("//div[@id='header-full-eps']//li/a[not(contains(@href, 'http'))]")
	for index in range(2):
		item = results[index]
		url = "http://www.nbc.com" + item.get('href')
		test_urls.append(url)

	# Video clips
	results = page.xpath("//div[@id='header-video-clips']//li/a[contains(@href, 'http://www.nbc.com')]")
	for index in range(2):
		item = results[index]
		url = item.get('href')
		test_urls.append(url)

	return test_urls
