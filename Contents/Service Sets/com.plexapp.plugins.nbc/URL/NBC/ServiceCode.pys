METADATA_URL = 'http://www.nbc.com/assets/esp/mobile/PortalFeedV0140/portalGetFullVideoDetail/.json?video_id=%s'
VIDEO_URL = 'https://secure.services.nbc.nbcuni.com/mobile/PortalFeedV0140/portalGetVideoURL/.json?videoId=%s'
THUMB_URL = 'http://video.nbc.com/player/mezzanine/image.php?w=640&h=360&trusted=yes&path=%s'

HTTP_HEADERS = {
	'User-Agent': 'Appcelerator Titanium/1.8.3.07172012 (iPad/6.1.3; iPhone OS; en_US;)'
}

RE_VIDEO_ID = Regex('(nbc|latenightwithjimmyfallon|jaylenosgarage).com/((?!Vintage_Shows).+/)?video/.+?/(?P<id>n\d{4,})')

AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	video_id = RE_VIDEO_ID.search(url)

	if not video_id:
		raise Ex.MediaNotAvailable

	try:
		json_obj = JSON.ObjectFromURL(METADATA_URL % video_id.group('id'), headers=HTTP_HEADERS, cacheTime=CACHE_1WEEK)
		json_obj = json_obj[0]
	except:
		raise Ex.MediaExpired

	title = json_obj['title']
	summary = json_obj['shortDescription']
	duration = int(float(json_obj['cliplength']) * 1000)
	thumb = THUMB_URL % json_obj['thumbnail']
	originally_available_at = Datetime.ParseDate(json_obj['publishedDate']).date()

	if json_obj['contentType'] == 'Full Episode':
		show = json_obj['subtitle']
		season = json_obj['season']
		index = json_obj['episode_number'].split(' ')[-1]

		return EpisodeObject(
			show = show,
			season = int(season) if season else None,
			index = int(index) if index else None,
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

####################################################################################################
def MediaObjectsForURL(url):

	if '/classic-tv/' in url:
		return [
			MediaObject(
				parts = [
					PartObject(
						key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
					)
				],
				video_resolution = '480',
				aspect_ratio = '1.33',
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	else:
		return [
			MediaObject(
				parts = [
					PartObject(
						key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
					)
				],
				video_resolution = '720',
				aspect_ratio = '1.78',
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

####################################################################################################
@indirect
def PlayVideo(url):

	video_id = RE_VIDEO_ID.search(url)

	if not video_id:
		raise Ex.MediaNotAvailable

	json_obj = JSON.ObjectFromURL(VIDEO_URL % video_id.group('id'), headers=HTTP_HEADERS, cacheTime=10)
	m3u8_url = json_obj['tokenizedURL']

	playlist = HTTP.Request(m3u8_url, cacheTime=10)
	content = playlist.content
	cookie = playlist.headers['set-cookie']

	return IndirectResponse(VideoClipObject,
		key = HTTPLiveStreamURL(m3u8_url),
		http_cookies = cookie
	)

####################################################################################################
def TestURLs():

	test_urls = []
	page = HTML.ElementFromURL('http://www.nbc.com/video/library/')

	# Full episodes
	result = page.xpath('//div[@id="header-full-eps"]//li/a/@href')[0:2]
	for url in result:
		if not url.startswith('http://'):
			url = 'http://www.nbc.com%s' % url
		test_urls.append(url)

	# Video clips
	result = page.xpath('//div[@id="header-video-clips"]//li/a/@href')[0:2]
	for url in result:
		if not url.startswith('http://'):
			url = 'http://www.nbc.com%s' % url

		test_urls.append(url)

	return test_urls
