QUALITIES = ['high', 'low']

####################################################################################################
def NormalizeURL(url):

  return url

####################################################################################################
def MetadataObjectForURL(url):

  data = HTML.ElementFromURL(url)

  if not data:
    raise Ex.MediaNotAvailable

  title = data.xpath('//meta[@itemprop="name"]/@content')[0]
  summary = data.xpath('//meta[@itemprop="description"]/@content')[0]

  # TODO
  # duration = data.xpath('//meta[@itemprop="duration"]/@content')[0]

  thumb = data.xpath('//link[@itemprop="thumbnailUrl"]/@href')[0]
  art = data.xpath('//link[@itemprop="image"]/@href')[0]

  return VideoClipObject(
    title = title,
    summary = summary,
    thumb = Resource.ContentsOfURLWithFallback(url = thumb),
    art = Resource.ContentsOfURLWithFallback(url = art)
  )

####################################################################################################
def MediaObjectsForURL(url):

  return [MediaObject(
    parts = [PartObject(key = Callback( PlayVideo, url = url, quality = 'high' ))],
    container = "mp4",
    video_codec = "h264",
    audio_codec = "aac",
    video_resolution = 1080,
    optimized_for_streaming = True
  ),
  MediaObject(
    parts = [PartObject(key = Callback( PlayVideo, url = url, quality = 'low' ))],
    container = "mp4",
    video_codec = "h264",
    audio_codec = "aac",
    video_resolution = 360,
    optimized_for_streaming = True
  )]

####################################################################################################
@indirect
def PlayVideo(url, quality):

  data = HTML.ElementFromURL(url)
  video_url = None

  video_url = data.xpath('//link[@itemprop="contentURL"]/@href')[0]
  if quality == 'high':
    video_url = video_url.replace('low.mp4', 'high.mp4')

  if not video_url:
    raise Ex.MediaNotAvailable

  return IndirectResponse(VideoClipObject, key = video_url)
