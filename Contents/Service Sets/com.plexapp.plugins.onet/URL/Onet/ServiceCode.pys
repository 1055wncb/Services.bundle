JQUERY_URL = "http://qi.ckm.onetapi.pl/?callback=&body[id]=.&body[jsonrpc]=2.0&body[method]=get_asset_detail&body[params][ID_Publikacji]=%s&body[params][Service]=ofsajd.onet.pl&content-type=application/jsonp&x-onet-app=player.front.onetapi.pl"
IMAGE_BASE = "http://m.ocdn.eu/_m/"

MediaObject.video_codec = 'h264'
MediaObject.audio_codec = 'aac'
MediaObject.container = 'mp4'
AudioStreamObject.language_code = Locale.Language.Polish

####################################################################################################
def NormalizeURL(url):

    return url

####################################################################################################
def MetadataObjectForURL(url):

    data = GetDetails(url)

    title = data['meta']['title']
    summary = data['meta']['description']
    thumb = IMAGE_BASE + data['meta']['image'].replace('.jpg',',8,1.jpg')
    duration = int(data['playlist'][0]['length'])*1000

    return VideoClipObject(
        title = title,
        summary = summary,
        duration = duration,
        thumb = Resource.ContentsOfURLWithFallback(thumb)
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=1500))],
            video_resolution = '576',
            bitrate = '1500'
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=800))],
            video_resolution = '360',
            bitrate = '800'
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=240))],
            video_resolution = '240',
            bitrate = '240'
        )
    ]

####################################################################################################
def PlayVideo(url, bitrate=1500):

    data = GetDetails(url)
    available_bitrates = []
    for video in data['formats']['wideo']['mp4']:
	available_bitrates.append(video['video_bitrate'].split('.')[0])

    if len(available_bitrates) < 1:
        raise Ex.MediaNotAvailable

    closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]
    index = available_bitrates.index(closest)
    video_url = data['formats']['wideo']['mp4'][index]['url']

    return Redirect(video_url)

####################################################################################################
def GetDetails(url):

    data = HTML.ElementFromURL(url)
    video_id = data.xpath('//div[starts-with(@id, "mvp:")]/@id')[0].split(':')[1]
    json_data = JSON.ObjectFromURL(JQUERY_URL % video_id)

    if 'result' in json_data:
        return json_data['result']['0']
    else:
        raise Ex.MediaNotAvailable
        
####################################################################################################
def TestURLs():

    test_urls = []
    data = HTML.ElementFromURL('http://www.onet.pl/')

    for video in data.xpath('//a[span/@class="icon videoIcon Small"]/@href'):
        test_urls.append(video)

        if len(test_urls) > 2:
            break

    return test_urls
