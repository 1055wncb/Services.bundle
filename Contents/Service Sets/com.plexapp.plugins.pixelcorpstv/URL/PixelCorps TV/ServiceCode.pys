BASE_URL = "http://www.pixelcorps.tv"

SHOWS_MP3 = ["macbreak_tech", "MacBreak_Tech", "macbreak_weekly", "mbw", "potential_energy", "the_vfx_show",
                "vfxs", "this_week_in_media", "twim", "this_week_in_photography", "twip"]
SHOWS_MOV = ["gear_media_tech", "gmt", "ITBB", "itbb", "macbreak", "macbreak_dev", "mbkd", "macbreak_studio",
                "macbreak_work", "modoshop", "the_grip_guide"]

####################################################################################################
def TestURLs():
    test_urls= []
    data = HTML.ElementFromURL(BASE_URL)
    recent = data.xpath('//div[@id="content-sidebar"]')[0]
    for podcast in recent.xpath('.//div[@class="podcast-navigation clearfix"]'):
        link = podcast.xpath('.//a')[0].get('href')
        test_urls.append(BASE_URL + link)
        if len(test_urls) > 2:
            break
    return test_urls

####################################################################################################
def MetadataObjectForURL(url):
    media_type = GetMediaType(url)

    data = HTML.ElementFromURL(url)
    details = data.xpath('//div[@id="content"]')[0]
    title = details.xpath('.//h2[@class="page-title"]')[0].text
    clip_title = details.xpath('.//h2[@class="title podcast"]')[0].text
    title = "%s - %s" % (title, clip_title)
    #runtime = details.xpath('.//div[@class="running-time"]/text()').split(':') #make sure to grab just the mm:ss
    #duration = (int(runtime[0])*60 + int(runtime[1]))*1000
    date = Datetime.ParseDate(details.xpath('.//h3[@class="podcast-date"]')[0].text).date
    summary = details.xpath('.//p')[1].text

    if media_type == "MOV":
        c = VideoClipObject(
            title = title,
            #duration = duration,
            originally_available_at = date,
            summary = summary)
    elif media_type == "MP3":
        c = TrackObject(
            title = title,
            #duration = duration,
            originally_available_at = date,
            summary = summary)
    return

####################################################################################################
def MediaObjectsForURL(url):
    media_type = GetMediaType(url)

    if media_type == "MOV":
        return [
            MediaObject(
                container = Container.MP4,
                video_codec = VideoCodec.H264,
                audio_codec = AudioCodec.AAC,
                video_resolution = '540',
                optimized_for_streaming = True,
                audio_channels = 2,
                parts = [PartObject(key=Callback(PlayMedia, url = url))]
                )
            ]
    elif media_type == "MP3":
        return [
            MediaObject(
                container = Container.MP3,
                audio_codec = AudioCodec.MP3,
                audio_channels = 2,
                parts = [PartObject(key=Callback(PlayMedia, url = url, ext='mp3'))]
                )
            ]

####################################################################################################
def PlayMedia(url):
    data = HTML.ElementFromURL(url)
    media_url = data.xpath('//div[@class="download"]/a')[0].get('href')
    return Redirect(media_url)

####################################################################################################
def GetMediaType(url):
    ### compare url to list of known media types for the different shows on PixelCorps ###
    show = url.split('/')[-1]
    for possible in SHOWS_MOV:
        if show.startswith(possible):
            return "MOV"
        else:
            pass
    for possible in SHOWS_MP3:
        if show.startswith(possible):
            return "MP3"
        else:
            pass
    return