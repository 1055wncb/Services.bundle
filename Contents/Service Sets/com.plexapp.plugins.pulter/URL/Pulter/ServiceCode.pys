import re, urllib2, httplib

BASE_URL = 'http://pulter.ru'
XML_URL = 'http://api.pulter.ru/video/elementtimeline/list.svc/getvideopartlist?e=mnw2LLhqcEe7d_5ddaovKA2&ip=64.201.208.186&u=&h=ZAFsDSuznnrE51NgeAOyrw2'

####################################################################################################

def NormalizeURL(url):
  return url

####################################################################################################

def MetadataObjectForURL(url):

    data = HTML.ElementFromURL(url)
    
    if '/cinema/' or '/docs/' or '/kids/' in url:
      title = data.xpath('//div[@class="player"]//a')[0].text
      summary = data.xpath('//div[@class="player"]//p')[0].text
      thumb = GetThumb(url)
      
      xml_url = GetVideoDetailsURL(url)
      data = XML.ElementFromURL(xml_url)
      duration = int(data.xpath('//duration')[0].text)
  
      mo = MovieObject(
          title = title,
          summary = summary,
          duration = duration,
          thumb = thumb
          )
    elif '/series/' or '/shows/' in url:
      show_title = data.xpath('//div[@class="player"]//a')[0].text
      ep_title = data.xpath('//div[@class="player"]/div/div/div')[1].text
      summary = data.xpath('//div[@class="player"]//p/text()')[0]
      
      
      xml_url = GetVideoDetailsURL(url)
      data = XML.ElementFromURL(xml_url)
      duration = int(data.xpath('//duration')[0].text)
      thumb = GetThumb(url)
  
      mo = EpisodeObject(
          show = show_title,
          title = ep_title,
          summary = summary,
          duration = duration,
          thumb = thumb
          )
    else:
      pass
    return mo
  
####################################################################################################

def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            container = 'flv',
            video_resolution = 'sd',
            video_codec = 'h264',
            audio_codec = 'aac',
            audio_channels = 2
            )
        ]

####################################################################################################
def PlayVideo(url):
    xml_url = GetVideoDetailsURL(url)
    
    data = XML.ElementFromURL(xml_url)
    
    flv_url = data.xpath('//fileUrl')[0].text
    Log(flv_url)
    
    return Redirect(flv_url)
    
####################################################################################################
def GetFlashRedirectURL(url):
    content = HTTP.Request(url).content
    swf_redirect = BASE_URL + re.search('swfobject.embedSWF\("(/player/int/fla/[A-Za-z0-9_%+-]+)",', content).group(1)
    request = urllib2.Request(swf_redirect)
    opener = urllib2.build_opener(SmartRedirectHandler)
    f = opener.open(request)
    if f.status == 301 or f.status == 302 or f.status == 303:
      redirect_url = String.Unquote(f.url, usePlus=False)
    else:
      pass
    
    return redirect_url

####################################################################################################
def GetVideoDetailsURL(url):
  xml_url = re.search('&etu=(http://api.pulter.ru/video/elementtimeline/list.svc/getvideopartlist.+)&eou=', GetFlashRedirectURL(url)).group(1)
  return xml_url

####################################################################################################
def GetThumb(url):
  try:
    thumb = re.search('tiu=(http://.+\.jpg)&vdu=', GetFlashRedirectURL(url)).group(1)
  except:
    R('icon-default.png')
  return thumb

####################################################################################################
class SmartRedirectHandler(urllib2.HTTPRedirectHandler):
  def http_error_301(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_301(self, req, fp, code, msg, headers)
    result.status = code
    return result

  def http_error_302(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)
    result.status = code
    return result
  
  def http_error_303(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_303(self, req, fp, code, msg, headers)
    result.status = code
    return result