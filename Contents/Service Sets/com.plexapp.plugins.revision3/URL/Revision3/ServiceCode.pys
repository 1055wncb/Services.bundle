HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:19.0) Gecko/20100101 Firefox/19.0'}

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=7200)
	videos = data.xpath('//a[contains(@href, ".mp4")]/@href')

	if len(videos) < 1:
		raise Ex.MediaNotAvailable

	show = data.xpath('//meta[@name="description"]/@content')[0].split(': ')[0]
	title = data.xpath('//meta[@property="og:title"]/@content')[0]
	summary = data.xpath('//meta[@property="og:description"]/@content')[0]

	try: date = Datetime.ParseDate(data.xpath('//meta[@property="publish-date"]/@content')[0]).date()
	except: date = None

	try: duration = int(data.xpath('//meta[@property="video:duration"]/@content')[0])*1000
	except: duration = None

	try: thumb = data.xpath('//meta[@property="og:image"]/@content')[0].replace('--medium.thumb.jpg', '--large.thumb.jpg')
	except: thumb = ''

	return EpisodeObject(
		show = show,
		title = title,
		summary = summary,
		originally_available_at = date,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='720p'))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='large'))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '480',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='small'))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = 'sd',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, fmt):

	if fmt == '480p': fmt = 'large'
	elif fmt == 'SD': fmt = 'small'

	data = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=7200)
	videos = data.xpath('//a[contains(@href, ".mp4")]/@href')

	if len(videos) < 1:
		raise Ex.MediaNotAvailable

	video_url = data.xpath('//a[contains(@href, ".mp4") and contains(@href, "%s")]/@href' % fmt)

	if len(video_url) < 1:
		video_url = data.xpath('//a[contains(@href, ".mp4")]/@href' % fmt)

	return IndirectResponse(VideoClipObject, key=video_url[0])
