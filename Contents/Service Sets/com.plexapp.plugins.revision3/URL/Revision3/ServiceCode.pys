REVISION3_NS = {'og':'http://opengraphprotocol.org/schema/'}
FMT_INDEX = {'720p':0, '480p':1, 'SD':2}

####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):
  data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')

  show_title = data.xpath('//meta[@name="description"]')[0].get('content').split(': ')[0]
  episode_title = data.xpath('.//div[@id="show-notes"]/h2')[0].text
  try: date = Datetime.ParseDate(data.xpath('//meta[@name="publish-date"]')[0].get('content')).date()
  except: date = None
  summary = data.xpath('//meta[@property="og:description"]', namespaces=REVISION3_NS)[0].get('content')
  try:
    duration = data.xpath('.//div[@id="show-notes"]//div[@class="subtext"]')[0].text
    duration = duration.split('running time ')[1]
    durationParts = duration.split(':')
    duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
  except:
    duration = None

  thumbUrl = data.xpath('//link[@rel="image_src"]')[0].get('href')
  try:
    thumbUrl = thumbUrl.replace('-small.thumb.jpg', '-medium.thumb.jpg')
  except:
    pass

  # Construct a metadata item
  mo = EpisodeObject(
    title = episode_title,
    show = show_title,
    duration = duration, 
    originally_available_at = date,
    summary = summary,
    thumb = thumbUrl
  )
  return mo
  
####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='720p'))],
      video_resolution = '720',
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='480p'))],
      video_resolution = '480',
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='SD'))],
      video_resolution = 'sd',
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True
    )
  ]

####################################################################################################
def PlayVideo(url, fmt):
  data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')

  videos = data.xpath('//div[@id="action-panels-download-MP4"]')[0]
  available_videos = videos.xpath('.//a[@class="sizename"]')

  # There appears to be a small number of SD videos which are not available. Therefore, for these few
  # we will simply grab the lowest quality available, likely to be 480p
  try: video = available_videos[FMT_INDEX[fmt]]
  except:
    if fmt == 'SD':
      video = available_videos[-1]

  video_url = video.get('href')

  return Redirect(video_url)
