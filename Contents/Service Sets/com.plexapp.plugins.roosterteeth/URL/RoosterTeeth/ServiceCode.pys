def NormalizeURL(url):
    return url

####################################################################################################

def MetadataObjectForURL(url):
    data = HTML.ElementFromURL(url, errors='ignore')
    
    title = data.xpath('//meta[@property="og:title"]')[0].get('content')
    summary = data.xpath('//meta[@property="og:description"]')[0].get('content')
    thumb = data.xpath('//meta[@property="og:image"]')[0].get('content')
    duration = int(data.xpath('//meta[@property="video:duration"]')[0].get('content')) * 60 * 1000

    date = None
    try:
        date = data.xpath('//meta[@property="video:release_date"]')[0].get('content')
        date = Datetime.ParseDate(date)
    except: pass

    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = thumb,
        originally_available_at = date,
        duration = duration)

####################################################################################################

@deferred
def MediaObjectsForURL(url):
    data = HTML.ElementFromURL(url, errors='ignore')
    external_url = data.xpath('//iframe[contains(@src, "blip.tv")]')[0].get('src')
    external_url = String.Unquote(external_url)

    return URLService.MediaObjectsForURL(external_url)