HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3'}

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS)
	video = html.xpath('//video')

	if len(video) < 0:
		return None

	title = html.xpath('//meta[@property="og:title"]')[0].get('content').rsplit(' Trailer')[0]
	summary = html.xpath('//meta[@property="og:description"]')[0].get('content').split('%s: ' % title)[1]
	thumb = html.xpath('//meta[@property="og:image"]')[0].get('content')

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			video_resolution = 'sd',
			optimized_for_streaming = True,
			audio_channels = 2,
			bitrate = 750,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, bitrate=None):

	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=0)
	video = html.xpath('//video')

	if len(video) < 0:
		return None

	video_url = video[0].get('src')

	return IndirectResponse(VideoClipObject, key=video_url)
