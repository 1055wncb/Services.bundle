XL_URL = 'http://www.rtl.nl/xl/#/u/%s'
XL_DATA_URL = 'http://www.rtl.nl/system/s4m/xldata/uuid/%s?version=2.0'
FEED_URL = '/s%=ka/s%=tmf/dapi=d/dfdapi/m4s/metsys/ln.ltr.www//:ptth'[::-1]
THUMB_URL = 'http://data.rtl.nl/system/img//%s.jpg'

RE_UUID = Regex('(?P<uuid>[a-f0-9]{8}-([a-f0-9]{4}-){3}[a-f0-9]{12})')
RE_SERIES_ID = Regex('/(?P<series_id>\d+)\.xml')
CLIENT_COMPAT_ADAPTIVE_HLS = ['iOS', 'Android', 'Roku', 'Safari']

HTTP_HEAD_DESKTOP = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17'}
HTTP_HEAD_TABLET = {'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A523 Safari/8536.25'}
HTTP.CacheTime = CACHE_1DAY

####################################################################################################
def NormalizeURL(url):

	uuid = RE_UUID.search(url)
	if uuid:
		url = XL_URL % uuid.group('uuid')

	return url

####################################################################################################
def MetadataObjectForURL(url):

	uuid = RE_UUID.search(url)
	if not uuid:
		return None

	data_url = XL_DATA_URL % uuid.group('uuid')
	material_node = XML.ElementFromURL(data_url, headers=HTTP_HEAD_DESKTOP, encoding='iso-8859-1').xpath('//material[@key="%s"]' % uuid.group('uuid'))

	if len(material_node) < 1:
		raise Ex.MediaNotAvailable
	else:
		data = material_node[0]

	try: title = data.xpath('./title')[0].text
	except: raise Ex.MediaNotAvailable

	studio = data.xpath('./broadcast_station_display')[0].text

	try:
		summary = data.xpath('./synopsis')[0].text
	except:
		try:
			episode_key = data.get('episode_key')
			summary = data.xpath('./../../episode-list/episode[@key="%s"]/synopsis/text()' % episode_key)[0]
		except:
			summary = None

	broadcast = data.xpath('./broadcast_date_display')[0].text
	broadcast = Datetime.FromTimestamp(float(broadcast))
	originally_available_at = Datetime.ParseDate(str(broadcast)).date()

	try: duration = TimeToMs(data.xpath('./length')[0].text)
	except: duration = None

	thumb_id = data.xpath('./thumbnail_id')[0].text
	thumb = THUMB_URL % thumb_id

	return VideoClipObject(
		title = title,
		summary = summary,
		originally_available_at = originally_available_at,
		duration = duration,
		studio = studio,
		thumb = Resource.ContentsOfURLWithFallback(thumb, fallback='icon-default.png')
	)

####################################################################################################
def MediaObjectsForURL(url):

	if Client.Platform in CLIENT_COMPAT_ADAPTIVE_HLS:
		return [
			MediaObject(
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url, type='hls')))],
				container = 'mpegts',
				video_codec = VideoCodec.H264,
				video_resolution = 'sd',
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	else:
		return [
			MediaObject(
				parts = [PartObject(key=Callback(PlayVideo, url=url, type='mp4'))],
				container = 'mp4',
				video_codec = VideoCodec.H264,
				video_resolution = 'sd',
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

####################################################################################################
def PlayVideo(url, type):

	uuid = RE_UUID.search(url)
	if not uuid:
		return None

	data_url = XL_DATA_URL % uuid.group('uuid')

	try:
		x = HTTP.Request(data_url, headers=HTTP_HEAD_DESKTOP, timeout=5, follow_redirects=False).headers
	except Ex.RedirectError, e:
		if 'Location' in e.headers:
			series_id = RE_SERIES_ID.search(e.headers['Location']).group('series_id')
		else:
			raise Ex.MediaNotAvailable

	if type == 'hls':
		xml_url = FEED_URL % ('adaptive', series_id)
	else:
		xml_url = FEED_URL % ('progressive', series_id)

	video_url = XML.ElementFromURL(xml_url, headers=HTTP_HEAD_TABLET).xpath('//item/contentid[text()="%s"]/parent::item/movie/text()' % uuid.group('uuid'))
	if len(video_url) < 1:
		raise Ex.MediaNotAvailable
	else:
		try:
			test = HTTP.Request(video_url[0], timeout=5).headers
			return Redirect(video_url[0])
		except:
			raise Ex.MediaNotAvailable

####################################################################################################
def TimeToMs(timecode):

	seconds = 0
	duration = timecode.split('.')[0].split(':')
	duration.reverse()

	for i in range(0, len(duration)):
		seconds += int(duration[i]) * (60**i)

	return seconds * 1000

####################################################################################################
def TestURLs():

	test_urls = []
	page = XML.ElementFromURL('http://www.rtl.nl/system/s4m/xldata/home.xml?version=2.0', encoding='iso-8859-1')
	results = page.xpath("//material")

	for item in results:
		video_id = item.get('key')

		if len(video_id) < 2:
			continue

		url = XL_URL % video_id
		test_urls.append(url)

		if len(test_urls) >= 2:
			break

	return test_urls
