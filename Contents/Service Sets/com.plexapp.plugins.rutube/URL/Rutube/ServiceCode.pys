JSON_URL = 'http://rutube.ru/api/play/trackinfo/%s/?format=json'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	if len(html.xpath('//meta[@property="og:video"]')) < 1:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]
	duration = html.xpath('//meta[@property="og:video:duration"]/@content')[0]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb,
		duration = int(duration)*1000
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))],
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	try:
		html = HTML.ElementFromURL(url)
	except Ex.HTTPError, e:
		if e.code == 404:
			raise Ex.MediaExpired

	embed_id = html.xpath('//meta[@property="og:video"]/@content')[0].split('/')[-1]

	json_data = JSON.ObjectFromURL(JSON_URL % embed_id)
	m3u8_url = json_data['video_balancer']['m3u8']

	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=m3u8_url))

####################################################################################################
def TestURLs():

	test_urls = []
	html = HTML.ElementFromURL('http://rutube.ru/')

	for vid in html.xpath('//article[@html-category="editorsfeed"]'):
		url = vid.xpath('.//meta[@itemprop="url"]/@content')[0]
		test_urls.append(url)

		if len(test_urls) > 2:
			break

	return test_urls
