ID_REGEX 	= Regex('/video\?id=([^;]+)')

DETAILS_URL = 'http://www.videoportal.sf.tv/cvis/segment/%s/.json?nohttperr=1;omit_video_segments_validity=1;omit_related_segments=1;nearline_data=1'
THUMB_URL	= 'http://www.videoportal.sf.tv/cvis/videogroup/thumbnail/%s?width=500'

####################################################################################################


def MetadataObjectForURL(url):
	id = ID_REGEX.findall(url)[0]
	details = GetDetails(id)
	return VideoClipObject(
		title = details['description_title'],
		summary = details['description_lead'],
		thumb = THUMB_URL % details['video']['video_group']['uuid'],
		originally_available_at = Datetime.ParseDate(details['time_published']))

####################################################################################################
def MediaObjectsForURL(url):
	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url = url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):
	id = ID_REGEX.findall(url)[0]
	details = GetDetails(id)

	streaming_urls = sorted(details['streaming_urls'], key=lambda k: k['frame_width'], reverse = True)
	if len(streaming_urls) == 0:
		raise Ex.MediaNotAvailable

	stream_url = streaming_urls[0]['url']
	stream_details = stream_url.split('mp4:')

	return IndirectResponse(VideoClipObject, key = RTMPVideoURL(url = stream_details[0], clip = 'mp4:' + stream_details[1]))

####################################################################################################

def GetDetails(id):
	contents = HTTP.Request(DETAILS_URL % id).content
	start = contents.find('{')
	end = contents.rfind('}') +1

	return JSON.ObjectFromString(contents[start:end])
