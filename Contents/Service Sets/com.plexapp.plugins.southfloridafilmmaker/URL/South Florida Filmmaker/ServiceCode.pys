import re

####################################################################################################

def MetadataObjectForURL(url):

    # Attempt to extract the details of the title from the page.
    page = HTML.ElementFromURL(url)

    # Extract the available information
    title = page.xpath("//h2/text()")[0]
    description = page.xpath("//meta[@name='description']")[0].get('content')
    thumb = page.xpath("//link[@rel='image_src']")[0].get('href')
    date = page.xpath("//a[@class='date']/text()")[0]
    date = Datetime.ParseDate(date)
    tags = page.xpath("//meta[@name='keywords']")[0].get('content').split(',')
    tags = [ tag.strip() for tag in tags ]

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb,
        originally_available_at = date,
        tags = tags)

####################################################################################################

def MediaObjectsForURL(url):
    return [
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = "1080",
        optimized_for_streaming = True,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = "1080"))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = "720",
        optimized_for_streaming = True,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = "720"))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = "480",
        optimized_for_streaming = True,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = "480"))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = "sd",
        optimized_for_streaming = True,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url = url, res = "sd"))]
      )
    ]

####################################################################################################
@indirect
def PlayVideo(url, res):

    # Find the external source and the available media objects.
    external_source = GetExternalSource(url)
    media = URLService.MediaObjectsForURL(external_source)

    # Since we are actually implementing an @indirect function, and Vimeo and YouTube also use these,
    # we should be able to select a suitable callback for the requested resolution and simply return
    # it. The client will then continue and invoke the next callback again.
    resolutions = ["1080", "720", "480", "sd"]
    index = resolutions.index(res)
    for resolution_index in range(index, len(resolutions)):
        current_resolution = resolutions[resolution_index]
        for video in media:
            if str(video.video_resolution) == current_resolution:
                return Redirect(video.parts[0].key)

    return Redirect(media[-1].parts[0].key)

####################################################################################################
def GetExternalSource(url):

    page = HTML.ElementFromURL(url)
    
    # Check to see if it's from Vimeo
    vimeo_links = page.xpath("//iframe[contains(@id,'vimeo')]")
    if len(vimeo_links) > 0:
        vimeo_player_link = vimeo_links[0].get('src')
        vimeo_id = re.match(".*//player.vimeo.com/video/(?P<id>[0-9]+).+", vimeo_player_link).groupdict()['id']
        return "http://vimeo.com/" + vimeo_id

    # Check to see if it's from YouTube
    youtube_links = page.xpath("//span[contains(@id, 'youtube')]")
    if len(youtube_links) > 0: 
        return youtube_links[0].xpath("./a")[0].get('href')