RE_EP_DATA = Regex('\/s(?P<season>\d+)e(?P<episode>\d+)\-')
RE_PLAYER = Regex('swfobject.embedSWF\("(http://.+?)",')
RE_URI = Regex('swfobject.embedSWF\("http://.+?/(mgid.+?)",')
RE_AMPERSANDS = Regex('&(?!amp;)')

MRSS_URL = 'http://%s/feeds/video-player/mrss/%s'
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	# Pages of older episodes sometimes redirect to the same URL, creating an endless loop. If we
	# are redirected, first check if the destination URL isn't the same as the input URL.
	try:
		data = HTML.ElementFromURL(url, follow_redirects=False)
	except Ex.RedirectError, e:
		if 'Location' in e.headers:
			if e.headers['Location'] != url:
				data = HTML.ElementFromURL(e.headers['Location'])
			else:
				raise Ex.MediaNotAvailable

	title = data.xpath('//meta[@property="og:title"]/@content')[0].split(' (Season')[0]
	summary = data.xpath('//meta[@name="og:description"]/@content')[0]
	thumb = data.xpath('//meta[@property="og:image"]/@content')[0]

	if '/full-episodes/' in url:
		ep_data = RE_EP_DATA.search(url).groupdict()
		season = ep_data['season']
		index = ep_data['episode']

		return EpisodeObject(
			title = title,
			show = "South Park",
			season = int(season),
			index = int(index),
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)
	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)

####################################################################################################
def MediaObjectsForURL(url):

	if 'clips' in url:
		num_parts = 1
	else:
		num_parts = 4

	return [
		MediaObject(
			parts = [
				PartObject(
					key=Callback(PlayVideo, url=url, bitrate=str(bitrate), index=i)
					) for i in range(num_parts)
			],
			bitrate = bitrate,
			video_resolution = resolution,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		) for bitrate,resolution in [(1200, '720'), (1000, '540'), (800, '480'), (700, '432'), (450, '288')]
	]

####################################################################################################
def PlayVideo(url, bitrate='1200', index=0):

	rtmp_url = None

	content = HTTP.Request(url).content
	uri = RE_URI.search(content)

	if not uri:
		raise Ex.MediaNotAvailable

	host = url.split('/')[2]

	mrss_data = HTTP.Request(MRSS_URL % (host, uri.group(1))).content
	mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	if len(mrss_data.xpath('//item')) < 1:
		raise Ex.MediaNotAvailable

	# Some feeds have an 'intro' item. If this is the case, up the index by 1
	title = mrss_data.xpath('//item/title')[0].text
	if title.startswith('South Park Intro'):
		index = index + 1

	media_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
	if index < len(media_url):
		player_url = media_url[index].get('url')
	else:
		# Return small filler movie for desktop clients
		return Redirect('http://dl.dropbox.com/u/2974527/Plex/filler.mp4')

	try:
		player_data = XML.ElementFromURL(player_url)
	except:
		raise Ex.MediaNotAvailable

	available_bitrates = player_data.xpath('//rendition[@bitrate]/@bitrate')
	if len(available_bitrates) < 1:
		raise Ex.MediaNotAvailable

	closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]
	rtmp_url = player_data.xpath('//rendition[@bitrate="%s"]/src' % closest)[0].text
    

	if rtmp_url:
		if '/viacomspstrm/' in rtmp_url:
			stream_url = rtmp_url.split('/viacomspstrm/')[1]
		elif '/mtvnorigin/' in rtmp_url:
			stream_url = rtmp_url.split('/mtvnorigin/')[1]
		else:
			raise Ex.MediaNotAvailable

		mp4_url = MP4_URL % stream_url

		return Redirect(mp4_url)
	else:
		raise Ex.MediaNotAvailable
