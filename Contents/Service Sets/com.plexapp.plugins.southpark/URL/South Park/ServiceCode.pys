RE_EP_DATA = Regex('\/s(?P<season>\d+)e(?P<episode>\d+)\-')
RE_PLAYER = Regex('swfobject.embedSWF\("(http://.+?)",')
RE_URI = Regex('swfobject.embedSWF\("http://.+?/(mgid.+?)",')
RE_AMPERSANDS = Regex('&(?!amp;)')

MRSS_URL = 'http://%s/feeds/video-player/mrss/%s'
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	# Pages of older episodes sometimes redirect to the same URL, creating an endless loop. If we
	# are redirected, first check if the destination URL isn't the same as the input URL.
	try:
		data = HTML.ElementFromURL(url, follow_redirects=False)
	except Ex.RedirectError, e:
		if 'Location' in e.headers:
			if e.headers['Location'] != url:
				data = HTML.ElementFromURL(e.headers['Location'])
			else:
				raise Ex.MediaNotAvailable

	title = data.xpath('//meta[@property="og:title"]/@content')[0].split(' (Season')[0]
	summary = data.xpath('//meta[@name="og:description"]/@content')[0]
	thumb = data.xpath('//meta[@property="og:image"]/@content')[0]

	if '/full-episodes/' in url:
		ep_data = RE_EP_DATA.search(url).groupdict()
		season = ep_data['season']
		index = ep_data['episode']

		return EpisodeObject(
			title = title,
			show = "South Park",
			season = int(season),
			index = int(index),
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)
	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)

####################################################################################################
@deferred
def MediaObjectsForURL(url):
	
	content = HTTP.Request(url).content
	uri = RE_URI.search(content)

	if not uri:
		raise Ex.MediaNotAvailable

	host = url.split('/')[2]

	mrss_data = HTTP.Request(MRSS_URL % (host, uri.group(1))).content
	mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	guids = mrss_data.xpath('//guid')
	if len(guids) < 1:
		raise Ex.MediaNotAvailable
	
	available_streams = {}
	heights = []
	index = 0
	
	media_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
	
	while index < len(guids):
		player_url = media_url[index].get('url')
		player_data = XML.ElementFromURL(player_url)
		for rendition in player_data.xpath('//rendition'):
			bitrate = rendition.get('bitrate')
			height = rendition.get('height')
			duration = rendition.get('duration')
			rtmp_url = rendition.xpath('./src')[0].text
			if '/viacomspstrm/' in rtmp_url:
				stream_url = rtmp_url.split('/viacomspstrm/')[1]
			elif '/mtvnorigin/' in rtmp_url:
				stream_url = rtmp_url.split('/mtvnorigin/')[1]
			else:
				raise Ex.MediaNotAvailable
			mp4_url = MP4_URL % stream_url
			if unicode(height) in available_streams.keys():
				available_streams[unicode(height)][unicode(index)] = {"bitrate":bitrate,"mp4_url":mp4_url,"duration":duration}
			else:
				available_streams[unicode(height)] = {}
				available_streams[unicode(height)][unicode(index)] = {"bitrate":bitrate,"mp4_url":mp4_url,"duration":duration}
			if height not in heights:
				heights.append(height)

		index += 1

	heights.reverse()

	media_objects = []

	# check that we're getting an MP4 rather than the occassional FLV
	headers = HTTP.Request(available_streams[unicode(height)][unicode(0)]["mp4_url"]).headers
	contentType = headers['content-type']

	if "mp4" in contentType.lower():
		MediaObject.container = Container.MP4
		MediaObject.video_codec = VideoCodec.H264
		MediaObject.audio_codec = AudioCodec.AAC
	else:
		pass

	for height in heights:
		i = 0
		parts = []
		while i < len(guids):
			parts.append(
				PartObject(key=available_streams[unicode(height)][unicode(i)]["mp4_url"], duration=int(available_streams[unicode(height)][unicode(i)]["duration"])*1000)
			)
			i += 1
		media_objects.append(
			MediaObject(
				parts=parts,
				# June 9, 2014 - The line below is necessary due to an issue with some clients not copying the media attributes for audio to the streams. 
				# Not including this line causes the Roku to transcode videos. This issue should be fixed in future versions of the client and/or framework.
				audio_codec = AudioCodec.AAC,
				bitrate = int(available_streams[unicode(height)][unicode(0)]["bitrate"]),
				video_resolution = int(height)
			)
		)
	return media_objects
