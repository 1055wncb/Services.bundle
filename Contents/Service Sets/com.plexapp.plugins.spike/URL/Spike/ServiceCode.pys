NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

MRSS_URL = 'http://www.spike.com/feeds/mrss/?uri=%s&ref=www.spike.com'
FEED_URL = 'http://www.spike.com/feeds/mediagen/?uri=%s'
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

RE_AMPERSANDS = Regex('&(?!amp;)')


MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True
####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	except:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0]
	try:
		duration = int(html.xpath('//meta[@itemprop="duration"]/@content')[0])
	except:
		video_player_box = html.xpath('//div[@id="video_player_box"]')
		if len(video_player_box) < 1:
			raise Ex.MediaExpired

		uri = video_player_box[0].get('data-mgid')

		mrss_data = HTTP.Request(MRSS_URL % uri).content
		mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
		mrss_data = XML.ElementFromString(mrss_data)

		media_urls = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
		duration = 0

		for segment in media_urls:
			duration = float(duration) + float(segment.get('duration'))

		duration = int(duration*1000)

	if '/full-episodes/' in url or '/episodes/' in url:
		show_title = html.xpath('//title')[0].text.split(' | ')[0]

		try:
			air_date = html.xpath('//meta[@itemprop="datePublished"]/@content')[0]
			originally_available_at = Datetime.ParseDate(air_date).date()
		except:
			originally_available_at = None

		return EpisodeObject(
			show = show_title,
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

	elif '/video-clips/' in url:

		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)

	else:
		raise Ex.MediaNotAvailable

####################################################################################################
@deferred
def MediaObjectsForURL(url):
	try: 
		data = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	uri = data.xpath('//div[@id="video_player_box"]/@data-mgid')[0]

	mrss_data = HTTP.Request(MRSS_URL % uri).content
	mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)
	
	guids = mrss_data.xpath('//guid')
	if len(guids) < 1:
		raise Ex.MediaNotAvailable
	available_streams = {}
	bitrates = []
	index = 0

	while index < len(guids):
		segment_uri = mrss_data.xpath('//guid')[index].text
		player_data = XML.ElementFromURL(FEED_URL % segment_uri)
		for rendition in player_data.xpath('//rendition'):
			bitrate = rendition.get('bitrate')
			height = rendition.get('height')
			duration = rendition.get('duration')
			rtmp_url = rendition.xpath('./src')[0].text
			if '/mtvnorigin/' in rtmp_url:
				stream_url = rtmp_url.split('/mtvnorigin/')[1]
			elif '/viacomspikestrm/' in rtmp_url:
				stream_url = rtmp_url.split('/viacomspikestrm/')[1]
			else:
				raise Ex.MediaNotAvailable
			mp4_url = MP4_URL % stream_url
			if unicode(bitrate) in available_streams.keys():
				available_streams[unicode(bitrate)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}
			else:
				available_streams[unicode(bitrate)] = {}
				available_streams[unicode(bitrate)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}
			if bitrate not in bitrates:
				bitrates.append(bitrate)

		index += 1

	bitrates.reverse()

	media_objects = []
	
	# check that we're getting an MP4 rather than the occassional FLV
	headers = HTTP.Request(available_streams[unicode(bitrate)][unicode(0)]["mp4_url"]).headers
	contentType = headers['content-type']
	
	if "mp4" in contentType.lower():
		MediaObject.container = Container.MP4
		MediaObject.video_codec = VideoCodec.H264
		MediaObject.audio_codec = AudioCodec.AAC
	else:
		pass

	for bitrate in bitrates:
		i = 0
		parts = []
		while i < len(guids):
			parts.append(
				PartObject(key=available_streams[unicode(bitrate)][unicode(i)]["mp4_url"], duration=int(available_streams[unicode(bitrate)][unicode(i)]["duration"])*1000)
			)
			i += 1
		media_objects.append(
			MediaObject(
				parts=parts,
				# June 9, 2014 - The line below is necessary due to an issue with some clients not copying the media attributes for audio to the streams. 
				# Not including this line causes the Roku to transcode videos. This issue should be fixed in future versions of the client and/or framework.
				audio_codec = AudioCodec.AAC,
				bitrate = int(bitrate),
				video_resolution = int(available_streams[unicode(bitrate)][unicode(0)]["height"])
			)
		)
	return media_objects
