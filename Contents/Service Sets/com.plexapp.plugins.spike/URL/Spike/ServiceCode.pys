NAMESPACES = {"media":"http://search.yahoo.com/mrss/"}

MRSS_URL = "http://udat.mtvnservices.com/service1/dispatch.htm?feed=player_arc_feed&mgid=%s"
FEED_URL = 'http://www.spike.com/feeds/mediagen/?uri=%s'
MP4_URL = "http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s"

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	page_title = html.xpath('//title')[0].text

	title = html.xpath('//meta[@property="og:title"]')[0].get('content')
	summary = html.xpath('//meta[@property="og:description"]')[0].get('content')
	thumb = html.xpath('//meta[@property="og:image"]')[0].get('content')

	if '/full-episodes/' in url:
		show_title = html.xpath('//title')[0].text.split(' | ')[0]
		try:
			air_date = html.xpath('//meta[@itemprop="datePublished"]')[0].get('content')
			originally_available_at = Datetime.ParseDate(air_date).date()
		except:
			originally_available_at = None

		return EpisodeObject(
			show = show_title,
			title = title,
			summary = summary,
			thumb = thumb,
			originally_available_at = originally_available_at
		)

	elif '/video-clips/' in url:

		return VideoClipObject(
			title = title,
			summary = summary,
			thumb = thumb
		)

	else:
		return None

####################################################################################################
def MediaObjectsForURL(url):

	if '/full-episodes/' in url:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=3))
					],
				bitrate = 3500,
				container = Container.MP4,
				video_resolution = '720',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=3))
					],
				bitrate = 2200,
				container = Container.MP4,
				video_resolution = '540',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=3))
					],
				bitrate = 1700,
				container = Container.MP4,
				video_resolution = '432',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=3))
					],
				bitrate = 1200,
				container = Container.MP4,
				video_resolution = '360',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=3))
					],
				bitrate = 750,
				container = Container.MP4,
				video_resolution = '288',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
				),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="450", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="450", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="450", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="450", index=3))
					],
				bitrate = 450,
				container = Container.MP4,
				video_resolution = '252',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
				),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=3))
					],
				bitrate = 400,
				container = Container.MP4,
				video_resolution = '216',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="150", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="150", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="150", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="150", index=3))
					],
				bitrate = 150,
				container = Container.MP4,
				video_resolution = '216',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	else:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0))
					],
				bitrate = 3500,
				container = Container.MP4,
				video_resolution = '720',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0))
					],
				bitrate = 2200,
				container = Container.MP4,
				video_resolution = '540',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0))
					],
				bitrate = 1700,
				container = Container.MP4,
				video_resolution = '432',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0))
					],
				bitrate = 1200,
				container = Container.MP4,
				video_resolution = '360',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=0))
					],
				bitrate = 750,
				container = Container.MP4,
				video_resolution = '288',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
				),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="450", index=0))
					],
				bitrate = 450,
				container = Container.MP4,
				video_resolution = '252',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
				),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=0)),
					],
				bitrate = 400,
				container = Container.MP4,
				video_resolution = '216',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="150", index=0))
					],
				bitrate = 150,
				container = Container.MP4,
				video_resolution = '216',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

####################################################################################################
def PlayVideo(url, bitrate='1700', index=0):

	BITRATES = ['150', '400', '450', '750', '1200', '1700', '2200', '3500']

	data = HTML.ElementFromURL(url)
	uri = data.xpath('//div[@id="video_player_box"]')[0].get('data-mgid')
	
	mrss_data = XML.ElementFromURL(MRSS_URL % uri)
	
	segment_uri = mrss_data.xpath('//guid')[index].text
	
	player_data = XML.ElementFromURL(FEED_URL % segment_uri)
	
	try:
		rtmp_url = player_data.xpath('//rendition[@bitrate="'+bitrate+'"]/src')[0].text
	except:
		rtmp_url = ''
		index = BITRATES.index(bitrate)
		while index > -1:
			try:
				rtmp_url = player_data.xpath('//rendition/src')[index].text
				break
			except:
				index = index - 1

	stream_url = rtmp_url.split('/mtvnorigin/')[1]
	mp4_url = MP4_URL % stream_url

	return Redirect(mp4_url)

####################################################################################################
def TestURLs():
	test_urls = []
	
	data1 = HTML.ElementFromURL('http://www.spike.com/video-clips/')
	test_urls.append(data1.xpath('//div[@class="block b_video_orange"]//h3/a')[0].get('href'))
	
	data2 = HTML.ElementFromURL('http://www.spike.com/full-episodes/')
	test_urls.append(data2.xpath('//div[@class="module latest_full_episodes"]//h3/a')[0].get('href'))
	
	return test_urls
