NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

MRSS_URL = 'http://www.spike.com/feeds/mrss/?uri=%s&ref=www.spike.com'
FEED_URL = 'http://www.spike.com/feeds/mediagen/?uri=%s'
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'
RE_AMPERSANDS = Regex('&(?!amp;)')

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	except:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0]
	try:
		duration = int(html.xpath('//meta[@itemprop="duration"]/@content')[0])
	except:
		video_player_box = html.xpath('//div[@id="video_player_box"]')
		if len(video_player_box) < 1:
			raise Ex.MediaExpired

		uri = video_player_box[0].get('data-mgid')

		mrss_data = HTTP.Request(MRSS_URL % uri).content
		mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
		mrss_data = XML.ElementFromString(mrss_data)

		media_urls = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
		duration = 0

		for segment in media_urls:
			duration = float(duration) + float(segment.get('duration'))

		duration = int(duration*1000)

	if '/full-episodes/' in url or '/episodes/' in url:
		show_title = html.xpath('//title')[0].text.split(' | ')[0]

		try:
			air_date = html.xpath('//meta[@itemprop="datePublished"]/@content')[0]
			originally_available_at = Datetime.ParseDate(air_date).date()
		except:
			originally_available_at = None

		return EpisodeObject(
			show = show_title,
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

	elif '/video-clips/' in url:

		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)

	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def MediaObjectsForURL(url):

	if '/full-episodes/' in url or '/episodes/' in url:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=4))
				],
				bitrate = 3500,
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=4))
				],
				bitrate = 2200,
				video_resolution = '540',
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=4))
				],
				bitrate = 1700,
				video_resolution = '432',
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=4))
				],
				bitrate = 1200,
				video_resolution = '360',
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=4))
				],
				bitrate = 750,
				video_resolution = '288',
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	else:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0))
				],
				bitrate = 3500,
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0))
				],
				bitrate = 2200,
				video_resolution = '540',
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0))
				],
				bitrate = 1700,
				video_resolution = '432',
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0))
				],
				bitrate = 1200,
				video_resolution = '360',
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=0))
				],
				bitrate = 750,
				video_resolution = '288',
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

####################################################################################################
def PlayVideo(url, bitrate='1700', index=0):

	BITRATES = ['750', '1200', '1700', '2200', '3500']

	try: 
		data = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	uri = data.xpath('//div[@id="video_player_box"]/@data-mgid')[0]

	mrss_data = HTTP.Request(MRSS_URL % uri).content
	mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	guids = mrss_data.xpath('//guid')

	if len(guids) < 1:
		raise Ex.MediaNotAvailable

	if index >= len(guids):
		ad_index = len(guids) - index
		ad_segment_uri = mrss_data.xpath('//guid')[ad_index].text
		referer = 'http://media.mtvnservices.com/player/prime/mediaplayerprime.2.3.7.swf?uri=%s&type=network&ref=www.spike.com&geo=US&group=entertainment&network=None&device=Other'
		headers = {'Referer':referer % ad_segment_uri}
		post_data = '<adRequest profile="82125:MTVN_live" version="1" networkId="82125"><customDistributor /><capabilities><supportsSlotTemplate /><explicitVideoTracking /><expectMultipleCreativeRenditions /><supportsAdUnitInMultipleSlots /><supportsSlotCallback /><supportsFallbackAds /><requiresRendererManifest /><requiresVideoCallbackUrl /></capabilities><visitor customId="4ed3800b-c091-6712-9216-114c7ca250a1" caller="AS3-3.1.0-r4736-1005190341"><httpHeaders><httpHeader name="x-flash-version" value="11,6,602,180" /><httpHeader name="referer" value="http://www.spike.com/video-clips" /></httpHeaders><bandwidthInfo bandwidth="2237" /></visitor><keyValues><keyValue value="VN999" key="A1" /><keyValue value="%s" key="playlist" /><keyValue value="D" key="demo" /><keyValue value="T" key="demo" /><keyValue value="2966" key="demo" /><keyValue value="2907" key="demo" /><keyValue value="2905" key="demo" /><keyValue value="850" key="demo" /><keyValue value="844" key="demo" /><keyValue value="827" key="demo" /><keyValue value="790" key="demo" /><keyValue value="777" key="demo" /><keyValue value="775" key="demo" /><keyValue value="774" key="demo" /></keyValues><siteSection customId="Spike_Videos_Clips" siteSectionNetworkId="82125"><videoPlayer><videoAsset videoAssetNetworkId="82125" duration="180" customId="%s" autoPlay="true" mediaLocation="http://media.mtvnservices.com/%s"><adSlots defaultSlotProfile="82125:MTVN_live" /></videoAsset><adSlots /></videoPlayer><adSlots /></siteSection></adRequest>'
		post_data = post_data % (ad_segment_uri, ad_segment_uri, ad_segment_uri)
		ad_data = HTTP.Request('http://140cc.v.fwmrm.net/ad/p/1?', headers = headers, data = post_data).content
		ad_xml = XML.ElementFromString(ad_data)
		ad_url = ad_xml.xpath('//asset[@mimeType="video/mp4"]/@url')[0]
		return Redirect(ad_url)

	segment_uri = mrss_data.xpath('//guid')[index].text
	player_data = XML.ElementFromURL(FEED_URL % segment_uri)

	try:
		rtmp_url = player_data.xpath('//rendition[@bitrate="'+bitrate+'"]/src')[0].text
	except:
		rtmp_url = ''
		index = BITRATES.index(bitrate)
		while index > -1:
			try:
				rtmp_url = player_data.xpath('//rendition/src')[index].text
				break
			except:
				index = index - 1

	if rtmp_url == '':
		raise Ex.MediaGeoblocked

	if '/mtvnorigin/' in rtmp_url:
		stream_url = rtmp_url.split('/mtvnorigin/')[1]
	elif '/viacomspikestrm/' in rtmp_url:
		stream_url = rtmp_url.split('/viacomspikestrm/')[1]
	else:
		raise Ex.MediaNotAvailable
	
	mp4_url = MP4_URL % stream_url

	return Redirect(mp4_url)

####################################################################################################
def TestURLs():

	test_urls = []

	data1 = HTML.ElementFromURL('http://www.spike.com/video-clips/')
	test_urls.append(data1.xpath('//div[@class="block b_video_orange"]//h3/a/@href')[0])

	data2 = HTML.ElementFromURL('http://www.spike.com/full-episodes/')
	test_urls.append(data2.xpath('//div[@class="module latest_full_episodes"]//h3/a/@href')[0])

	return test_urls
