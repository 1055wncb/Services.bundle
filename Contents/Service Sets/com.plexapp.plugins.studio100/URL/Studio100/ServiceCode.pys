BASE_URL = 'http://www.studio100tv.be'
VIDEO_FILE = '%s/videofile/%%s' % BASE_URL

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)
	title = html.xpath('//title/text()')

	if len(title) < 1:
		raise Ex.MediaNotAvailable

	try:
		thumb = html.xpath('//link[@rel="image_src"]/@href')[0].replace('/160x90', '/640x360')
	except:
		thumb = ''

	return VideoClipObject(
		title = title[0],
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key = Callback(PlayVideo, url=url)
				)
			],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	link = url.rsplit('/', 1)[1]
	video = VIDEO_FILE % link

	return IndirectResponse(VideoClipObject, key=video)
