def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	# Attempt to extract the details of the title from the page.
	page = HTML.ElementFromURL(url)

	# The page only currently contains the title and a brief description
	title = page.xpath('//h1/a[@class="active"]/text()')[0]
	description = page.xpath('//div[@class="stv-primary"]/div[@class="inner-container"]/p/text()')[0]
	thumb = page.xpath('//meta[@property="og:image"]/@content')[0]

	try: date = Datetime.ParseDate(page.xpath('//div[@class="video-player"]/..//p[@class="meta"]/text()')[0])
	except: date = None

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		originally_available_at = date
	)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	html = HTML.ElementFromURL(url)
	player_key = html.xpath('//param[@name="playerKey"]/@value')
	video_player = html.xpath('//param[@name="@videoPlayer"]/@value')

	if len(player_key) > 0 and len(video_player) > 0:
		return URLService.MediaObjectsForURL('http://c.brightcove.com/services/viewer/htmlFederated?playerKey=%s&dynamicStreaming=true&%%40videoPlayer=%s' % (player_key[0], video_player[0]))
