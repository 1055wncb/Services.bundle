BASE_URL = 'http://www.svtplay.se'

####################################################################################################
def NormalizeURL(url):

	if not '/video/' in url:
		try:
			url = HTML.ElementFromURL(url).xpath('//meta[@property="og:url"]/@content')[0]
		except:
			pass

	return url

####################################################################################################
def MetadataObjectForURL(url):

	try:
		page = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	# Test if this page contains video
	json_url = page.xpath('//a[@id="player"]/@data-json-href')
	if len(json_url) < 1:
		return None

	show = None
	title = page.xpath('//meta[@property="og:title"]/@content')[0].split(' | ')[0].replace('&amp;', '&')
	title = String.DecodeHTMLEntities(title)

	if ' - ' in title:
		(show, title) = title.split(' - ', 1)

	summary = page.xpath('//meta[@property="og:description"]/@content')[0].replace('&amp;', '&')
	summary = String.DecodeHTMLEntities(summary)
	thumb = page.xpath('//meta[@property="og:image"]/@content')[0].replace('/small/', '/large/')

	try:
		air_date = page.xpath('//div[@class="playVideoInfo"]//time/@datetime')[0].split('T')[0]
		air_date = Datetime.ParseDate(air_date).date()
	except:
		air_date = None

	try:
		duration = page.xpath('//div[@class="playVideoInfo"]//span/strong[contains(text(), "ngd:")]/following-sibling::text()')[0].strip().split(' ')[0]
		duration = int(duration) * 60 * 1000 #millisecs
	except:
		duration = None

	if show:
		return EpisodeObject(
			show = show,
			title = title,
			summary = summary,
			duration = duration,
			thumb = thumb,
			originally_available_at = air_date
		)
	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = thumb,
			originally_available_at = air_date
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
			],
			video_resolution = '480',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def PlayVideo(url, bitrate=None):

	try:
		page = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	video_url = None
	json_url = page.xpath('//a[@id="player"]/@data-json-href')
	if len(json_url) < 1:
		raise Ex.MediaNotAvailable

	json_url = '%s%s?output=json' % (BASE_URL, json_url[0])
	json_obj = JSON.ObjectFromURL(json_url)

	for video in json_obj['video']['videoReferences']:
		if 'playerType' in video and video['playerType'] == 'ios':
			video_url = video['url']
			break

	if not video_url:
		raise Ex.MediaNotAvailable

	return Redirect(video_url)
