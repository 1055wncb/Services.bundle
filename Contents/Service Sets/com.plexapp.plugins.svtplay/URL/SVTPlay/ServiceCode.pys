BASE_URL = 'http://www.svtplay.se'
BASE_OA_URL = 'http://www.oppetarkiv.se'
import re

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    try:
        page = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    # Test if this page contains video
    json_url = page.xpath('//a[@id="player"]/@data-json-href')
    if len(json_url) < 1:
        return None

    show = None
    title = page.xpath('//meta[@property="og:title"]/@content')[0].split(' | ')[0].replace('&amp;', '&')
    title = String.DecodeHTMLEntities(title)

    if ' - ' in title:
        (show, title) = title.split(' - ', 1)

    summary = page.xpath('//meta[@property="og:description"]/@content')[0].replace('&amp;', '&')
    summary = String.DecodeHTMLEntities(summary)
    thumb = page.xpath('//meta[@property="og:image"]/@content')

    if len(thumb) < 1:
        thumb = None
    else:
        thumb = thumb[0].replace('/small/', '/large/')

    try:
        air_date = page.xpath('//div[@class="playBoxConnectedToVideoMain"]//time/@datetime')[0].split('T')[0]
        air_date = Datetime.ParseDate(air_date).date()
    except:
        air_date = None

    # Airdate for Ã–ppet Arkiv
    if air_date == None:
        try:
            air_date = page.xpath("//span[@class='svt-video-meta']//time/@datetime")[0].split('T')[0]
            air_date = Datetime.ParseDate(air_date).date()
        except:
            air_date = None

    try:
        duration = page.xpath("//a[@id='player']/@data-length")
        duration = int(duration[0]) * 1000
    except:
        duration = None
        pass

    if show:
        return EpisodeObject(
                show = show,
                title = title,
                summary = summary,
                duration = duration,
                thumb = thumb,
                originally_available_at = air_date
                )
    else:
        return VideoClipObject(
                title = title,
                summary = summary,
                duration = duration,
                thumb = thumb,
                originally_available_at = air_date
                )

####################################################################################################
def MediaObjectsForURL(url):
    return [
            MediaObject(
                parts = [
                    PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
                    ],
                audio_channels = 2,
                optimized_for_streaming = True
                )
            ]

####################################################################################################

def getVideoUrls(url):
    try:
        page = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    ios_url = None
    flash_url = None
    json_url = page.xpath('//a[@id="player"]/@data-json-href')
    if len(json_url) < 1:
        raise Ex.MediaNotAvailable

    base_url = BASE_URL
    if 'oppetarkiv' in url:
        base_url = BASE_OA_URL

    json_url = '%s%s?output=json' % (base_url, json_url[0])
    json_obj = JSON.ObjectFromURL(json_url)

    for video in json_obj['video']['videoReferences']:
        if 'playerType' in video and video['playerType'] == 'ios':
            ios_url = video['url']
        elif 'playerType' in video and video['playerType'] == 'flash':
            flash_url = video['url']

    if not ios_url and not flash_url:
        raise Ex.MediaNotAvailable
    urls = {}
    if ios_url:
        urls['ios'] = ios_url
    if flash_url:
        urls['flash'] = flash_url
    return urls

def PlayVideo(url, bitrate=None):
    urls = getVideoUrls(url)
    if 'ios' in urls:
        stream = selectBestHLSStream(urls['ios'])
        return Redirect(HTTPLiveStreamURL(stream))
    if 'flash' in urls:
        pass

def selectBestHLSStream(videoURL):
    streams = getHLSStreams(videoURL)
    sortedStreams = sorted(streams, key=lambda stream: stream["bitrate"], reverse=True)
    return sortedStreams[0]['url']

def getHLSStreams(hlsUrl):
    streams = []
    m3u8 = ""

    try:
        request = HTTP.Request(url=hlsUrl, immediate=True)
        request.load()
        m3u8 = request.content
    except:
        return streams

    streamSpecLines = m3u8.splitlines()

    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in streamSpecLines:
        if "BANDWIDTH" in line:
            bwm = re.search('(?<=BANDWIDTH=)[0-9]+', line)
            stream = {}
            stream["bitrate"] = int(bwm.group(0))

            if "RESOLUTION" in line:
                rnm = re.search('(?<=RESOLUTION=)[0-9]+x[0-9]+', line)
                stream["resolution"] = int(rnm.group(0).split("x")[1])
            else:
                stream["resolution"] = 0

        elif ".m3u8" in line:
            stream["url"] = line
            streams.append(stream)

    return streams
