BASE_URL = "http://www.svtplay.se"
SWF_TAG = "PLAYER_SWF="
SWF_PLAYER = BASE_URL + "/public/swf/video/svtplayer-2012.11.swf"
QUAL_HD = 2400
QUAL_HIGH = 1400
QUAL_MED = 850
QUAL_LOW = 320
BITRATES = [QUAL_HD, QUAL_HIGH, QUAL_MED, QUAL_LOW]
####################################################################################################

def MetadataObjectForURL(url):
    # Request the page
    page = HTML.ElementFromURL(url)
    show = page.xpath("//div[@class='playVideoBox']/h1/text()")[0]
    title = page.xpath("//div[@class='playVideoInfo']//h1/text()")[0]
    description = page.xpath("//div[@class='playVideoInfo']//p/text()")[0]
    try:
        air_date = page.xpath("//div[@class='playVideoInfo']//time")[0].get("datetime")
        air_date = air_date.split('+')[0] #cut off timezone info as python can't parse this
        air_date = Datetime.ParseDate(air_date)
    except:
        Log.Exception("Error converting airdate: " + air_date)
        air_date = Datetime.Now()

    duration = page.xpath("//div[@class='playVideoInfo']//span//strong/../text()")[3].split()[0]
    duration = int(duration) * 60 * 1000 #millisecs

    thumb =  page.xpath("//div[@class='playVideoBox']//a[@id='player']//img/@src")[0]

    return EpisodeObject(
            show = show,
            title = title,
            summary = description,
            duration = duration,
            thumb = thumb,
            art = thumb,
            originally_available_at = air_date)

####################################################################################################
def MediaObjectsForURL(url):
    mediaObjs = []

    return [
        MediaObject(
            video_resolution = "1280",
            audio_channels = 2,
            bitrate = QUAL_HD,
            parts = [PartObject(key = Callback(PlayVideo, url=url, bitrate=QUAL_HD))]),
        MediaObject(
            video_resolution = "1024",
            audio_channels = 2,
            bitrate = QUAL_HIGH,
            parts = [PartObject(key = Callback(PlayVideo, url=url, bitrate=QUAL_HIGH))]),
        MediaObject(
            video_resolution = "640",
            audio_channels = 2,
            bitrate = QUAL_MED,
            parts = [PartObject(key = Callback(PlayVideo, url=url, bitrate=QUAL_MED))]),
        MediaObject(
            video_resolution = "640",
            audio_channels = 2,
            bitrate = QUAL_LOW,
            parts = [PartObject(key = Callback(PlayVideo, url=url, bitrate=QUAL_LOW))]),
        ]

####################################################################################################
@indirect
def PlayVideo(url, bitrate):
    JSON_ARG = "?output=json"
    playerurl = getPlayerUrl(url)
    page = HTML.ElementFromURL(url)
    jsonurl = page.xpath("//a[@id='player']//@data-json-href")[0]
    videos = JSON.ObjectFromURL(BASE_URL + jsonurl + JSON_ARG)

    d = extractContentURLS(videos)
    rtmpurl = getContentBitrateURLs(d, bitrate)

    return IndirectResponse(VideoClipObject, key = RTMPVideoURL(url=rtmpurl, swf_url=playerurl))

####################################################################################################
def NormalizeURL(url):
    return url
####################################################################################################
def extractContentURLS(json):
    d = dict()
    for bitrate in BITRATES:
        for v in json["video"]["videoReferences"]:
            if(int(v["bitrate"]) == int(bitrate)): 
                if(v["url"].find("rtmp") > -1):
                    d[bitrate] = v["url"]
                    break;
    return d
 
def getContentBitrateURLs(d, bitrate):
    try:
        url = d[bitrate]
        return url
    except KeyError:
        pass 

   #Bitrate not found, try fallback
    if(bitrate > QUAL_HIGH):
        try:
            url = d[QUAL_HIGH]
            return url
        except KeyError:
            pass
    if(bitrate > QUAL_MED):
        try: 
            url = d[QUAL_MED]
            return url
        except KeyError:
            pass
    if(bitrate >= QUAL_LOW):
        try:
            url = d[QUAL_LOW]
            return url
        except KeyError:
            pass
    
    Log.Exception("No stream found") 
    return ""

def getPlayerUrl(url):
    page = HTML.ElementFromURL(url)
    jsonurl = page.xpath("//a[@id='player']//@data-json-href")[0]
    jspage = None
    for sp in page.xpath("//script/@src"):
        Log("sp:"  + sp)
        if(sp.find("script-built") > -1):
            jspage = HTTP.Request(BASE_URL + sp).content
            ind = jspage.rfind(SWF_TAG)
            ext = jspage.find(";", ind)
            url = jspage[ind + len(SWF_TAG): ext]
            url = url[1:-1]
            url = BASE_URL + url
            Log("Player url: " + url)
            return url

    Log(" no player found, using fallback: " + SWF_PLAYER)
    return SWF_PLAYER


