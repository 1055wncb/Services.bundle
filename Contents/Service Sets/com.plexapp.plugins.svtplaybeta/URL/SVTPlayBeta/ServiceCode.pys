import re
import datetime

BASE_URL = "http://beta.svtplay.se"

####################################################################################################

def MetadataObjectForURL(url):
    try:
        # Request the page
        page = HTML.ElementFromURL(url)
        show = page.xpath("//div[@class='playVideoBox']/h1/text()")[0]
        title = page.xpath("//div[@class='playVideoInfo']//h1/text()")[0]
        description = page.xpath("//div[@class='playVideoInfo']//p/text()")[0]

        try:
            air_date = page.xpath("//div[@class='playVideoInfo']//time")[0].get("datetime")
            air_date = air_date.split('+')[0] #cut off timezone info as python can't parse this
            air_date = datetime.datetime.strptime(air_date, '%Y-%m-%dT%H:%M')
        except:
            Log.Exception("Error converting airdate: " + air_date)

        duration = page.xpath("//div[@class='playVideoInfo']//span//strong/../text()")[3].split()[0]
        duration = int(duration) * 60 * 1000 #millisecs

        thumb =  page.xpath("//div[@class='playVideoBox']//a[@id='player']//img/@src")[0]

        return EpisodeObject(
                show = show,
                title = title,
                summary = description,
                duration = duration,
                thumb = thumb,
                art = thumb,
                originally_available_at = air_date)

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################
def MediaObjectsForURL(url):
    JSON_ARG = "?output=json"
    mediaObjs = []

    # Request the page
    page = HTML.ElementFromURL(url)
    jsonurl = page.xpath("//a[@id='player']//@data-json-href")[0]
    videos = JSON.ObjectFromURL(BASE_URL + jsonurl + JSON_ARG)
    for v in videos["video"]["videoReferences"]:
        if v["url"].find("rtmp") > -1:
            mo = MediaObject(
                bitrate = int(v["bitrate"]),
                parts = [PartObject(key = Callback(PlayVideo, rtmp_url = v["url"]))]
                )
            mediaObjs.append(mo)

    return mediaObjs

####################################################################################################
def NormalizeURL(url):
    return url
####################################################################################################

@indirect
def PlayVideo(rtmp_url):
    return IndirectResponse(key = RTMPVideoUrl(url=rtmp_url))
