import re
import datetime


####################################################################################################

def MetadataObjectForURL(url):
    try:

        # Request the page
        page = HTML.ElementFromURL(url)
        show = page.xpath("//div[@class='playVideoBox']/h1/text()")[0]
        title = page.xpath("//div[@class='playVideoInfo']//h1/text()")[0]
        description = page.xpath("//div[@class='playVideoInfo']//p/text()")[0]

        try:
            air_date = page.xpath("//div[@class='playVideoInfo']//time")[0].get("datetime")
            air_date = air_date.split('+')[0] #cut off timezone info as python can't parse this
            air_date = datetime.datetime.strptime(air_date, '%Y-%m-%dT%H:%M')
        except:
            Log.Exception("Error converting airdate: " + air_date)

        duration = page.xpath("//div[@class='playVideoInfo']//span//strong/../text()")[3].split()[0]
        duration = int(duration) * 60 * 1000 #millisecs

        thumb =  page.xpath("//div[@class='playVideoBox']//a[@id='player']//img/@src")[0]

        return EpisodeObject(
                show = show,
                title = title,
                summary = description,
                duration = duration,
                thumb = thumb,
                art = thumb,
                originally_available_at = air_date)

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    # Request the page
    page = HTML.ElementFromURL(url)

####################################################################################################
def NormalizeURL(url):
    return url
####################################################################################################

def PlayVideo(rtmp_url):
    rtmp_stream_details = rtmp_url.split('_definst_')
    return Redirect(RTMPVideoItem(rtmp_stream_details[0], clip = "mp4:" + rtmp_stream_details[1]))
