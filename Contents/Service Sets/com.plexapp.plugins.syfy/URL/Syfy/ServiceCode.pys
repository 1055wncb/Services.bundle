NAMESPACES = {"a":"http://www.w3.org/2005/SMIL21/Language"}
SWF_URL="http://www.syfy.com/_utils/video/codebase/pdk/swf/flvPlayer.swf"

#########################################################################################
def NormalizeURL(url):

	return url

#########################################################################################
def MetadataObjectForURL(url):

	try:
		smil = GetSMIL(url)['entries'][0]
	except:
		return None

	title = smil['title']
	summary = smil['description']
	thumb = smil['media$thumbnails'][0]['plfile$url']
	duration = int(smil['media$content'][0]['plfile$duration'])

	return EpisodeObject(
		title = title,
		summary = summary,
		thumb = thumb,
		duration = duration
	)

#########################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = Container.MP4,
			video_resolution = "720",
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

#########################################################################################
def TestURLs():

	test_urls= []
	data = JSON.ObjectFromURL("http://feed.theplatform.com/f/hQNl-B/2g1gkJT0urp6/?form=json&fields=guid,:fullEpisode&byCustomValue={fullEpisode}{true}")

	for item in data['entries']:
		url = "http://www.syfy.com/videos/vid:" + item['guid']
		test_urls.append(url)
		if len(test_urls) > 2:
			break

	return test_urls

#########################################################################################
def GetSMIL(url):

	guid = url.split(':')[2]
	infourl = "http://feed.theplatform.com/f/hQNl-B/2g1gkJT0urp6/?form=json&fields=guid,title,description,:subtitle,content,thumbnails,categories,:fullEpisode&fileFields=url,duration,width,height,contentType,fileSize,format&byGuid="+guid

	return JSON.ObjectFromURL(infourl)

#########################################################################################
def GetVideoSMIL(url):

	data = GetSMIL(url)
	smil_url = None

	# only adding in the first video (usually 720p if it's MPEG4), provider is very wishy-washy on actually having
	# other resolutions in place and working, even though they advertise a lot of them ...
	# many times the others advertised don't exist when it comes down to actually trying to play them ...
	for item in data['entries']:
		for v in item['media$content']:
			if (v['plfile$format'] == "MPEG4" and v['plfile$height'] == 720) or v['plfile$format'] == "FLV":
				smil_url = v['plfile$url']
				break

		if smil_url:
			break

	if smil_url:
		smil = XML.ElementFromURL(smil_url)
		return smil
	else:
		raise Ex.MediaNotAvailable

#########################################################################################
@indirect
def PlayVideo(url):

	smil = GetVideoSMIL(url)

	if len(smil.xpath('//*[contains(@title, "Geographic Restriction")]')) > 0:
		raise Ex.MediaGeoblocked

	video_url = smil.xpath("//a:video[1]/@src", namespaces=NAMESPACES)[0]
	if video_url.endswith('.mp4'):
		return IndirectResponse(VideoClipObject, key=video_url)
	elif video_url.endswith('.flv'):
		url = smil.xpath("//a:meta/@base", namespaces=NAMESPACES)[0]+video_url
		return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=url, swf_url=SWF_URL))
		
		