EPISODE_DATA = 'http://teamcoco.com/cvp/2.0/%s.xml'
RE_BANDWIDTH = Regex('BANDWIDTH=(\d+)')
RE_JSON = Regex('var player.+"preload":"([^"]+)"')

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	if '/full-episode-' in url:

		video_id = GetVideoId(url)
		xml = XML.ElementFromURL(EPISODE_DATA % (video_id), cacheTime=CACHE_1HOUR)

		title = xml.xpath('//headline/text()')[0]
		summary = String.StripTags(xml.xpath('//description/text()')[0]).strip()

		duration = xml.xpath('//video/@duration')
		duration = Datetime.MillisecondsFromString(duration[0]) if len(duration) > 0 and duration[0] != "" else None

		try:
			thumb = xml.xpath('//image[@width="640"]/text()')[0]
		except:
			try:
				thumb = xml.xpath('//image/text()')[-1]
			except:
				thumb = ''

	else:

		json_obj = GetVideoJson(url)

		title = json_obj['title']
		summary = json_obj['teaser']
		duration = json_obj['duration'] * 1000
		thumb = json_obj['thumb']['href']

	return VideoClipObject(
		title = String.DecodeHTMLEntities(title),
		summary = String.DecodeHTMLEntities(summary),
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	if '/full-episode-' in url:

		return [
			MediaObject(
				parts = [
					PartObject(key=HTTPLiveStreamURL(Callback(PlayEpisode, url=url)))
				],
				video_resolution = 360,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

	else:

		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, res=res))
				],
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				video_resolution = res,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			) for res in [1080, 720, 480]
		]

####################################################################################################
def PlayEpisode(url, **kwargs):

	video_id = GetVideoId(url)
	xml = XML.ElementFromURL(EPISODE_DATA % (video_id), cacheTime=CACHE_1HOUR)

	if len(xml.xpath('//files/file')) < 1:
		raise Ex.MediaNotAvailable

	src = xml.xpath('//files/file[@bitrate="ipad"]/text()|//files/file[contains(text(), "ipad")]/text()')[0]
	m3u8_url = 'http://ht.cdn.turner.com/tbs/big/teamcoco/%s' % (src.lstrip('/'))
	base_url = m3u8_url.rsplit('/',1)[0]

	try:
		playlist = HTTP.Request(m3u8_url).content
	except:
		raise Ex.MediaNotAvailable

	new_playlist = '#EXTM3U'
	streams = []
	bandwidth = None

	for line in playlist.splitlines(False)[1:]:

		if line.startswith('#'):
			bandwidth = RE_BANDWIDTH.search(line)
			previous_line = line
			continue
		elif len(line) < 1:
			continue
		else:
			if not bandwidth:
				continue
			if not line.startswith('http://'):
				line = '%s/%s' % (base_url, line)

			streams.append({
				'bandwidth': int(bandwidth.group(1)),
				'stream': '%s\n%s' % (previous_line, line)
			})

	sorted_streams = sorted(streams, key=lambda stream: stream['bandwidth'])

	# Throw away the audio-only stream
	for stream in sorted_streams[1:]:
		new_playlist += '\n%s' % (stream['stream'])

	return new_playlist

####################################################################################################
@indirect
def PlayVideo(url, res=1080):

	res = 720 if res not in [1080, 720, 480] else res

	json_obj = GetVideoJson(url)
	uhd_url = None
	hd_url = None
	sd_url = None

	for video in json_obj['files']:

		if video['type'] == 'uhd' or video['bitrate'] == 'hd':
			uhd_url = video['url']
		if video['type'] == 'hd':
			hd_url = video['url']
		if video['type'] == 'sd' or video['bitrate'] == 'embed':
			sd_url = video['url']

	if res == 1080 and uhd_url:
		video_url = uhd_url
	elif res in [1080, 720] and hd_url:
		video_url = hd_url
	elif sd_url:
		video_url = sd_url
	else:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def GetVideoId(url):

	video_id = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR).xpath('//meta[@name="al:ios:url"]/@content')

	if len(video_id) > 0:
		return video_id[0].split('=')[-1]
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def GetVideoJson(url):

	data = HTTP.Request(url, cacheTime=CACHE_1HOUR).content
	json = RE_JSON.search(data)

	if not json:
		raise Ex.MediaNotAvailable

	Log(json.group(1))

	json_obj = JSON.ObjectFromString(String.Base64Decode(json.group(1)))
	return json_obj
