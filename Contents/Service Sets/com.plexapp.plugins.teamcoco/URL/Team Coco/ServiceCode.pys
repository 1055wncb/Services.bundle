import random

VIDEO_INFO = 'http://teamcoco.com/cvp/2.0/%s.xml'
RE_VIDEO_ID = Regex('\'video\': {.+?"id":(?P<id>[0-9]+)')
YT_SEARCH_URL = 'http://gdata.youtube.com/feeds/api/videos?q=%s&author=teamcoco&orderby=relevance&start-index=1&max-results=1&v=2&alt=json'
RE_CLEANUP = Regex('[^-a-z0-9 ]')
FULL_EP_RES = [720, 360]
VIDEO_RES = [1080, 720, 480, 360]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		xml_url = VIDEO_INFO % GetVideoId(url)
	except:
		Log.Exception("Could not retrieve video_id in MetadataObjectForURL function")
		raise Ex.MediaNotAvailable

	xml = XML.ElementFromURL(xml_url)
	title = xml.xpath('//headline/text()')[0].strip()
	summary = String.StripTags(xml.xpath('//description/text()')[0]).strip()

	duration = xml.xpath('//video/@duration')
	duration = Datetime.MillisecondsFromString(duration[0]) if len(duration) > 0 and duration[0] != "" else None

	try:
		thumb = xml.xpath('//image[@width="640"]')[0].text
	except:
		try:
			thumb = xml.xpath('//image')[-1].text
		except:
			thumb = ''

	return VideoClipObject(
		title = title,
		summary = summary,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	media_objects = []

	if 'full-episode' in url:
		for res in FULL_EP_RES:
			media_objects.append(
				MediaObject(
					parts = [
						PartObject(key=Callback(PlayVideo, url=url, res=res))
					],
					video_resolution = str(res),
					protocol = 'rtmp'
				)
			)
	else:
		for res in VIDEO_RES:
			media_objects.append(
				MediaObject(
					parts = [
						PartObject(key=Callback(PlayVideo, url=url, res=res))
					],
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					video_resolution = str(res),
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True
				)
			)

	return media_objects

####################################################################################################
@indirect
def PlayVideo(url, res=720):

	video_id = GetVideoId(url)

	if not video_id:
		Log.Exception("Could not retrieve video_id in PlayVideo function")
		raise Ex.MediaExpired

	xml = XML.ElementFromURL(VIDEO_INFO % video_id)

	if len(xml.xpath('//files/file')) < 1:
		raise Ex.MediaNotAvailable

	if 'full-episode' in url:
		if res not in FULL_EP_RES:
			res = FULL_EP_RES[-1]

		####################
		# TEST!
		session_token = ''.join(random.choice('0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz') for x in range(25))
		Log(' --> session_token: %s' % session_token)

		aspen_json = {
			"protocol": "1.0",
			"context": "main",
			"clientThrottled": False,
			"applicationName": "CVP",
			"debug": "false",
			"clientThrottle": 0,
			"propertyName": "teamcoco",
			"profile": "0",
			"site": "teamcoco",
			"applicationVersion": "2.3.6.1",
			"sessionToken": session_token,
			"platformName": "flash",
			"pageUrl": url
		}

		post_data = {
			'aspenJson': String.Quote(JSON.StringFromObject(aspen_json))
		}

		json_obj = JSON.ObjectFromURL('http://aspen.turner.com/api/hello', values=post_data)
		session_id = json_obj['sessionId']
		Log(' --> session_id: %s' % session_id)
		####################

		src = xml.xpath('//akamai/src/text()')[0].split('://')[-1]
		auth_token_type = xml.xpath('//akamai/authTokenType/text()')[0]
		window = xml.xpath('//akamai/window/text()')[0]
		aifp = xml.xpath('//akamai/aifp/text()')[0]

		files = []
		for file in xml.xpath('//files/file[contains(text(), "R1.mp4") or contains(text(), "R2.mp4")]/text()'):
			file = file.replace('/mp4:', '').replace('.mp4', '')
			if file not in files:
				files.append(file)
		files.reverse()

		post_data = {
			'sessionId': session_id,
			'videoId': video_id,
			'aifp': aifp,
			'window': window,
			'profile': 'tbs',
			'path': ';'.join(files),
			'authTokenType': auth_token_type
		}

		auth_xml = HTTP.Request('http://www.tbs.com/processors/cvp/token.jsp', values=post_data).content
		auth_xml = auth_xml.strip().replace('&', '&amp;')
		token = XML.ElementFromString(auth_xml).xpath('//token/text()')[0]
		token = String.Unquote(token)

		bundle_version = XML.ElementFromURL('http://teamcoco.com/sites/default/modules/dev/cvp/xml/appconfig.dev.xml', cacheTime=CACHE_1DAY).xpath('//bundleVersion/text()')[0]
		player_version = XML.ElementFromURL('http://z.cdn.turner.com/xslo/cvp/core/bundle/bundle_%s.xml' % bundle_version, cacheTime=CACHE_1DAY).xpath('//playerVersion/text()')[0]
		swf_url = 'http://z.cdn.turner.com/xslo/cvp/core/player/CVP_%s.swf' % player_version

		url = 'rtmpe://%s?%s' % (src, token)
		app = '%s?%s' % (src.split('/')[-1], token)
		playpath = xml.xpath('//files/file[@label="hq" and contains(@size, "x%d")]/text()' % res)[0].strip('/')

		Log(' --> RTMPDump test command line: rtmpdump -r "%s" -a "%s" -y "%s" -W "%s" -o output.flv' % (url, app, playpath, swf_url))

		return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=url, clip=playpath, app=app, swf_url=swf_url))

	else:
		if res not in VIDEO_RES:
			res = VIDEO_RES[-1]

		title = xml.xpath('//headline')[0].text.strip().lower()
		title = String.StripDiacritics(title)
		title = RE_CLEANUP.sub('', title).strip()
		json_obj = JSON.ObjectFromURL(YT_SEARCH_URL % String.Quote(title))

		if 'entry' in json_obj['feed']:
			yt_url = json_obj['feed']['entry'][0]['media$group']['media$player']['url']
			media = URLService.MediaObjectsForURL(yt_url)

			for i in range(VIDEO_RES.index(res), len(VIDEO_RES)):
				for video in media:
					if video.container != Container.MP4 or video.video_codec != VideoCodec.H264:
						continue

					if str(video.video_resolution) == str(VIDEO_RES[i]):
						#return Redirect(video.parts[0].key)
						return IndirectResponse(VideoClipObject, key=video.parts[0].key)

		try:
			video_url = xml.xpath('//file[@bitrate="embed"]')[0].text
		except:
			try:
				video_url = xml.xpath('//file[@type="standard"]')[0].text
			except:
				raise Ex.MediaNotAvailable

		return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def GetVideoId(url):

	part = url.split('/')

	if len(part) > 4 and part[4].isdigit():
		return part[4]
	else:
		page = HTTP.Request(url).content

		try:
			video_id = HTML.ElementFromString(page).xpath('//article[@data-id]')[0].get('data-id')
			return video_id
		except:
			try:
				video_id = RE_VIDEO_ID.search(page).group('id')
				return video_id
			except:
				return None

####################################################################################################
def TestURLs():

	test_urls = []

	for url in HTML.ElementFromURL('http://teamcoco.com/video').xpath('//ul[contains(@class,"videos")]/li[position() < 4]/a'):
		test_urls.append(url.get('href'))

	return test_urls
