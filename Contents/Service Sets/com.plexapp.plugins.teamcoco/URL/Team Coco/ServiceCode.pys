VIDEO_INFO = 'http://teamcoco.com/cvp/2.0/%s.xml'
RE_VIDEO_ID = Regex('\'video\': {.+?"id":(?P<id>[0-9]+)')
YT_SEARCH_URL = 'http://gdata.youtube.com/feeds/api/videos?q=%s&author=teamcoco&orderby=relevance&start-index=1&max-results=1&v=2&alt=json'
RE_CLEANUP = Regex('[^-a-z0-9 ]')
RE_BANDWIDTH = Regex('BANDWIDTH=(\d+)')
FULL_EP_RES = [480]
VIDEO_RES = [1080, 720, 480]

####################################################################################################
def MetadataObjectForURL(url):

	video_id = GetVideoId(url)

	if not video_id:
		Log.Exception("Could not retrieve video_id in MetadataObjectForURL")
		raise Ex.MediaNotAvailable

	xml = XML.ElementFromURL(VIDEO_INFO % video_id)
	title = xml.xpath('//headline/text()')[0].strip()
	summary = String.StripTags(xml.xpath('//description/text()')[0]).strip()

	duration = xml.xpath('//video/@duration')
	duration = Datetime.MillisecondsFromString(duration[0]) if len(duration) > 0 and duration[0] != "" else None

	try:
		thumb = xml.xpath('//image[@width="640"]')[0].text
	except:
		try:
			thumb = xml.xpath('//image')[-1].text
		except:
			thumb = ''

	return VideoClipObject(
		title = title,
		summary = summary,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	media_objects = []

	if '/full-episode-' in url:
		for res in FULL_EP_RES:
			media_objects.append(
				MediaObject(
					parts = [
						PartObject(key=HTTPLiveStreamURL(Callback(PlayEpisode, url=url, res=res)))
					],
					video_resolution = str(res),
					audio_channels = 2,
					optimized_for_streaming = True
				)
			)
	else:
		for res in VIDEO_RES:
			media_objects.append(
				MediaObject(
					parts = [
						PartObject(key=Callback(PlayVideo, url=url, res=res))
					],
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					video_resolution = str(res),
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True
				)
			)

	return media_objects

####################################################################################################
def PlayEpisode(url, res):

	if not '/full-episode-' in url:
		raise Ex.MediaNotAvailable

	video_id = GetVideoId(url)

	if not video_id:
		Log.Exception("Could not retrieve video_id in PlayEpisode")
		raise Ex.MediaExpired

	xml = XML.ElementFromURL(VIDEO_INFO % video_id)

	if len(xml.xpath('//files/file')) < 1:
		raise Ex.MediaNotAvailable

	src = xml.xpath('//files/file[@bitrate="ipad"]/text()|//files/file[contains(text(), "ipad")]/text()')[0]
	m3u8_url = 'http://ht.cdn.turner.com/tbs/big/teamcoco/%s' % src.lstrip('/')
	base_url = m3u8_url.rsplit('/',1)[0]

	try:
		playlist = HTTP.Request(m3u8_url).content
	except Ex.HTTPError, e:
		if e.code == 404:
			raise Ex.MediaNotAvailable

	new_playlist = '#EXTM3U'
	streams = []
	bandwidth = None

	for line in playlist.splitlines(False)[1:]:
		if line.startswith('#'):
			bandwidth = RE_BANDWIDTH.search(line)
			previous_line = line
			continue
		elif len(line) < 1:
			continue
		else:
			if not bandwidth:
				continue
			if not line.startswith('http://'):
				line = '%s/%s' % (base_url, line)

			streams.append({
				'bandwidth': int(bandwidth.group(1)),
				'stream': '%s\n%s' % (previous_line, line)
			})

	sorted_streams = sorted(streams, key=lambda stream: stream['bandwidth'])

	# Throw away the audio-only stream
	for stream in sorted_streams[1:]:
		new_playlist += '\n%s' % stream['stream']

	return new_playlist

####################################################################################################
@indirect
def PlayVideo(url, res=720):

	video_id = GetVideoId(url)

	if not video_id:
		Log.Exception("Could not retrieve video_id in PlayVideo")
		raise Ex.MediaExpired

	xml = XML.ElementFromURL(VIDEO_INFO % video_id)

	if len(xml.xpath('//files/file')) < 1:
		raise Ex.MediaNotAvailable

	if res not in VIDEO_RES:
		res = VIDEO_RES[-1]

	title = xml.xpath('//headline')[0].text.strip().lower()
	title = String.StripDiacritics(title)
	title = RE_CLEANUP.sub('', title).strip()

	json_obj = JSON.ObjectFromURL(YT_SEARCH_URL % String.Quote(title))

	if 'entry' in json_obj['feed']:
		yt_title = json_obj['feed']['entry'][0]['title']['$t'].strip().lower()
		yt_title = String.StripDiacritics(yt_title)
		yt_title = RE_CLEANUP.sub('', yt_title).strip()

		if yt_title.startswith(title):
			yt_url = json_obj['feed']['entry'][0]['media$group']['media$player']['url']
			media = URLService.MediaObjectsForURL(yt_url)

			for i in range(VIDEO_RES.index(res), len(VIDEO_RES)):
				for video in media:
					if video.container != Container.MP4 or video.video_codec != VideoCodec.H264:
						continue

					if str(video.video_resolution) == str(VIDEO_RES[i]):
						return Redirect(video.parts[0].key)

	try:
		video_url = xml.xpath('//file[@bitrate="embed"]')[0].text
	except:
		try:
			video_url = xml.xpath('//file[@type="standard"]')[0].text
		except:
			raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def GetVideoId(url):

	if '/deoncolesblackbox/' in url:
		return None

	part = url.split('/')

	if len(part) > 4 and part[4].isdigit():
		return part[4]
	else:
		try:
			page = HTTP.Request(url).content
		except:
			raise Ex.MediaNotAvailable

		try:
			video_id = HTML.ElementFromString(page).xpath('//article[@data-id]')[0].get('data-id')
			return video_id
		except:
			try:
				video_id = RE_VIDEO_ID.search(page).group('id')
				return video_id
			except:
				return None

####################################################################################################
def TestURLs():

	test_urls = []

	for url in HTML.ElementFromURL('http://teamcoco.com/video').xpath('//ul[contains(@class,"videos")]/li[position() < 4]/a'):
		test_urls.append(url.get('href'))

	return test_urls
