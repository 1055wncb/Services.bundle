RE_JSON = Regex('<script>q\("talkPage.init",({.+})\)</script>')

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].split('.html')[0]

####################################################################################################
def MetadataObjectForURL(url):

	if url.endswith('...'): # I have no idea where those URLs come from, but we can't do anything useful with them
		raise Ex.MediaNotAvailable

	json_obj = GetJSON(url)
	html = HTML.ElementFromURL(url)

	title = json_obj['title']
	speaker = json_obj['speaker']
	summary = String.StripTags(html.xpath('//meta[@name="description"]/@content')[0])
	thumb = 'http://%s' % json_obj['thumb'] if not json_obj['thumb'].startswith('http://') else json_obj['thumb']
	published = Datetime.FromTimestamp(json_obj['published'])
	duration = int(float(json_obj['duration'])*1000)

	return VideoClipObject(
		title = '%s: %s' % (speaker, title),
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb),
		originally_available_at = published,
		duration = duration
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=Callback(PlayVideo, url=url)
				)
			],
			container = Container.MP4,
			video_resolution = '480',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	json_obj = GetJSON(url)

	if 'nativeDownloads' in json_obj:
		if 'high' in json_obj['nativeDownloads']:
			video_url = json_obj['nativeDownloads']['high']
		elif 'medium' in json_obj['nativeDownloads']:
			video_url = json_obj['nativeDownloads']['medium']
		elif 'low' in json_obj['nativeDownloads']:
			video_url = json_obj['nativeDownloads']['low']
		else:
			video_url = None

		if video_url:
			return IndirectResponse(VideoClipObject, key=video_url)

	raise Ex.MediaNotAvailable

####################################################################################################
def GetJSON(url):

	data = HTTP.Request(url).content
	json = RE_JSON.search(data)

	if not json:
		raise Ex.MediaNotAvailable

	return JSON.ObjectFromString(json.group(1))['talks'][0]
