import re
TED_BASE = 'http://www.ted.com'

####################################################################################################
def NormalizeURL(url):
  return url.split('&')[0]

####################################################################################################
def TestURLs():
  test_urls = []

  for url in HTML.ElementFromURL(TED_BASE + '/talks', cacheTime=7200).xpath('//dl[contains(@class, "talkMedallion")][position() < 4]//img/parent::a'):
    url = TED_BASE + url.get('href')
    test_urls.append(url)

  return test_urls

####################################################################################################
def MetadataObjectForURL(url):

  content = HTTP.Request(url, cacheTime=7200).content
  data = HTML.ElementFromString(content)

  title = data.xpath('//meta[@name="title"]')[0].get('content').split(' | ')[0]
  summary = data.xpath('//meta[@name="description"]')[0].get('content')
  
  try: filmDate = re.search('fd:"(.+?)",', content).group(1)
  except: filmDate = re.search(';year=(.+?);', content).group(1)
  try: postedDate = Datetime.ParseDate(re.search('pd:"(.+?)",', content).group(1)).date()
  except: postedDate = Datetime.ParseDate(re.search(';year=(.+?);', content).group(1)).date()
  try: event = re.search('en:"(.+?)",', content).group(1)
  except: event = String.Unquote(re.search(';event=(.+?);', content).group(1), usePlus=True)

  thumbUrl = data.xpath('//link[@rel="image_src"]')[0].get('href')

  # Construct a metadata item
  vc = VideoClipObject(
    title = title,
    tagline = '%s : %s' % (event, filmDate),
    originally_available_at = postedDate,
    summary = summary,
    thumb = thumbUrl
  )
  return vc

####################################################################################################
@deferred
def MediaObjectsForURL(url):

  content = HTTP.Request(url, cacheTime=7200).content
  slug = re.findall("\$\('#download_dialog'\)\.load\('([^']+)", content)

  if slug:
    download_info = HTTP.Request(TED_BASE + slug[0], cacheTime=CACHE_1MONTH).content
    download_url = re.findall("(http://download.ted.com/talks/.+{quality}{lang}\.mp4)", download_info)
    items = []

    if download_url:
      download_url = download_url[0].replace('{lang}', '')

      for quality in HTML.ElementFromString(download_info).xpath('//input[@name="download_quality"]'):
        q = quality.get('data-name')

        if q == 'light':
          mo = MediaObject(
            parts = [
              PartObject( key = download_url.replace('{quality}', '-light') )
            ],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            aspect_ratio = '1.77',
            bitrate = '40',
            video_resolution = 'sd',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
          )

        elif q == 'regular':
          mo = MediaObject(
            parts = [
              PartObject( key = download_url.replace('{quality}', '') )
            ],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            aspect_ratio = '1.77',
            bitrate = '400',
            video_resolution = 'sd',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
          )

        elif q == '480p':
          mo = MediaObject(
            parts = [
              PartObject( key = download_url.replace('{quality}', '-480p') )
            ],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            aspect_ratio = '1.77',
            bitrate = '840',
            video_resolution = '480',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
          )

        items.append(mo)

    items.reverse()
    return items

  else:
    # Try and find a link to an external site for the video (usually YouTube)
    page = HTML.ElementFromString(content)

    try:
      external_url = page.xpath('//embed[contains(@src, "youtube.com")]')[0].get('src')
      return URLService.MediaObjectsForURL(external_url)
    except:
      try:
        external_url = page.xpath('//embed[contains(@src, "vimeo.com")]')[0].get('src')
        return URLService.MediaObjectsForURL(external_url)
      except:
        Log(" --> No external URLs found")
        return None
