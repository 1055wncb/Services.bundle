NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}
RE_DATE = Regex('[0-9]{4}-[0-9]{2}-[0-9]{2}')

MRSS_URL = 'http://shadow.comedycentral.com/feeds/video_player/mrss/?uri=%s'
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	page_title = html.xpath('//title')[0].text

	try: thumb_url = html.xpath('//meta[@property="og:image"]')[0].get('content')
	except: thumb_url = html.xpath('//a[@class="play_arrow "]/img')[0].get('src').split('?')[0]

	if "Full Episode Video" in page_title:
		episode_title = html.xpath('//h1[@class="title"]')[0].text
		air_date = html.xpath('//title')[0].text.split(' - ')[0].strip(' ')
		summary = html.xpath('//h3[@class="description"]')[0].text

		return EpisodeObject(
			show = 'The Colbert Report',
			title = episode_title,
			originally_available_at = Datetime.ParseDate(air_date).date(),
			summary = summary,
			thumb = thumb_url
		)

	elif "Video Clip" in page_title:
		clip_title = html.xpath('//meta[@property="og:title"]')[0].get('content')
		summary = html.xpath('//meta[@name="description"]')[0].get('content')
		full_title = html.xpath('//title')[0].text

		try:
			air_date = RE_DATE.findall(full_title)[0]
			a = air_date.split('-')
			air_date = '%s-%s-%s' % (a[0], a[2], a[1])
			air_date = Datetime.ParseDate(air_date).date()
		except:
			air_date = None

		return VideoClipObject(
			title = clip_title,
			originally_available_at = air_date,
			summary = summary,
			thumb = thumb_url
		)

####################################################################################################
def MediaObjectsForURL(url):

	if '/full-episodes/' in url:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=3))
				],
				bitrate = 3500,
				container = Container.MP4,
				video_resolution = '720',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=3))
				],
				bitrate = 2200,
				container = Container.MP4,
				video_resolution = 'sd',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=3))
				],
				bitrate = 1700,
				container = Container.MP4,
				video_resolution = 'sd',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=3))
				],
				bitrate = 1200,
				container = Container.MP4,
				video_resolution = 'sd',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	else:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0))
				],
				bitrate = 3500,
				container = Container.MP4,
				video_resolution = '720',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0))
				],
				bitrate = 2200,
				container = Container.MP4,
				video_resolution = 'sd',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0))
				],
				bitrate = 1700,
				container = Container.MP4,
				video_resolution = 'sd',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0))
				],
				bitrate = 1200,
				container = Container.MP4,
				video_resolution = 'sd',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

####################################################################################################
def PlayVideo(url, bitrate='1700', index=0):

	html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	video_player_box = html.xpath('//div[@id="video_player_box"]')

	if len(video_player_box) < 1:
		raise Ex.MediaExpired

	uri = video_player_box[0].get('data-mgid')

	mrss_data = XML.ElementFromURL(MRSS_URL % uri)
	player_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)[index].get('url')

	player_data = XML.ElementFromURL(player_url)
	available_bitrates = player_data.xpath('//rendition[@bitrate]/@bitrate')

	if len(available_bitrates) < 1:
		raise Ex.MediaNotAvailable

	closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]
	rtmp_url = player_data.xpath('//rendition[@bitrate="%s"]/src' % closest)[0].text
	stream_url = rtmp_url.split('/viacomccstrm/')[1]
	mp4_url = MP4_URL % stream_url

	return Redirect(mp4_url)
