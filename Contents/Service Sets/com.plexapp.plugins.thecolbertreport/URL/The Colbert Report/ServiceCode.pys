MRSS_URL = 'http://thecolbertreport.cc.com/feeds/mrss?uri=%s&device=Other'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

RE_FIX_XML = Regex('(<!--.*?-->)')
RE_BITRATE = Regex('_(\d+)_[^._]+\.mp4')

MediaObject.container = Container.MP4
MediaObject.video_codec = VideoCodec.H264
MediaObject.audio_codec = AudioCodec.AAC
MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	except Ex.HTTPError, e:
		if e.code == 404:
			Log('HTTP 404 Not Found for URL: %s' % url)
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaNotAvailable

	page_title = html.xpath('//title')[0].text

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

	try:
		duration = int(html.xpath('//meta[@itemprop="duration"]/@content')[0])
	except:
		video_player = html.xpath('//div[@id="video_player"]')

		if len(video_player) < 1:
			raise Ex.MediaExpired

		uri = video_player[0].get('data-mgid')

		mrss_data = HTTP.Request(MRSS_URL % uri).content
		mrss_data = RE_FIX_XML.sub('', mrss_data)
		mrss_data = XML.ElementFromString(mrss_data)

		media_urls = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
		duration = 0

		for segment in media_urls:
			if segment.get('duration') != "":
				if ':' in segment.get('duration'):
					duration += Datetime.MillisecondsFromString(segment.get('duration'))
				else:
					duration += int(float(segment.get('duration'))*1000)

	if 'full episode' in page_title.lower():

		try:
			air_date = html.xpath('//title')[0].text.split(' - ')[0].strip(' ')
			originally_available_at = Datetime.ParseDate(air_date)
		except:
			originally_available_at = None

		return EpisodeObject(
			show = 'The Colbert Report',
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb),
			originally_available_at = originally_available_at
		)

	elif 'video clip' in page_title.lower():

		try:
			air_date = html.xpath('//li[@class="airDate"]/text()')[-1]
			originally_available_at = Datetime.ParseDate(air_date)
		except:
			originally_available_at = None

		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb),
			originally_available_at = originally_available_at
		)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	try:
		mgid = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR).xpath('//div[contains(@id, "video_player")]/@data-mgid')

		if len(mgid) < 1:
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaExpired

	mrss_data = HTTP.Request(MRSS_URL % mgid[0], cacheTime=CACHE_1HOUR).content
	mrss_data = RE_FIX_XML.sub('', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)

	available_streams = {}

	for media_url in media_urls:

		try:
			video_data = XML.ElementFromURL(media_url, cacheTime=CACHE_1HOUR)
		except:
			raise Ex.MediaNotAvailable

		renditions = video_data.xpath('//rendition[@type="video/mp4"]')

		if len(renditions) < 1:
			raise Ex.MediaNotAvailable

		for rendition in renditions:

			rtmp_url = rendition.xpath('./src/text()')[0]

			if '/viacomccstrm/' in rtmp_url:
				mp4_url = MP4_URL % (rtmp_url.split('/viacomccstrm/')[-1])
			else:
				Log('Failed to split the rmtp_url to build the mp4_url: %s' % (rtmp_url))
				raise Ex.MediaNotAvailable

			bitrate = RE_BITRATE.search(mp4_url).group(1)

			if bitrate not in available_streams:
				available_streams[bitrate] = []

			part = {}
			part['duration'] = rendition.get('duration')
			part['height'] = rendition.get('height')
			part['mp4_url'] = mp4_url

			available_streams[bitrate].append(part)

	media_objects = []
	bitrates = [int(i) for i in available_streams.keys()]
	bitrates.sort(reverse=True)

	for bitrate in bitrates:

		parts = []

		for part in available_streams[str(bitrate)]:

			parts.append(
				PartObject(
					key = part['mp4_url'],
					duration = int(part['duration'])*1000
				)
			)

			video_resolution = int(part['height'])

		media_objects.append(
			MediaObject(
				parts = parts,
				# June 9, 2014 - The line below is necessary due to an issue with some clients not copying the media attributes for audio to the streams. 
				# Not including this line causes the Roku to transcode videos. This issue should be fixed in future versions of the client and/or framework.
				audio_codec = AudioCodec.AAC,
				bitrate = bitrate,
				video_resolution = video_resolution
			)
		)

	return media_objects
