OG_NAMESPACE = {'og':'http://www.w3.org/1999/xhtml'}
RE_DATE = Regex('[0-9]{4}-[0-9]{2}-[0-9]{2}')

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = HTML.ElementFromURL(url, cacheTime=7200)

	try: video_type = data.xpath('//title')[0].text.split(' - ')[4].split('|')[0].strip(' ')
	except: video_type = data.xpath('//title')[0].text.split(' - ')[3].split('|')[0].strip(' ')

	try: thumb_url = data.xpath('//meta[@property="og:image"]', namespaces=OG_NAMESPACE)[0].get('content')
	except: thumb_url = data.xpath('//a[@class="play_arrow "]/img')[0].get('src').split('?')[0]

	if video_type == "Full Episode Video":
		show_title = data.xpath('//title')[0].text.split(' - ')[3].strip(' ')
		episode_title = data.xpath('//h1[@class="title"]')[0].text
		air_date = data.xpath('//title')[0].text.split(' - ')[0].strip(' ')
		summary = data.xpath('//h3[@class="description"]')[0].text

		return EpisodeObject(
			title = episode_title,
			show = show_title,
			originally_available_at = Datetime.ParseDate(air_date).date(),
			summary = summary,
			thumb = thumb_url
		)

	elif video_type == "Video Clip":
		clip_title = data.xpath('//meta[@property="og:title"]', namespaces=OG_NAMESPACE)[0].get('content')
		summary = data.xpath('//meta[@name="description"]')[0].get('content')
		full_title = data.xpath('//title')[0].text

		try:
			air_date = RE_DATE.findall(full_title)[0]
			a = air_date.split('-')
			air_date = '%s-%s-%s' % (a[0], a[2], a[1])
			air_date = Datetime.ParseDate(air_date).date()
		except:
			air_date = None

		return VideoClipObject(
			title = clip_title,
			originally_available_at = air_date,
			summary = summary,
			thumb = thumb_url
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key = Callback(PlayVideo, url=url))],
			protocol = 'webkit'
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	content = HTML.ElementFromURL(url)
	video_id = content.xpath('//div[@id="video_player_box"]')[0].get('data-mgid')
	flashlink = 'http://media.mtvnservices.com/player/prime/mediaplayerprime.1.12.1.swf?uri=%s&autoPlay=true' % video_id

	return IndirectResponse(VideoClipObject, key=WebVideoURL(flashlink))
