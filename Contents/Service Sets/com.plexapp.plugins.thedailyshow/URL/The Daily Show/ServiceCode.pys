OG_NAMESPACE  = {'og':'http://www.w3.org/1999/xhtml'}

####################################################################################################

def NormalizeURL(url):
  ### Add changes here if we start seeing non-"normal" urls
  return url

####################################################################################################

def MetadataObjectForURL(url):
  data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')
  
  try: videoType = data.xpath('//title')[0].text.split(' - ')[4].split('|')[0].strip(' ')
  except: videoType = data.xpath('//title')[0].text.split(' - ')[3].split('|')[0].strip(' ')
  #Log(videoType)
  
  thumbUrl = data.xpath('//meta[@property="og:image"]', namespaces=OG_NAMESPACE)[0].get('content')
  #Log(thumbUrl)
  
  #try: duration = details.xpath('//div[@id="info-container-left"]/p[3]/text()')[0]
  #except: duration = details.xpath('//div[@id="info-container-left"]/p[2]/text()')[0]
  #Log(duration)
  #durationParts = duration.split(':')
  #duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
  #Log(duration)
  
  if videoType == "Full Episode Video":

    show_title = data.xpath('//title')[0].text.split(' - ')[3].strip(' ')
    #Log(show_title)
    episode_title = data.xpath('//meta[@property="og:title"]', namespaces=OG_NAMESPACE)[0].get('content')
    #Log(episode_title)
    air_date = data.xpath('//title')[0].text.split(' - ')[0].strip(' ')
    #Log(air_date)
    summary = data.xpath('//meta[@property="og:description"]', namespaces=OG_NAMESPACE)[0].get('content')
    #Log(summary)

    # Construct a metadata item
    eo = EpisodeObject(
      title = episode_title,
      show = show_title,
      originally_available_at = Datetime.ParseDate(air_date).date(),
      #duration = duration,
      summary = summary,
      thumb = thumbUrl
    )
    return eo
  
  elif videoType == "Video Clip":
  
    clip_title = data.xpath('//meta[@property="og:title"]', namespaces=OG_NAMESPACE)[0].get('content')
    #Log(clip_title)
    summary = data.xpath('//meta[@name="description"]')[0].get('content')
    #Log(summary)
    air_date = data.xpath('//title')[0].text.split(' - ')[3].strip(' ')
    #Log(air_date)

    # Construct a metadata item
    co = EpisodeObject(
      title = clip_title,
      #duration = duration,
      originally_available_at = Datetime.ParseDate(air_date).date(),
      summary = summary,
      thumb = thumbUrl
    )
    return co
  
####################################################################################################

def MediaObjectsForURL(url):
  return [
    MediaObject(
      parts = [PartObject(key = WebVideoURL(url))]
    )
  ]
