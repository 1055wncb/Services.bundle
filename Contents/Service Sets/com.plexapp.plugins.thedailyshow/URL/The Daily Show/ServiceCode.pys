MRSS_URL = 'http://thedailyshow.cc.com/feeds/mrss?uri=%s&device=Other'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}
MP4_URL = 'http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s'

RE_FIX_XML = Regex('(<!--.*?-->)')

MediaObject.container = Container.MP4
MediaObject.video_codec = VideoCodec.H264
MediaObject.audio_codec = AudioCodec.AAC
MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	except Ex.HTTPError, e:
		if e.code == 404:
			Log('HTTP 404 Not Found for URL: %s' % url)
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaNotAvailable

	page_title = html.xpath('//title')[0].text

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

	try:
		duration = int(html.xpath('//meta[@itemprop="duration"]/@content')[0])
	except:
		video_player = html.xpath('//div[@id="video_player"]')

		if len(video_player) < 1:
			raise Ex.MediaExpired

		uri = video_player[0].get('data-mgid')

		mrss_data = HTTP.Request(MRSS_URL % uri).content
		mrss_data = RE_FIX_XML.sub('', mrss_data)
		mrss_data = XML.ElementFromString(mrss_data)

		media_urls = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
		duration = 0

		for segment in media_urls:
			if segment.get('duration') != "":
				if ':' in segment.get('duration'):
					duration += Datetime.MillisecondsFromString(segment.get('duration'))
				else:
					duration += int(float(segment.get('duration'))*1000)

	if 'full episode' in page_title.lower():

		try:
			air_date = html.xpath('//title')[0].text.split(' - ')[0].strip(' ')
			originally_available_at = Datetime.ParseDate(air_date)
		except:
			originally_available_at = None

		return EpisodeObject(
			show = 'The Daily Show',
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb),
			originally_available_at = originally_available_at
		)

	elif 'video clip' in page_title.lower():

		try:
			air_date = html.xpath('//div[@class="air_date"]//a/text()')[0]
			originally_available_at = Datetime.ParseDate(air_date)
		except:
			originally_available_at = None

		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb),
			originally_available_at = originally_available_at
		)

####################################################################################################
@deferred
def MediaObjectsForURL(url):
	try:
		html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	except:
		raise Ex.MediaNotAvailable

	video_player = html.xpath('//div[@id="video_player"]')

	if len(video_player) < 1:
		raise Ex.MediaExpired

	uri = video_player[0].get('data-mgid')

	mrss_data = HTTP.Request(MRSS_URL % uri).content
	mrss_data = RE_FIX_XML.sub('', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	media_urls = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
	available_streams = {}
	bitrates = []
	index = 0

	while index < len(media_urls):
		player_url = media_urls[index].get('url')
		try:
			player_data = XML.ElementFromURL(player_url)
		except:	
			raise Ex.MediaNotAvailable
		for rendition in player_data.xpath('//rendition'):
			bitrate = rendition.get('bitrate')
			height = rendition.get('height')
			duration = rendition.get('duration')
			rtmp_url = rendition.xpath('./src')[0].text
			stream_url = rtmp_url.split('/viacomccstrm/')[1]
			mp4_url = MP4_URL % stream_url
			if unicode(bitrate) in available_streams.keys():
				available_streams[unicode(bitrate)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}
			else:
				available_streams[unicode(bitrate)] = {}
				available_streams[unicode(bitrate)][unicode(index)] = {"height":height,"mp4_url":mp4_url,"duration":duration}
			if bitrate not in bitrates:
				bitrates.append(bitrate)

		index += 1

	bitrates.reverse()

	media_objects = []

	for bitrate in bitrates:
		i = 0
		parts = []
		while i < len(media_urls):
			parts.append(
				PartObject(key=available_streams[unicode(bitrate)][unicode(i)]["mp4_url"], duration=int(available_streams[unicode(bitrate)][unicode(i)]["duration"])*1000)
			)
			i += 1
		media_objects.append(
			MediaObject(
				parts=parts,
				# June 9, 2014 - The line below is necessary due to an issue with some clients not copying the media attributes for audio channels to the streams. 
				# Not including this line causes the Roku to transcode videos. This issue should be fixed in future versions of the client and/or framework.
				audio_channels = 2,
				bitrate = int(bitrate),
				video_resolution = int(available_streams[unicode(bitrate)][unicode(0)]["height"])
			)
		)
	return media_objects
