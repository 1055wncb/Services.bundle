RE_DETAILS = Regex('var experienceJSON = (.+)};')
VIDEO_DETAILS_URL = 'http://c.brightcove.com/services/viewer/htmlFederated?&width=1000&height=512&playerID=1656678357001&@videoPlayer=%s'
HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:19.0) Gecko/20100101 Firefox/19.0'}

####################################################################################################
def MetadataObjectForURL(url):

	details = GetExperience(url)

	return VideoClipObject(
		title = details['displayName'],
		summary = details['longDescription'],
		originally_available_at = Datetime.FromTimestamp(float(details['publishedDate']) / 1000),
		thumb = details['thumbnailURL']
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = "576",
			parts = [PartObject(key=Callback(PlayVideo, url=url, res="576"))]
		),
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = "450",
			parts = [PartObject(key=Callback(PlayVideo, url=url, res="450"))]
		),
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = "360",
			parts = [PartObject(key=Callback(PlayVideo, url=url, res="360"))]
		)
	]

####################################################################################################
def PlayVideo(url, res):

	details = GetExperience(url)

	for rendition in details['renditions']:
		if rendition['videoCodec'] == "H264" and rendition['frameHeight'] == res:
			return Redirect(rendition['defaultURL'])

	return Redirect(details['FLVFullLengthURL'])

####################################################################################################
def GetExperience(url):

	page = HTML.ElementFromURL(url, headers=HTTP_HEADERS)
	video_id = page.xpath('//li[contains(@class, "nowplaying")]//a/@href')
	if len(video_id) < 1:
		raise Ex.MediaNotAvailable

	video_id = video_id[0].replace('#', 'ref%3A')
	details_page_contents = HTTP.Request(VIDEO_DETAILS_URL % video_id, headers=HTTP_HEADERS).content
	experience = RE_DETAILS.search(details_page_contents).group(1) + '}'

	return JSON.ObjectFromString(experience)['data']['programmedContent']['videoPlayer']['mediaDTO']
