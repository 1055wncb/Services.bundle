import re

JSONPATH = "http://www.theonion.com/ajax/onn/embed/%s.json"

####################################################################################################
def MetadataObjectForURL(url):

    page = HTML.ElementFromURL(url)

    # The url also contains the id associated with the title. We can use this to request a JSON
    # specific page which contains some easily parsable meta data.
    video_id = re.match(".*,(?P<id>[0-9]+)/", url).groupdict()['id']
    json_page = JSON.ObjectFromURL(JSONPATH % video_id)

    # Extract the details available from both the actual page and the associated JSON.
    title = json_page['title']
    duration = json_page['duration']
    thumb = json_page['thumbnail']
    description = page.xpath("//div[@id='moreinfo']/p/text()")[0]

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb,
        duration = duration
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
      MediaObject(
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        container = Container.MP4,
        audio_channels = 2,
        parts = [PartObject(key=Callback(PlayVideo, url=url))]
      )
    ]

####################################################################################################
def PlayVideo(url):

    # The url contains the id associated with the title. We can use this to request a JSON specific 
    # page which contains some easily parsable meta data.
    video_id = re.match(".*,(?P<id>[0-9]+)/", url).groupdict()['id']
    json_page = JSON.ObjectFromURL(JSONPATH % video_id)

    # Find the actual url associated with the video, and redirect too it.
    video_url = json_page['video_url']
    return Redirect(video_url)
