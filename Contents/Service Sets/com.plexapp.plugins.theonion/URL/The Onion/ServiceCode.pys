####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	published = html.xpath('//meta[@property="og:published_time"]/@content')[0].split('T')[0]
	originally_available_at = Datetime.ParseDate(published).date()
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]
	thumb = '%s/%s' % (thumb.split('/1x1')[0], '16x9/640.jpg')

	try:
		duration = html.xpath('//h1/following-sibling::span[@class="duration"]/text()')[0]
		duration = TimeToMs(duration)
	except:
		duration = None

	return VideoClipObject(
		title = title,
		summary = summary,
		originally_available_at = originally_available_at,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			video_resolution = 'sd',
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	html = HTML.ElementFromURL(url)
	url = url.split('?')[0]
	id = url.rstrip('/').split(',')[-1]
	video_url = html.xpath('//li[@data-targeting_dfp_articleid="%s"]/@data-url' % id)[0]

	return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def TimeToMs(timecode):

	seconds  = 0
	duration = timecode.split(':')
	duration.reverse()

	for i in range(0, len(duration)):
		seconds += int(duration[i]) * (60**i)

	return seconds * 1000
