RE_PID = Regex('var embed_vars = .+?{pid: "(.+?)",', Regex.DOTALL)

NAMESPACES = {"a":"http://www.w3.org/2005/SMIL21/Language"}

SMIL_URL = "http://release.theplatform.com/content.select?format=SMIL&pid=%s&Embedded=True&Tracking=True"

def NormalizeURL(url):
    return url

def MetadataObjectForURL(url):
    smil = GetSMIL(url)
    details = GetSRC(smil)
    
    title = details.get('title')
    summary = details.get('abstract')
    duration = int(details.get('dur').strip('ms'))
    try:
        source = details.get('provider')
    except:
        try:
            source = details.get('author')
        except:
            source = ''    
    
    return VideoClipObject(
        title = title,
        summary = summary,
        duration = duration,
        source_title = source)

def MediaObjectsForURL(url):
    return [
        MediaObject(
            audio_channels = 2,
            parts = [PartObject(key=Callback(PlayVideo, url=url))]
        )
    ]

@indirect
def PlayVideo(url, res):
    smil = GetSMIL(url)
    
    video_url = None

    source = GetSRC(smil).get('src')
    
    if source.startswith("rtmp"):
        try:    
            player = source.split('&lt;break&gt;')[0]
            clip = source.split('&lt;break&gt;')[1]
        except:
            player = source.split('{break}')[0]
            clip = source.split('{break}')[1]
    else:
        base = smil.xpath('//meta')[0].get('base')
        player = base.split('{break}')[0]
        clip = base.split('{break}')[1] + source
    
    if player.startswith('rtmpe://'):
        swf_url = GetSwfURL(url)### this video probably requires swf-verification which isn't supported quite yet ###
        Log('This video requires swf-verification.')
    else:
        pass
    
    return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=clip))

def GetSMIL(url):
    
    if '?pid=' in url:
        pID = url.split('?pid=')[1]
    elif '?releasePID=' in url:
        pID = url.split('?releasePID=')[1]
    else:
        data = HTTP.Request(url).content
        pID = RE_PID.search(data)
        if pID:
            pID = pID.group(1)
        else:
            pass

    smil = XML.ElementFromURL(SMIL_URL % pID)
    return smil

def GetSRC(smil):
    src_list = smil.xpath('//a:ref', namespaces=NAMESPACES)
    if len(src_list) == 1:
        return src_list[0]
    else:
        for ref in src_list:
            if "pfadx///video" in ref.get('src'):
                pass
            elif ref.get('src').startswith('rtmp'):
                return ref
            else:
                return ref
    return None