DETAILS_URL = 'http://metaframe.digitalsmiths.tv/v2/WBtv/assets/%s/partner/146?format=json'
BITRATES = ['500', '700']
BASE_URL = 'http://www.thewb.com'
SWF_URL = 'http://www.thewb.com/player/wbphasethree/wbvideoplayer.swf'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	details = GetDetails(url)
	video = details['assetFields']

	ep_title = video['title']
	show = video['seriesName']
	summary = video['description']

	try: ep_index = int(video['episodeNumber'])
	except: ep_index = None

	try: season = int(video['seasonName'])
	except: season = None

	rating = float(video['rating'])
	if rating == 0:
		rating = None

	try: date = Datetime.ParseDate(video['originalAirDate'])
	except: date = None

	try: duration = int(video['duration'])*1000
	except: duration = None

	thumb_list = GetThumbList(url)

	if details['fullPlayback'] == 'true':
		return EpisodeObject(
			title = ep_title,
			show = show,
			index = ep_index,
			season = season,
			summary = summary,
			rating = rating,
			originally_available_at = date,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=[thumb['uri'] for thumb in thumb_list])
		)
	else:
		return VideoClipObject(
			title = ep_title,
			summary = summary,
			rating = rating,
			originally_available_at = date,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=[thumb['uri'] for thumb in thumb_list])
		)

####################################################################################################
def MediaObjectsForURL(url):

	items = []
	R_bitrates = BITRATES
	R_bitrates.reverse

	for value in R_bitrates:
		items.append(
			MediaObject(
				bitrate = value,
				parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=value))]
			)
		)
	return items

####################################################################################################
@indirect
def PlayVideo(url, bitrate):

	videos = GetDetails(url)['videos']
	index = BITRATES.index(bitrate)
	rtmp_url = ''

	while index > -1:
		for stream in videos:
			if videos[stream]['bitrate'] == BITRATES[index]:
				rtmp_url = videos[stream]['uri']
				break
			else:
				pass

		if rtmp_url == '':
			index = index - 1
		else:
			break

	rtmp_parts = rtmp_url.partition('mp4:')
	player = rtmp_parts[0]
	playpath = rtmp_parts[1] + rtmp_parts[2]

	return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=playpath, swf_url=SWF_URL))

####################################################################################################
def GetDetails(url):

	id = url.split('/')[-1]

	try:
		details = JSON.ObjectFromURL(DETAILS_URL % id)
	except:
		raise Ex.MediaNotAvailable

	return details

####################################################################################################
def GetThumbList(url):

	images = GetDetails(url)['images']
	thumb_list = []

	for image in images:
		thumb_list.append(images[image])

	thumb_list = sorted(thumb_list, key=lambda thumb: int(thumb['height']), reverse=True)

	return thumb_list[0:2]

####################################################################################################
def TestURLs():

	test_urls = []
	data = HTML.ElementFromURL(BASE_URL)

	for video in data.xpath('//div[@class="overlay_thumb_area"]'):
		url = video.xpath('./a/@href')[0]
		test_urls.append(BASE_URL + url)

		if test_urls > 2:
			break

	return test_urls
