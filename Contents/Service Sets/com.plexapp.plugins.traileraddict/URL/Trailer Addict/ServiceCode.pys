import cgi

BASE_URL = "http://www.traileraddict.com"
VIDEO_URL = "http://www.traileraddict.com/fvar.php?tid=%s"
HD_VIDEO_URL = "http://www.traileraddict.com/fvarhd.php?tid=%s"

NO_THUMB_AVAILABLE = 'http://www.traileraddict.com/images/noembed.png'

####################################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)

	# Determine the id of the associated title, we can then request the appropriate details
	# page. It doesn't matter if we use the HD or non HD version, as they both contain the
	# same meta data.
	full_url = page.xpath("//noscript/object/param[@name='movie']")[0].get('value')
	id = full_url[full_url.rindex('/') + 1:]
	details_page = HTTP.Request(VIDEO_URL % id).content
	details = cgi.parse_qs(details_page)

	title = details['filmtitle'][0]
	description = details['trailerd'][0]

	# The image field actually points to a php file to resize/embed the thumbnail. However, it contains
	# a property 'dir' which points to the relative path of the original image.
	thumb = details['image'][0]

	if thumb != NO_THUMB_AVAILABLE:
		thumb = BASE_URL + thumb.split('dir=', 1)[1]

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb)

####################################################################################################
def MediaObjectsForURL(url):
	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			parts = [PartObject(key=Callback(PlayVideo, url = url,  res = 'hd'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			parts = [PartObject(key=Callback(PlayVideo, url = url, res = 'sd'))]
		)
	]

####################################################################################################
def PlayVideo(url, res):

	page = HTML.ElementFromURL(url)

	# Find the appropriate page to be visiting for the actual video file.
	details_format = VIDEO_URL
	if res == 'hd':
		details_format = HD_VIDEO_URL

	# Determine the id of the associated title, we can then request the appropriate details
	# page. It doesn't matter if we use the HD or non HD version, as they both contain the
	# same meta data.
	full_url = page.xpath("//noscript/object/param[@name='movie']")[0].get('value')
	id = full_url[full_url.rindex('/') + 1:]
	details_page = HTTP.Request(VIDEO_URL % id, cacheTime = 0).content
	details = cgi.parse_qs(details_page)

	video_url = details['fileurl'][0]
	return Redirect(video_url)
