RE_APU = Regex("apu='([^']+)")

####################################################################################################
def NormalizeURL(url):

	return url.split('#')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	duration = html.xpath('//meta[@property="video:duration"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].replace('285x408.jpg', '204x143.jpg')

	return VideoClipObject(
		title = title,
		summary = summary,
		duration = int(duration) * 1000,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	data = HTTP.Request(url, cacheTime=CACHE_1HOUR).content
	video_url = RE_APU.search(data)

	if not video_url:
		raise Ex.MediaNotAvailable

	video_url = video_url.group(1).decode('rot13')[::-1]

	if video_url.endswith('.m3u8'):

		return [
			MediaObject(
				parts = [
					PartObject(
						key = HTTPLiveStreamURL(url=video_url)
					)
				]
			)
		]

	elif video_url.endswith('.mp4'):

		return [
			MediaObject(
				parts = [
					PartObject(
						key = video_url
					)
				],
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				optimized_for_streaming = True,
				audio_channels = 2
			)
		]

	else:

		raise Ex.MediaNotAvailable
