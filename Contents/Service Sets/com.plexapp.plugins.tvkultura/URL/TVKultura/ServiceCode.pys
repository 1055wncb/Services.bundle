IFRAME_URL = 'http://player.rutv.ru/iframe/play/id/%s/'
RE_VIDEO_ID = Regex('/episode_id/(\d+)')

####################################################################################################
def NormalizeURL(url):

	return url.split('/video_id/')[0]

####################################################################################################
def MetadataObjectForURL(url):

	id = RE_VIDEO_ID.search(url).group(1)
	json_obj = JSON.ObjectFromURL(IFRAME_URL % id)['data']['playlist']['medialist'][0]

	title = json_obj['title']
	summary = json_obj['anons']
	duration = int(json_obj['duration']) * 1000
	thumb = json_obj['picture']

	return VideoClipObject(
		title = title,
		summary = summary,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = 'sd',
			audio_channels = 2
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	id = RE_VIDEO_ID.search(url).group(1)
	json_obj = JSON.ObjectFromURL(IFRAME_URL % id)['data']['playlist']['medialist'][0]
	video_url = json_obj['sources']['m3u8']['auto']

	return IndirectResponse(VideoClipObject, key=video_url)
