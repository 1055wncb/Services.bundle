import re

BASE_URL = 'http://tvolucion.esmas.com/'
VIDEO_DETAILS_URL = 'http://c.brightcove.com/services/viewer/htmlFederated?&width=1000&height=512&playerID=%s&@videoPlayer=%s'

def NormalizeURL(url):
    return url
    
def MetadataObjectForURL(url):
    data = HTTP.Request(url, encoding = "iso-8859-1").content
    #Log(data)
    
    title = re.search("videoChapter = '(.+)';", data.decode("iso-8859-1")).group(1)
    #Log(title)
    show = re.search("videoProgram = '(.+)';", data.decode("iso-8859-1")).group(1)
    #Log(show)
    summary = re.search("videoSummary = '(.+)';", data.decode("iso-8859-1")).group(1).encode("iso-8859-1")
    #Log(summary)
    duration = re.search("videoDurationFrme='(.+)';", data.decode("iso-8859-1")).group(1)
    durationParts = duration.split(':')
    duration = (int(durationParts[0])*3600 + int(durationParts[1])*60 + int(durationParts[2]))*1000
    #Log(duration)
    thumb = re.search("videoImgFrame='(http://.+\.jpg)';", data.decode("iso-8859-1")).group(1)
    #Log(thumb)
    
    eo = EpisodeObject(
        title = title.encode("iso-8859-1"),
        show = show,
        summary = summary,
        duration = duration,
        thumb = thumb,
        source_title = "Tvolucion"
    )
    
    return eo

def MediaObjectsForURL(url):
    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            optimized_for_streaming = True,
            container = Container.MP4,
            video_resolution = 'sd',
            audio_channels = 2,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC
            )
        ]

def PlayVideo(url):

    page = HTML.ElementFromURL(url+'/ipad')
    
    # Sometimes the video is available directly from the ipad page.
    mp4_urls = page.xpath('//video')
    if len(mp4_urls) > 0:
        return Redirect(mp4_urls[0].get('src'))

    # If it's not available, it's possible that the page is using the Brightcove player instead. We must
    # therefore check for this
    brightcove_player = page.xpath("//object[@class='BrightcoveExperience']")[0]
    player_id = brightcove_player.xpath(".//param[@name='playerID']")[0].get('value')
    video_player = brightcove_player.xpath(".//param[@name='@videoPlayer']")[0].get('value')
    
    video_details_page = HTTP.Request(VIDEO_DETAILS_URL % (player_id, video_player)).content
    experience = re.search('var experienceJSON = (.+)};', video_details_page).group(1) + '}'
    details = JSON.ObjectFromString(experience)

    video_url = details['data']['programmedContent']['videoPlayer']['mediaDTO']['FLVFullLengthURL']
    return Redirect(video_url)

    return Redirect(mp4_url)
    
def TestURLs():
    test_urls = []
    data = HTML.ElementFromURL(BASE_URL)
    
    for program_type in data.xpath('//ul[@class="carruselTrack"]'):
        url = program_type.xpath('.//li[@class="trackHeader"]/a')[0].get('href')
        test_urls.append(url)
        
    return test_urls 