NAMESPACES = {"a":"http://www.w3.org/2005/SMIL21/Language"}

FEED_URL = "http://feed.theplatform.com/f/OyMl-B/8IyhuVgUXDd_/?&form=json&fields=guid,title,description,:subtitle,content,thumbnails,categories,:fullEpisode&fileFields=duration,url,width,height,contentType,fileSize,format&byCategories=Series/%s&byCustomValue={fullEpisode}{true}&count=true" # % show_name

RES_MAP = ['360', '504', '720']

HTTP.Headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27'

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    
    episode = GetVideoDetails(url)
        
    video_title = episode['title']
    summary = episode['description']
    show = String.Unquote(show_name)
    thumbs = SortImages(episode['media$thumbnails'])
    duration = int(float(episode['media$content'][0]['plfile$duration'])*1000)

    return EpisodeObject(
        title = video_title,
        summary = summary,
        duration = duration,
        show = show,
	thumb = Resource.ContentsOfURLWithFallback(url=thumbs, fallback='icon-default.png')
    )
    
####################################################################################################
def MediaObjectsForURL(url):
    return [
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "720",
            audio_channels = 2,
            parts = [PartObject(key=Callback(PlayVideo, url=url, res="720"))]
        ),
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "504",
            audio_channels = 2,
            parts = [PartObject(key=Callback(PlayVideo, url=url, res="504"))]
        ),
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "360",
            audio_channels = 2,
            parts = [PartObject(key=Callback(PlayVideo, url=url, res="360"))]
        )
    ]

####################################################################################################
def PlayVideo(url, res):
    
    res_index = RES_MAP.index(res)
    
    episode = GetVideoDetails(url)
    
    for video in episode["media$content"]:
        if video['plfile$format'] == "MPEG4":
            smil_url = video['plfile$url']
            break
        else:
            continue
    
    smil = XML.ElementFromURL(smil_url)


    video_list = smil.xpath('.//a:video[contains(@src, "http://")]', namespaces=NAMESPACES)
    while res_index > -1:
	for video in video_list:
            if video.get('height') == RES_MAP[res_index]:
                video_url = video.get('src')
                res_index = -1
                break
            else:
                res_index = res_index - 1
                    

    return Redirect(video_url)
    
####################################################################################################
def SortImages(images=[]):
    
    sorted_thumbs = sorted(images, key=lambda thumb : int(thumb['plfile$height']), reverse=True)
    thumb_list = []
    for thumb in sorted_thumbs:
        thumb_list.append(thumb['plfile$url'])

    return thumb_list

####################################################################################################
def GetVideoDetails(url):
    show_name = url.split('/')[-2]
    video_id = url.split('/vid:')[1]
    data = JSON.ObjectFromURL(FEED_URL % show_name)
    
    for episode in data['entries']:
	if episode['guid'] != video_id:
	    continue
	elif episode['guid'] ==video_id:
	    return episode
    return

####################################################################################################
def TestURLs():
    test_urls =[]
    data = JSON.ObjectFromURL("http://feed.theplatform.com/f/OyMl-B/8IyhuVgUXDd_/?&form=json&fields=guid,:subtitle,:fullEpisode&byCustomValue={fullEpisode}{true}")
    for entry in data['entries']:
	video_id = entry['guid']
	show = String.Quote(entry['pl1$subtitle'])
	url = "http://www.usanetwork.com/videos/%s/vid:%s" % (show, video_id)
	test_urls.append(url)
	if len(test_urls) > 3:
	    break
    return test_urls
