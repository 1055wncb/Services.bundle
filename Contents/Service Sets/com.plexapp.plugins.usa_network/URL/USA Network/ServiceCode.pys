NAMESPACES = {'a': 'http://www.w3.org/2005/SMIL21/Language'}
FEED_URL = 'http://feed.theplatform.com/f/OyMl-B/8IyhuVgUXDd_/?form=json&fields=guid,title,description,:subtitle,content,thumbnails,:fullEpisode&fileFields=duration,url,width,height,contentType,fileSize,format&byGuid=%s'
RES_MAP = ['360', '504', '720']
HTTP.Headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_1) AppleWebKit/536.25 (KHTML, like Gecko) Version/6.0 Safari/536.25'

####################################################################################################
def NormalizeURL(url):

	return url.split('?',1)[0]

####################################################################################################
def MetadataObjectForURL(url):

	episode = GetVideoDetails(url)

	video_title = episode['title']
	summary = episode['description']
	thumbs = SortImages(episode['media$thumbnails'])
	duration = int(float(episode['media$content'][0]['plfile$duration'])*1000)

	if episode['pl1$fullEpisode']:
		show = episode['pl1$subtitle']

		return EpisodeObject(
			show = show,
			title = video_title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=thumbs, fallback='icon-default.png')
		)

	else:
		return VideoClipObject(
			title = video_title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(url=thumbs, fallback='icon-default.png')
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			optimized_for_streaming = True,
			video_resolution = "720",
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res="720"))]
		),
		MediaObject(
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			optimized_for_streaming = True,
			video_resolution = "504",
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res="504"))]
		),
		MediaObject(
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			optimized_for_streaming = True,
			video_resolution = "360",
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res="360"))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res):

	episode = GetVideoDetails(url)
	res_index = RES_MAP.index(res)
	smil_url = None

	if not 'media$content' in episode:
		raise Ex.MediaNotAvailable

	for video in episode['media$content']:
		if video['plfile$format'] == "MPEG4":
			smil_url = video['plfile$url']
			break
		else:
			continue

	if not smil_url:
		raise Ex.MediaNotAvailable

	smil = XML.ElementFromURL(smil_url)

	if len(smil.xpath('//*[contains(@title, "Geographic Restriction")]')) > 0:
		raise Ex.MediaGeoblocked

	video_list = smil.xpath('//a:video[contains(@src, "http://")]', namespaces=NAMESPACES)
	video_url = None

	while res_index > -1:
		for video in video_list:
			if video.get('height') == RES_MAP[res_index]:
				video_url = video.get('src')
				break

		if video_url:
			break
		else:
			res_index = res_index - 1

	return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def SortImages(images=[]):

	sorted_thumbs = sorted(images, key=lambda thumb : int(thumb['plfile$height']), reverse=True)
	thumb_list = []

	for thumb in sorted_thumbs:
		thumb_list.append(thumb['plfile$url'])

	return thumb_list

####################################################################################################
def GetVideoDetails(url):

	video_id = url.split('/vid:')[1]
	json = JSON.ObjectFromURL(FEED_URL % video_id)

	if 'entries' in json:
		return json['entries'][0]
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def TestURLs():

	test_urls = []
	data = JSON.ObjectFromURL("http://feed.theplatform.com/f/OyMl-B/8IyhuVgUXDd_/?form=json&fields=guid,:subtitle,:fullEpisode&byCustomValue={fullEpisode}{true}")

	for entry in data['entries']:
		video_id = entry['guid']
		show = String.Quote(entry['pl1$subtitle'])
		url = "http://www.usanetwork.com/videos/%s/vid:%s" % (show, video_id)
		test_urls.append(url)

		if len(test_urls) > 3:
			break

	return test_urls
