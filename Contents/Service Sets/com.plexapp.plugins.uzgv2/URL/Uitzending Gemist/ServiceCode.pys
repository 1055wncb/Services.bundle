IDEVICE_API = 'http://iphone-api.uitzendinggemist.nl/v1/episodes/%s.json'

HTTP_DESKTOP_UA = {
	'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14',
	'Cookie': 'npo_cc=30'
}

HTTP_IPAD_UA = {
	'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A523 Safari/8536.25',
	'Cookie': 'npo_cc=30'
}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	if '#' in url and ';' in url:
		(url, client_platform, client_version) = url.replace(';', '#').split('#')
	elif '#' in url:
		(url, client_platform) = url.split('#')
		client_version = ''
	else:
		client_platform = ''
		client_version = ''

	html = HTML.ElementFromURL(url, headers=HTTP_DESKTOP_UA, cacheTime=CACHE_1WEEK)
	player_id = html.xpath('//span[@id="episode-data"]/@data-player-id')

	if len(player_id) < 0:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0]

	# Roku plays HLS just fine, but flips on the M4V files from UZG.
	# If we don't have an HLS, raise a 'MediaNotAvailable' exception.
	if client_platform == 'Roku':
		try:
			json_obj = JSON.ObjectFromURL(IDEVICE_API % player_id[0], cacheTime=CACHE_1HOUR)

			if 'video' not in json_obj or json_obj['video'] is None or 'm3u8' not in json_obj['video']:
				raise
		except:
			Log(' --> m3u8 stream not available for: %s' % title)
			raise Ex.MediaNotAvailable

	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	if summary.startswith('Geen omschrijving'): summary = None
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0]

	try:
		date = html.xpath('//table[@class="information"]//td[1]/text()')[0]
		date = date.split(',')[0][3:]

		# Replace name of the month (only march, may and october are required, other months have the same 3-letter abbr in English)
		mapping = [('mrt', 'mar'), ('mei', 'may'), ('okt', 'oct')]
		for k, v in mapping:
			date = date.replace(k, v)

		originally_available_at = Datetime.ParseDate(date).date()
	except:
		originally_available_at = None

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb),
		originally_available_at = originally_available_at
	)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	if '#' in url and ';' in url:
		(url, client_platform, client_version) = url.replace(';', '#').split('#')
	elif '#' in url:
		(url, client_platform) = url.split('#')
		client_version = ''
	else:
		client_platform = ''
		client_version = ''

	html = HTML.ElementFromURL(url, headers=HTTP_DESKTOP_UA, cacheTime=CACHE_1WEEK)
	player_id = html.xpath('//span[@id="episode-data"]/@data-player-id')

	if len(player_id) < 0:
		raise Ex.MediaNotAvailable

	try:
		json_obj = JSON.ObjectFromURL(IDEVICE_API % player_id[0], cacheTime=CACHE_1HOUR)

		if 'video' in json_obj and json_obj['video'] is not None and 'm3u8' in json_obj['video']:
			hls_url = json_obj['video']['m3u8']
		else:
			hls_url = None
	except:
		hls_url = None

	# Roku plays HLS just fine, but flips on the M4V files from UZG.
	# If we don't have an HLS, raise a 'MediaNotAvailable' exception.
	if client_platform == 'Roku' and hls_url is None:
		hls_url = ''

	# Plex 0.9.5/Laika doesn't handle adaptive HLS very well (it just picks and plays the first stream from
	# the playlist, which is the lowest quality version).
	if (client_platform in ('MacOSX', 'Windows') and client_version.startswith('0.9.5')) or hls_url is None:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url))
				],
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				video_resolution = '360',
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	else:
		return [
			MediaObject(
				parts = [
					PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=hls_url)))
				],
				video_resolution = '480',
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

####################################################################################################
@indirect
def PlayVideo(url):

	if not url:
		raise Ex.MediaNotAvailable

	if url.endswith('.m3u8'):
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))

	html = HTML.ElementFromURL(url, headers=HTTP_DESKTOP_UA, cacheTime=CACHE_1WEEK)
	player_id = html.xpath('//span[@id="episode-data"]/@data-player-id')

	if len(player_id) < 0:
		raise Ex.MediaNotAvailable

	player_url = 'http://www.uitzendinggemist.nl/player/%s' % player_id[0]
	html = HTML.ElementFromURL(player_url, headers=HTTP_IPAD_UA, cacheTime=0)
	video_src = html.xpath('//video/source[contains(@src, "std")]/@src')

	if len(video_src) < 1:
		video_src = html.xpath('//video/source/@src')

		if len(video_src) < 1:
			raise Ex.MediaNotAvailable

	if not video_src[0].startswith('http://'):
		url = 'http://www.uitzendinggemist.nl/%s' % video_src[0].lstrip('/')
	else:
		url = video_src[0]

	video_url = FollowRedirects(url)
	if not video_url:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def FollowRedirects(url, redirects=0):

	if redirects > 4:
		return None

	headers = HTTP_IPAD_UA
	if 'www.uitzendinggemist.nl' in url:
		headers['Cookie'] = '%s;%s' % (HTTP_IPAD_UA['Cookie'], HTTP.CookiesForURL(url))

	req = HTTP.Request(url, cacheTime=0, headers=headers, follow_redirects=False)

	try:
		req.headers
	except Ex.RedirectError, e:
		if 'Location' in e.headers:
			url = FollowRedirects(e.headers['Location'], redirects=redirects+1)

	return url
