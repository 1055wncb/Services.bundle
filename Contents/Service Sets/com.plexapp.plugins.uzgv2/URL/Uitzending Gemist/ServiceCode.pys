HTTP_DESKTOP_UA = {
	'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14',
	'Cookie': 'site_cookie_consent=yes'
}

HTTP_IPAD_UA = {
	'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A523 Safari/8536.25',
	'Cookie': 'site_cookie_consent=yes'
}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url, headers=HTTP_DESKTOP_UA, cacheTime=CACHE_1WEEK)

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='SourceIcon.png')
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = 'sd',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	html = HTML.ElementFromURL(url, headers=HTTP_DESKTOP_UA)
	player_id = html.xpath('//span[@id="episode-data"]/@data-player-id')

	if len(player_id) < 0:
		raise Ex.MediaNotAvailable

	player_url = 'http://www.uitzendinggemist.nl/player/%s' % player_id[0]
	html = HTML.ElementFromURL(player_url, headers=HTTP_IPAD_UA, cacheTime=0)
	video_src = html.xpath('//video/source/@src')

	if len(video_src) < 0:
		raise Ex.MediaNotAvailable

	if not video_src[0].startswith('http://'):
		video_url = 'http://www.uitzendinggemist.nl%s' % video_src[0]
	else:
		video_url = video_src[0]

	headers = HTTP_IPAD_UA
	headers['Cookie'] = '%s;%s' % (HTTP_IPAD_UA['Cookie'], HTTP.CookiesForURL(url))
	req = HTTP.Request(video_url, headers=headers, sleep=2.0).headers

	oc = ObjectContainer()

	oc.add(VideoClipObject(
		items = [
			MediaObject(
				parts = [PartObject(key=video_url)]
			)
		]
	))

	oc.http_headers = HTTP_IPAD_UA
	return oc
