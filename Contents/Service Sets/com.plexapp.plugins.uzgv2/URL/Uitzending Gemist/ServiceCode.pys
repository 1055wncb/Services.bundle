TOKEN_URL = 'http://ida.omroep.nl/npoplayer/i.js'
STREAM_URL = 'http://ida.omroep.nl/odiplus/?prid=%s&puboptions=adaptive&adaptive=yes&part=1&token=%s'
RE_TOKEN = Regex('token = "([^"]+)"')
RE_EPISODE_ID = Regex('/afleveringen/(\d{7})')

HEADERS = {
	'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A523 Safari/8536.25',
	'Cookie': 'npo_cc=30'
}

####################################################################################################
def NormalizeURL(url):

	episode_id = RE_EPISODE_ID.search(url)

	if episode_id:
		url = 'http://www.uitzendinggemist.nl/afleveringen/%s' % episode_id.group(1)

	return url

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, headers=HEADERS, cacheTime=CACHE_1WEEK)
	except Ex.HTTPError, e:
		if e.code == 404:
			raise Ex.MediaNotAvailable

	player_id = html.xpath('//span[@id="episode-data"]/@data-player-id')

	if len(player_id) < 0:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	if summary.startswith('Geen omschrijving'): summary = None
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0]

	try:
		date = html.xpath('//table[@class="information"]//td[1]/text()')[0]
		date = date.split(',')[0][3:]

		# Replace name of the month (only march, may and october are required, other months have the same 3-letter abbr in English)
		mapping = [('mrt', 'mar'), ('mei', 'may'), ('okt', 'oct')]
		for k, v in mapping:
			date = date.replace(k, v)

		originally_available_at = Datetime.ParseDate(date).date()
	except:
		originally_available_at = None

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb),
		originally_available_at = originally_available_at
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
			],
			video_resolution = '480',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	html = HTML.ElementFromURL(url, headers=HEADERS, cacheTime=CACHE_1WEEK)
	player_id = html.xpath('//span[@id="episode-data"]/@data-player-id')

	if len(player_id) < 0:
		raise Ex.MediaExpired

	token_data = HTTP.Request(TOKEN_URL, headers=HEADERS, cacheTime=0).content
	token = RE_TOKEN.search(token_data)

	if not token:
		raise Ex.MediaNotAvailable

	json = JSON.ObjectFromURL(STREAM_URL % (player_id[0], token.group(1)), cacheTime=0)
	stream = '%s?extension=m3u8&type=json' % json['streams'][0].split('?')[0]

	try:
		json = JSON.ObjectFromURL(stream, cacheTime=0)
		stream = json['url']
	except Ex.HTTPError, e:
		if e.code == 404:
			raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(stream))
