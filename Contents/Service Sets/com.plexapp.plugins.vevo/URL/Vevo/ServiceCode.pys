HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):

	return url.split('#')[0].split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	id = url.split('/')[-1].strip()

	try:
		json_obj = JSON.ObjectFromURL(DETAILS_URL % id, headers=HTTP_HEADERS)
	except:
		raise Ex.MediaNotAvailable

	if not json_obj['success']:
		raise Ex.MediaNotAvailable

	details = json_obj['result']

	return VideoClipObject(
		title = '%s - %s' % (details['artists_main'][0]['name'], details['title']),
		summary = details['description'],
		duration = int(details['duration_in_seconds']) * 1000,
		originally_available_at = Datetime.ParseDate(details['created_at'].split('T')[0]),
		genres = details['genres'],
		thumb = Resource.ContentsOfURLWithFallback(url=details['image_url']),
		art = Resource.ContentsOfURLWithFallback(url=details['artists_main'][0]['image_url'], fallback='http://resources-cdn.plexapp.com/image/art/com.plexapp.plugins.vevo.jpg')
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = '1080',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	id = url.split('/')[-1]

	try:
		json_obj = JSON.ObjectFromURL(AUTH_URL % id, headers=HTTP_HEADERS)
	except:
		raise Ex.MediaNotAvailable

	if 'video' not in json_obj or not json_obj['video']:

		if 'statusMessage' in json_obj and 'where you live' in json_obj['statusMessage']:
			raise Ex.MediaGeoblocked

		raise Ex.MediaNotAvailable

	hls_url = None

	for version in json_obj['video']['videoVersions']:

		if 'sourceType' in version and version['sourceType'] == 4:

			data = version['data']
			xml = XML.ElementFromString(data)
			hls_url = xml.xpath('//rendition/@url')[0]

	if not hls_url:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=hls_url)
