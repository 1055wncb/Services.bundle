YOUTUBE_BASE = 'http://www.youtube.com/watch?v=%s'
DETAILS_URL  = 'http://api.vevo.com/mobile/v1/video/%s.json'
AUTH_URL     = 'http://videoplayer.vevo.com/VideoService/AuthenticateVideo?isrc=%s'
VIDEO_URL    = 'http://www.vevo.com/watch/%s/%s/%s'

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:22.0) Gecko/20100101 Firefox/22.0'}

####################################################################################################
def NormalizeURL(url):

    return url.split('?')[0].strip('#')

####################################################################################################
def MetadataObjectForURL(url):

    # Obtain the id of the title, and request the associated details page.
    id = url.split('/')[-1].strip()
    details = JSON.ObjectFromURL(DETAILS_URL % id, headers=HTTP_HEADERS)['result']

    return VideoClipObject(
        title = '%s - %s' % (details['artists_main'][0]['name'], details['title']),
        summary = details['description'],
        duration = int(details['duration_in_seconds']) * 1000,
        originally_available_at = Datetime.ParseDate(details['created_at'].split('T')[0]),
        genres = details['genres'],
        thumb = Resource.ContentsOfURLWithFallback(details['image_url'])
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, res='1080'))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '1080',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, res='720'))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '720',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, res='360'))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '360',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, res='1080', **kwargs):

    id = url.split('/')[-1]
    json_obj = JSON.ObjectFromURL(AUTH_URL % id, headers=HTTP_HEADERS)
    yt_id = None

    if 'video' not in json_obj or not json_obj['video']:
        if 'statusMessage' in json_obj and 'where you live' in json_obj['statusMessage']:
            raise Ex.MediaGeoblocked

        raise Ex.MediaNotAvailable

    for version in json_obj['video']['videoVersions']:
        if 'sourceType' in version and version['sourceType'] == 0:
            yt_id = version['id']
            break

    if not yt_id:
        raise Ex.MediaNotAvailable

    media = URLService.MediaObjectsForURL(YOUTUBE_BASE % yt_id)
    resolutions = ['1080', '720', '360']
    index = resolutions.index(res)

    for resolution_index in range(index, len(resolutions)):
        current_resolution = resolutions[resolution_index]

        for video in media:
            if video.container != Container.MP4 or video.video_codec != VideoCodec.H264:
                continue

            if str(video.video_resolution) == current_resolution:
                return Redirect(video.parts[0].key)

    return Redirect(media[-1].parts[0].key)

####################################################################################################
def TestURLs():

    test_urls = []
    results = JSON.ObjectFromURL('http://api.vevo.com/mobile/v1/video/list.json?order=mostrecent&max=3', headers=HTTP_HEADERS)['result']

    for result in results:
        url = VIDEO_URL % (result['artists_main'][0]['url_safename'], result['url_safe_title'], result['isrc'])
        test_urls.append(url)

    return test_urls
