HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'}
RE_JSON = Regex('window\.__INITIAL_STORE__ = (\{.+?\});')

####################################################################################################
def NormalizeURL(url):

	return url.split('#')[0].split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	json_obj = GetJSON(url, type='metadata')

	artist = json_obj['mainArtists'][0]['name']
	title = json_obj['title']
	duration = int(float(json_obj['duration']) * 1000)
	originally_available_at = Datetime.ParseDate(json_obj['releaseDate'].split('T')[0])
	genres = [genre for genre in json_obj['genres']]
	thumb = json_obj['thumbnailUrl']

	return VideoClipObject(
		title = '%s - %s' % (artist, title),
		duration = duration,
		originally_available_at = originally_available_at,
		genres = genres,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = '1080',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	json_obj = GetJSON(url, type='streams')
	hls_url = None

	for version in json_obj[0]:

		if not 'quality' in version and '.m3u8' in version['url']:

			hls_url = version['url']

	if not hls_url:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=hls_url)

####################################################################################################
def GetJSON(url, type='metadata'):

	page = HTTP.Request(url).content
	json = RE_JSON.search(page)

	if not json:
		raise Ex.MediaNotAvailable

	video_id = url.split('/')[-1]

	json_obj = JSON.ObjectFromString(json.group(1))

	if type == 'streams':
		return json_obj['default']['streams'][video_id]
	else:
		return json_obj['default']['videos'][video_id]
