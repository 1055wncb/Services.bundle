DETAILS_URL                 = 'http://api.vevo.com/mobile/v1/video/%s.json?extended=true'
SMIL_URL                    = 'http://smilstream.vevo.com/HDFlash/v1/smil/%s/%s.smil'
VIDEO_URL                   = 'http://www.vevo.com/watch/%s/%s/%s'
HLS_URL                     = 'http://hls.media.vevo.com/%s/ipad/index_500_wifi.m3u8'

NAMESPACES = {"a":"http://www.w3.org/2001/SMIL20/Language"}

BITRATES = ["564000", "864000", "1328000", "1728000", "2528000", "3328000", "4392000", "5392000"]

####################################################################################################
def NormalizeURL(url):
    return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):
    # Obtain the id of the title, and request the associated details page.
    id = url.split('/')[-1]
    details = JSON.ObjectFromURL(DETAILS_URL % id)['result']
        
    return VideoClipObject(
        title = details['title'],
        summary = details['description'],
        thumb = details['image_url'],
        duration = int(details['duration_in_seconds']) * 1000,
        originally_available_at = Datetime.ParseDate(details['created_at'].split('T')[0]),
        genres = details['genres'])

####################################################################################################
def MediaObjectsForURL(url):
    return [
      MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="5392000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "1080",
            bitrate = "5392",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="4392000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "1080",
            bitrate = "4392",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="3328000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "720",
            bitrate = "3328",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="2528000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "720",
            bitrate = "2528",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="1728000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "432",
            bitrate = "1728",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="1328000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "432",
            bitrate = "1328",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="864000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "288",
            bitrate = "864",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="564000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "288",
            bitrate = "564",
            audio_channels = 2
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, bitrate):
    id = url.split('/')[-1]
    video_url = ''
    index = BITRATES.index(bitrate)
    try:
        smil = XML.ElementFromURL(SMIL_URL % (id, id.lower()))
        while index > -1:
            try:
                video_url = smil.xpath('//a:video[@system-bitrate="'+BITRATES[index]+'"]', namespaces=NAMESPACES)[0].get('src')
                break
            except:
                index = index -1
            if index == 0:
                if video_url == '':
                    video_url = smil.xpath('//a:video', namespaces=NAMESPACES)[0].get('src')

        return Redirect("http://vstream.vevo.com/%s" % video_url)
    except:
        return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(HLS_URL % id))

####################################################################################################
def TestURLs():
    test_urls = []
    results = JSON.ObjectFromURL('http://api.vevo.com/mobile/v1/video/list.json?order=mostrecent&max=3')['result']

    for result in results:
        url = VIDEO_URL % (result['artists_main'][0]['url_safename'], result['url_safe_title'], result['isrc'])
        test_urls.append(url)

    return test_urls
