VIDEO_DETAILS = 'http://www.vgtv.no/api/?do=feed&action=id&value=%s'
VIDEO_STATUS = 'http://www.vgtv.no/data/actions/videostatus/?id=%s'

NAMESPACES = {'x': 'http://www.aptoma.no/produkt/tv/xmlns'}

TEST_URLS = 'http://www.vgtv.no/data/actions/videolist/?limit=3'
TEST_URL = 'http://www.vgtv.no/#!/video/%s/%s'

RE_CLEAN_URL = Regex('[^a-z0-9]', Regex.IGNORECASE)

####################################################################################################
def MetadataObjectForURL(url):

    # Obtain the XML which details the associated url.
    id = url.split('#!/video/')[-1].split('/')[0]
    xml = XML.ElementFromURL(VIDEO_DETAILS % id)

    # Extract the available information
    title = xml.xpath('//item/title/text()')[0]
    summary = xml.xpath('//item/description/text()')[0]

    date = xml.xpath('//item/pubDate/text()')[0]
    date = Datetime.ParseDate(date)

    thumb = xml.xpath('//x:image[@width="512"]/@url', namespaces=NAMESPACES)
    if len(thumb) > 0:
        thumb = thumb[0]
    else:
        thumb = ''

    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = Resource.ContentsOfURLWithFallback(thumb),
        originally_available_at = date
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts = [
                PartObject(
                    key = Callback(PlayVideo, url=url, bitrate=bitrate)
                )
            ],
            bitrate = bitrate,
            container = Container.MP4,
            video_resolution = resolution,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ) for bitrate, resolution in [(3500, '720'), (1500, '540'), (1200, '468'), (800, '360')]
    ]

####################################################################################################
@indirect
def PlayVideo(url, bitrate):

    id = url.split('#!/video/')[-1].split('/')[0]
    json_obj = JSON.ObjectFromURL(VIDEO_STATUS % id)['formats']

    if not 'http' in json_obj or not 'mp4' in json_obj['http']:
        raise Ex.MediaNotAvailable

    streams = json_obj['http']['mp4']
    available_bitrates = []

    for video in streams:
        available_bitrates.append(video['bitrate'])

    closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]

    for video in streams:
        if closest == video['bitrate']:
            host = video['paths'][0]['address']
            path = video['paths'][0]['path']
            file = video['paths'][0]['filename']
            video_url = 'http://%s/%s/%s' % (host, path, file)
            break

    return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def TestURLs():

    test_urls = []

    for video in JSON.ObjectFromURL(TEST_URLS)['videos']:
        if len(test_urls) < 3:
            slug = RE_CLEAN_URL.sub('-', video['title']).lower()
            url = TEST_URL % (video['id'], slug)
            test_urls.append(url)
        else:
            break

    return test_urls
