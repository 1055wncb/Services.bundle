BASE_URL = "http://www.vice.com%s"
PLAYER_URL = 'http://player.ooyala.com/player.js?embedCode=%s'
MOBILE_PLAYER_URL = 'http://player.ooyala.com/mobile_player.js?%s'

RE_EMBED_CODE = Regex('embedCode=([^&]+)')
RE_PLAYER_ARGS = Regex('var mobile_player_url="http://player.ooyala.com/mobile_player.js\?([^"]+)"')
RE_STREAM = Regex('var streams=window.oo_testEnv\?\[\]:eval\("\((?P<json>.+?)\)"\);', Regex.DOTALL)

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		data = HTML.ElementFromURL(url)
	except Ex.HTTPError, e:
		if e.code == 404:
			raise Ex.MediaNotAvailable

	video = data.xpath('//meta[@property="og:video"]/@content')

	if len(video) < 1:
		raise Ex.MediaNotAvailable

	if 'youtube.com' in video[0]:
		return None

	if not 'player.ooyala.com' in video[0]:
		raise Ex.MediaNotAvailable

	# Extract the available information from the page
	title = data.xpath('//meta[@property="og:title"]')[0].get('content')
	description = data.xpath('//meta[@name="description"]')[0].get('content')
	thumb = data.xpath('//meta[@property="og:image"]')[0].get('content').replace(' ', '%20')

	try:
		show_name = title.split('|')[1].strip()
		ep_name = title.split('|')[0].strip()

		return EpisodeObject(
			title = ep_name,
			show = show_name,
			summary = description,
			thumb = thumb
		)
	except:
		return VideoClipObject(
			title = title,
			summary = description,
			thumb = thumb
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_resolution = 'sd',
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [
				PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
			]
		)
	]

####################################################################################################
def PlayVideo(url):

	data = HTML.ElementFromURL(url)
	video = data.xpath('//meta[@property="og:video"]/@content')

	if len(video) < 1:
		raise Ex.MediaNotAvailable

	if 'youtube.com' in video[0]:
		return None

	if not 'player.ooyala.com' in video[0]:
		raise Ex.MediaNotAvailable

	embed_code = RE_EMBED_CODE.search(video[0]).group(1)

	# Once we've got this, we can then request the main JS page to do with the actual player. Since it
	# only actually contains JS source, we simply obtain the content.
	player_page = HTTP.Request(PLAYER_URL % embed_code, cacheTime=0).content

	# The player page will contain a reference to the mobile JS page (including all required parameters).
	# We therefore search for the known url.
	mobile_player_page_args = RE_PLAYER_ARGS.search(player_page).group(1) + 'ipad'
	mobile_player_page = HTTP.Request(MOBILE_PLAYER_URL % mobile_player_page_args, cacheTime=0).content

	# We now have the mobile JS player page.
	try:
		stream_json = RE_STREAM.search(mobile_player_page).group('json')
		stream_json = stream_json.decode('unicode_escape')[1:-1]
		stream_details = JSON.ObjectFromString(stream_json)

		return Redirect(stream_details['ipad_url'])
	except:
		raise Ex.MediaNotAvailable

####################################################################################################
def TestURLs():

	test_urls = []
	data = HTML.ElementFromURL(BASE_URL % '/video')

	for vid in data.xpath('//div[@class="most_popular_videos"]//li[@class="story"]'):
		url = BASE_URL % vid.xpath('.//a')[0].get('href')

		if url not in test_urls:
			test_urls.append(url)

		if len(test_urls) >= 2:
			break

	return test_urls
