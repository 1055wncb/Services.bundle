MP4_URL = 'http://www.viddler.com/file/%s/mp4'
FLV_URL = 'http://www.viddler.com/file/d/%s.flv'

####################################################################################################
def NormalizeURL(url):

	if '/player/' in url:
		url = url.replace('/player/', '/v/')
	elif '/embed/' in url:
		url = url.replace('/embed/', '/v/')

	return url.split('?', 1)[0].rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url)
	except:
		return None

	title = html.xpath('//meta[@property="og:title"]')[0].get('content')
	summary = html.xpath('//meta[@name="description"]')[0].get('content')
	thumb = html.xpath('//meta[@property="og:image"]')[0].get('content')

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = 'sd',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	video_id = url.rsplit('/',1)[1]
	video_url = MP4_URL % video_id

	try:
		HTTP.Request(video_url).headers
		return Redirect(video_url)
	except:
		video_url = FLV_URL % video_id
		return Redirect(video_url)
