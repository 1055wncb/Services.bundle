HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:19.0) Gecko/20100101 Firefox/19.0'}
VIDEO_PATTERN = Regex("flashvars.+?'http://'.+?'([^']+)")

####################################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url, headers=HTTP_HEADERS)

	title = page.xpath("//meta[@property='og:title']")[0].get('content')
	summary = ''.join(page.xpath("//p[@class='description']/text()")).strip()
	thumb = page.xpath("//meta[@property='og:image']")[0].get('content')
	tags = page.xpath("//meta[@name='keywords']")[0].get('content').split(',')
	tags = [ tag.strip() for tag in tags ]
	date = page.xpath("//span[@class='time-upload']/text()")[0].strip("on").strip()
	date = Datetime.ParseDate(date)

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb,
		originally_available_at = date,
		tags = tags
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = 'sd',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	content = HTTP.Request(url, headers=HTTP_HEADERS).content
	video_url = VIDEO_PATTERN.search(content)

	if video_url:
		video_url = String.Unquote(video_url.group(1))

	return IndirectResponse(VideoClipObject, key='http://%s' % video_url)
