VIDEO_URL_EXT_HD = '__VJ360PENG.mp4'
VIDEO_URL_EXT_SD = '__PHOENG.mp4'

####################################################################################################
def NormalizeURL(url):

    return url.replace('http://m.','http://www.')

####################################################################################################
def MetadataObjectForURL(url):

    # Attempt to extract the details of the title from the page.
    page = HTML.ElementFromURL(url)

    # Extract the details from the page
    # We parse the document as HTML, so use lowercase only for attribute names
    title = page.xpath("//meta[@property='og:title']")[0].get('content')
    description = page.xpath("//meta[@property='og:description']")[0].get('content')
    thumb = page.xpath("//link[@rel='image_src']")[0].get('href').replace('Medium.jpg', 'Large.jpg')
    duration = TimeToMs( page.xpath("//span[@class='duration']")[0].text )
    tags = page.xpath("//meta[@name='keywords']")[0].get('content').split(',')
    tags = [ tag.strip() for tag in tags ]

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb,
        duration = duration,
        tags = tags
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = '360',
        audio_channels = 2,
        optimized_for_streaming = True,
        parts = [PartObject(key=Callback(PlayVideo, url = url, file_ext = VIDEO_URL_EXT_HD, fallback = VIDEO_URL_EXT_SD))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = '180',
        audio_channels = 2,
        optimized_for_streaming = True,
        parts = [PartObject(key=Callback(PlayVideo, url = url, file_ext = VIDEO_URL_EXT_SD))]
      )
    ]

####################################################################################################
def PlayVideo(url, file_ext, fallback = None):

    page = HTML.ElementFromURL(url)

    # It appears that the best way to find the video is to use the thumbnail url as a starting point.
    # This will contain a image descriptor and filename. If we remove this, we can simply replace it
    # with a known extension to actually find the video's url.
    thumb = page.xpath("//link[@rel='image_src']")[0].get('href')
    thumb_without_extension = thumb[:thumb.rfind('.')]
    end = thumb_without_extension.rfind('.')
    video_url = thumb[:end] + file_ext

    # It appears that some of the videos have moved to a different server. I'm not sure how the app
    # can detect this, but the safest thing to do is to check the header, and if it fails attempt the
    # other known instance.
    if fallback is not None:
        try:
            HTTP.Request(video_url).headers
        except:
            video_url = video_url.replace('content5', 'content3')

    return Redirect(video_url)

####################################################################################################
def TimeToMs(timecode):

    seconds = 0
    duration = timecode.split(':')
    duration.reverse()

    for i in range(0, len(duration)):
        seconds += int(duration[i]) * (60**i)

    return seconds * 1000
