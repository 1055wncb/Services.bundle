VIDEO_URL_EXT_480 = '__VJ480PENG.mp4'
VIDEO_URL_EXT_360 = '__VJ360PENG.mp4'
VIDEO_URL_EXT_SD = '__PHOENG.mp4'

PLAYLIST_URL = 'http://www.videojug.com/feed/playlist?id=%s&items=&userName=&ar=16_9'

####################################################################################################
def NormalizeURL(url):

    return url.replace('http://m.','http://www.')

####################################################################################################
def MetadataObjectForURL(url):

    # Attempt to extract the details of the title from the page.
    page = HTML.ElementFromURL(url)

    # Extract the details from the page
    # We parse the document as HTML, so use lowercase only for attribute names
    title = page.xpath("//meta[@property='og:title']")[0].get('content')
    description = page.xpath("//meta[@property='og:description']")[0].get('content')
    thumb = page.xpath("//link[@rel='image_src']")[0].get('href').replace('Medium.jpg', 'Large.jpg')
    duration = TimeToMs( page.xpath("//span[@class='duration']")[0].text )
    tags = page.xpath("//meta[@name='keywords']")[0].get('content').split(',')
    tags = [ tag.strip() for tag in tags ]

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb,
        duration = duration,
        tags = tags
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = '480',
        audio_channels = 2,
        optimized_for_streaming = True,
        parts = [PartObject(key=Callback(PlayVideo, url = url, file_ext = VIDEO_URL_EXT_480))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = '360',
        audio_channels = 2,
        optimized_for_streaming = True,
        parts = [PartObject(key=Callback(PlayVideo, url = url, file_ext = VIDEO_URL_EXT_360))]
      ),
      MediaObject(
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        video_resolution = '180',
        audio_channels = 2,
        optimized_for_streaming = True,
        parts = [PartObject(key=Callback(PlayVideo, url = url, file_ext = VIDEO_URL_EXT_SD))]
      )
    ]

####################################################################################################
def PlayVideo(url, file_ext):

    page = HTML.ElementFromURL(url)

    # Attempt to locate the ID of the video
    video_src = page.xpath('//link[@rel = "video_src"]')[0].get('href')
    id = video_src.split('id=')[1]

    playlist = XML.ElementFromURL(PLAYLIST_URL % id)
    location = playlist.xpath('//Locations/Location')[0].get('Url')
    video_prefix = playlist.xpath('//Items/Media')[0].get('Prefix')

    # There appears to be a number of videos which are not available in all resolutions. Therefore
    # we must verify that the requested one exists and in the case that it doesn't drop down to 
    # another.
    resolutions = [VIDEO_URL_EXT_480, VIDEO_URL_EXT_360, VIDEO_URL_EXT_SD]
    index = resolutions.index(file_ext)
    for resolution_index in range(index, len(resolutions)):
        video_url = location + video_prefix + resolutions[resolution_index]
        try:
            HTTP.Request(video_url).headers
            return Redirect(video_url)
        except: pass

    return None

####################################################################################################
def TimeToMs(timecode):

    seconds = 0
    duration = timecode.split(':')
    duration.reverse()

    for i in range(0, len(duration)):
        seconds += int(duration[i]) * (60**i)

    return seconds * 1000
