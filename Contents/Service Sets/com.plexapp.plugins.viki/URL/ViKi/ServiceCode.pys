RE_VID = Regex("/videos/(?P<id>[0-9]+)")
JSON_URL = "http://www.viki.com/player/medias/%s/info.json?rtmp=true&source=direct"
SUBS_URL = "http://www.viki.com/player/medias/%s/subtitles.json?language_codes=%s"

####################################################################################################
def NormalizeURL(url):

  return url

####################################################################################################
def MetadataObjectForURL(url):

  video_id = RE_VID.search(url).group('id')

  data = HTML.ElementFromURL(url)
  video_type = data.xpath('//meta[@property="og:type"]')[0].get('content').split('.')[1]

  if video_type == "episode":
    try:
        episode = HTML.ElementFromString(data).xpath('//h3')[0].text.strip()
    except:
        episode = data.xpath('//meta[@property="og:title"]')[0].get('content')
    return EpisodeMetadata(url, episode)
  elif video_type == "movie":
    return MovieMetadata(url)
  elif video_type == "clip":
    ####return the default VideoClipObject####
    pass
  else:
    ####return the default VideoClipObject####
    pass

  data = JSON.ObjectFromURL(JSON_URL % video_id)

  title = data['title']
  summary = data['description']
  thumb = data['thumbnail']

  vc = VideoClipObject(
    title = title,
    summary = summary,
    thumb = thumb,
    source_title = "ViKi.com"
  )

  return vc

####################################################################################################
def EpisodeMetadata(url, episode):

  video_id = RE_VID.search(url).group('id')

  data = JSON.ObjectFromURL(JSON_URL % video_id)

  if 'errors' in data and 'geo_restriction' in data['errors']:
    raise Ex.MediaGeoblocked

  title = episode
  show = data['title']
  summary = data['description']
  absolute_index = int(episode.split(' ')[1])
  thumb = data['thumbnail']

  ec = EpisodeObject(
    title = title,
    show = show, 
    summary = summary,
    thumb = thumb,
    absolute_index = absolute_index,
    source_title = "ViKi.com"
  )

  return ec

####################################################################################################
def MovieMetadata(url):

  video_id = RE_VID.search(url).group('id')

  data = JSON.ObjectFromURL(JSON_URL % video_id)

  if 'errors' in data and 'geo_restriction' in data['errors']:
    raise Ex.MediaGeoblocked

  title = data['title']
  summary = data['description']
  thumb = data['thumbnail']

  mc = MovieObject(
    title = title,
    summary = summary,
    thumb = thumb,
    source_title = "ViKi.com"
  )

  return mc

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            container = 'mp4',
            video_resolution = 'sd',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC
        )
    ]

####################################################################################################
def PlayVideo(url):

  video_id = RE_VID.search(url).group('id')
  data = JSON.ObjectFromURL(JSON_URL % video_id)
  mp4_url = data['uri']
  return Redirect(mp4_url)

####################################################################################################
def SubsForURL(url):

  video_id = url.split('/')[-1]
  sub_lang =  "en" #Prefs["sub_lang"]
  data = JSON.ObjectFromURL(SUBS_URL % (video_id, sub_lang))

  timecode = 0
  count = 1

  subs = data['subtitles'][sub_lang]

  srt_subs = ''

  for segment in data['segments']:
    id = segment['id']
    start_time = ConvertTime(timecode)
    silent = segment['silent']
    end_time = ConvertTime(segment['end_time'])
    if silent != True:
      sub_string = subs[id]['body']
    else:
      sub_string = ''
    srt_subs = srt_subs + count + "\r\n" + start_time + " --> " + end_time + "\r\n" + sub_string + "\r\n"

    timecode = timecode + 1
    count = count + 1

  return srt_subs

####################################################################################################
def ConvertTime(ms):

  ms = int(ms)
  hours = ms / 3600000
  remainder = ms % 3600000
  minutes = remainder / 60000
  remainder = remainder % 60000
  seconds = remainder / 60
  milliseconds = remainder % 60

  time_code = "%d:%d:%d,%d" % (hours, minutes, seconds, milliseconds)

  return time_code
