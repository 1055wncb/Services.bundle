import urllib2
httpHeaders = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27' }

RE_THUMB = Regex("\['thumb'\].+?'([^']+)")
RE_SERVER = Regex("\['rtmpServer'\].+?'([^']+)")
RE_PATH = Regex("\['rtmpPath'\].+?'([^']+)")
RE_FLV_EXT = Regex('\.flv$')

####################################################################################################
def NormalizeURL(url):

  if url.find('/permalink/') != -1:
    request = urllib2.Request(url)
    opener = urllib2.build_opener(SmartRedirectHandler)
    f = opener.open(request)
    if f.status == 301 or f.status == 302:
      url = f.url.split('?')[0]
      return '%s?view=shortcutArticle&shortcutView=popupPlayer' % url
    else:
      Log(' --> No redirect for url: ' + url)
      Log(' --> HTTP status code: ' + f.status)
  else:
    url = url.split('?')[0]
    return '%s?view=shortcutArticle&shortcutView=popupPlayer' % url

####################################################################################################
def MetadataObjectForURL(url):

  details = HTTP.Request(url, cacheTime=CACHE_1DAY, headers=httpHeaders).content
  video_details = HTML.ElementFromString(details)

  title = video_details.xpath('//div[@id="videoMetaData"]/h1/text()[normalize-space(.)]')[0].strip()

  try:
    summary = video_details.xpath('//div[@id="videoMetaData"]//div[@class="longdesc"]/p')[0].text
  except:
    summary = ''

  try:
    thumb = RE_THUMB.search(details).group(1).replace('\/', '/')

    if thumb[0:4] != 'http':
      thumb = 'http://%s%s' % (url.split('/')[2], thumb)
  except:
    thumb = None

  video = VideoClipObject(
    title = title,
    summary = summary,
    thumb = thumb
  )

  return video

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocol = Protocol.RTMP
    )
  ]

####################################################################################################
def PlayVideo(url):

  details = HTTP.Request(url, cacheTime=CACHE_1DAY).content

  try:
    rtmpServer = RE_SERVER.search(details).group(1).replace('\/', '/')
    rtmpPath = RE_PATH.search(details).group(1).replace('\/', '/')
    rtmpPath = RE_FLV_EXT.sub('', rtmpPath)

    return Redirect(RTMPVideoURL(url=rtmpServer, clip=rtmpPath))
  except:
    Log(' --> Could not find RTMP video for url: ' + url)
    return None

####################################################################################################
class SmartRedirectHandler(urllib2.HTTPRedirectHandler):
  def http_error_301(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_301(self, req, fp, code, msg, headers)
    result.status = code
    return result

  def http_error_302(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)
    result.status = code
    return result
