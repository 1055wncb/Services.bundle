HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A523 Safari/8536.25'
}

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	url = url.replace('http://www.', 'http://m.')
	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS)

	yt_iframe = html.xpath('//iframe[contains(@src, "youtube.com/embed")]/@src')

	if len(yt_iframe) > 0:
		return URLService.MetadataObjectForURL(yt_iframe[0])

	return VideoClipObject(
		title = html.xpath('//meta[@property="og:title"]/@content')[0],
		summary = html.xpath('//meta[@property="og:description"]/@content')[0],
		thumb = html.xpath('//meta[@property="og:image"]/@content')[0]
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = 'sd',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	url = url.replace('http://www.', 'http://m.')
	video = HTML.ElementFromURL(url, headers=HTTP_HEADERS).xpath('//video/@src')

	if len(video) < 1:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video[0])
