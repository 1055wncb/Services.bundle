####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	title = html.xpath('//title/text()')[0].rsplit(' - ', 1)[0].strip()
	summary = html.xpath('//meta[@name="description"]/@content')[0].split('xHamster.com! ', 1)[-1].strip()

	if summary.startswith('xHamster'):
		summary = None

	if len(html.xpath('//a[contains(@href, ".mp4")]/img/@src')) > 0:
		thumb = html.xpath('//a[contains(@href, ".mp4")]/img/@src')[0].replace('/pl580/', '/').replace('_', '_b_')
	else:
		thumb = None

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb,
		genres = ['XXX','Adult','18+'],
		content_rating = 'X'
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	html = HTML.ElementFromURL(url)
	video_url = html.xpath('//a[contains(@href, ".mp4")]/@href')

	if len(video_url) < 1:
		raise Ex.MediaNotAvailable

	video_url = String.Unquote(video_url[0].split('mp4File=')[1]) if 'mp4File=' in video_url[0] else video_url[0]

	return IndirectResponse(VideoClipObject, key=video_url)
