RE_SRV_FILE = Regex("'srv': '([^']+)'.+'file': '([^']+)'", Regex.DOTALL)

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	title = html.xpath('//title/text()')[0].rsplit(' - ', 1)[0].strip()

	# A missing description tag means we don't have a video
	try:
		summary = html.xpath('//meta[@name="description"]/@content')[0].split('xHamster.com! ', 1)[-1].strip()
	except:
		raise Ex.MediaNotAvailable

	if summary.startswith('xHamster'):
		summary = None

	if len(html.xpath('//a[contains(@href, ".mp4")]/img/@src')) > 0:
		thumb = html.xpath('//a[contains(@href, ".mp4")]/img/@src')[0].replace('/pl580/', '/').replace('_', '_b_')
	else:
		thumb = None

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb,
		genres = ['XXX','Adult','18+'],
		content_rating = 'X'
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			container = 'flv',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	data = HTTP.Request(url).content

	try:
		(srv, file) = RE_SRV_FILE.search(data).groups()
	except:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key='%s/key=%s' % (srv, file))
