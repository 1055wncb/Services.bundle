THUMB_URL_720 = 'http://cdn.anythumb.com/1280x720/%s.jpg'
THUMB_URL_360 = 'http://cdn.anythumb.com/640x360/%s.jpg'
THUMB_URL_ORIG = 'http://cdn.anythumb.com/236x177/%s.jpg'

RE_VIDEO_720 = Regex("'720p': '([^']+)'")
RE_VIDEO_480 = Regex("'480p': '([^']+)'")

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	title = html.xpath('//title/text()')[0].split(' - beeg.')[0].strip()
	summary = html.xpath('//td[contains(@class, "synopsis")]/text()')

	if len(summary) > 0:
		if len(summary[0]) < 2:
			summary = None
		else:
			summary = summary[0]
	else:
		summary = None

	thumb_1 = THUMB_URL_720 % url.split('/')[-1]
	thumb_2 = THUMB_URL_360 % url.split('/')[-1]
	thumb_3 = THUMB_URL_ORIG % url.split('/')[-1]

	published = html.xpath('//th[text()="Published"]/following-sibling::td/text()')

	if len(published) > 0:
		originally_available_at = Datetime.ParseDate(published[0]).date()
	else:
		originally_available_at = None

	keywords = html.xpath('//meta[@name="keywords"]/@content')

	if len(keywords) > 0:
		tags = [tag.strip() for tag in keywords[0].split(',')]
	else:
		tags = []

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback([thumb_1, thumb_2, thumb_3]),
		originally_available_at = originally_available_at,
		tags = tags,
		content_rating = 'X'
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True if Client.Product not in ['Plex Web'] else False,
			parts = [
				PartObject(
					key = Callback(PlayVideo, url=url, res='720')
				)
			]
		),
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '480',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True if Client.Product not in ['Plex Web'] else False,
			parts = [
				PartObject(
					key = Callback(PlayVideo, url=url, res='480')
				)
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res='720', **kwargs):

	try:
		data = HTTP.Request(url).content
	except:
		raise Ex.MediaNotAvailable

	if res == '720' and RE_VIDEO_720.search(data):
		return IndirectResponse(VideoClipObject, key=RE_VIDEO_720.search(data).group(1))
	elif RE_VIDEO_480.search(data):
		return IndirectResponse(VideoClipObject, key=RE_VIDEO_480.search(data).group(1))
	else:
		raise Ex.MediaNotAvailable
