POPS_URL = 'http://cosmos.bcst.yahoo.com/rest/v2/pops;element=stream;bw=%d;dynamicstream=1;outputformat=mrss;tech=flv,mp4;lmsoverride=1;id=%s'
VIDEO_URL = 'http://playlist.yahoo.com/makeplaylist.dll?sdm=web&pt=rd&sid=%s'
JSON_URL = 'http://movies.yahoo.com/_xhr/videos/channel-data/?start=0&count=100&source=movie&template=ipvp_thmbs&m_uuid=%s'

RE_ID_EMBED = Regex('vid=([0-9]+)')
RE_SID = Regex('<cms.+sid=.([0-9]+)')

HTTP.CacheTime = CACHE_1DAY

####################################################################################################
def NormalizeURL(url):

	if '#' in url:
		(url, video) = url.split('#', 1)
		url = FindVideoURL(url, video)
	else:
		url = url.split(';', 1)[0]

	return url

####################################################################################################
def MetadataObjectForURL(url):

	if '|' in url:
		(url, title) = url.split('|', 1)
		title = String.Unquote(title)
	else:
		title = None

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	if not title:
		title = html.xpath('//meta[@property="og:title"]')[0].get('content')

	try: summary = html.xpath('//meta[@property="og:description"]')[0].get('content')
	except: summary = None

	thumb = html.xpath('//meta[@property="og:image"]')[0].get('content')

	if '/http:' in thumb or '/http%3A' in thumb:
		thumb = String.Unquote(thumb)
		thumb = 'http:%s' % thumb.rsplit('/http:', 1)[1]
		thumb = thumb.replace('.jpg.cf.png', '.jpg')

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=4000))],
			bitrate = 4000,
			video_resolution = '1080',
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=3008))],
			bitrate = 3008,
			video_resolution = '720',
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=2000))],
			bitrate = 2000,
			video_resolution = '720',
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=1504))],
			bitrate = 1504,
			video_resolution = '480',
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, bitrate):

	if '|' in url:
		(url, title) = url.split('|', 1)

	page = HTTP.Request(url).content
	id_embed = RE_ID_EMBED.search(page)

	if id_embed:
		id = id_embed.group(1)
	else:
		Log("Couldn't find video id.")
		return None

	xml = HTTP.Request(POPS_URL % (bitrate, id), cacheTime=0).content
	sid = RE_SID.search(xml).group(1)

	return IndirectResponse(VideoClipObject, key=VIDEO_URL % sid)

####################################################################################################
def FindVideoURL(url, video):

	video = String.Unquote(video).lower()

	url = url.rstrip('/')
	if not url.endswith('/trailers'):
		url = '%s/trailers/' % url
	else:
		url = '%s/' % url

	html = HTML.ElementFromURL(url)
	m_uuid = html.xpath('//input[@name="entity_id"]')[0].get('value')
	json = JSON.ObjectFromURL(JSON_URL % m_uuid)
	smallest_distance = None

	for key in json['items'].keys():
		title = json['items'][key]['ttle_x'].lower()
		distance = String.LevenshteinDistance(title, video)

		if video in title:
			distance = distance - 2*len(video)

		if not smallest_distance or distance < smallest_distance:
			smallest_distance = distance
			id = json['items'][key]['id'].split('-')[-1]
			trailer_url = '%s/x-%s.html' % (url.rstrip('/'), id)
			video_title = json['items'][key]['ttle_x']

	return '%s|%s' % (trailer_url, String.Quote(video_title))
