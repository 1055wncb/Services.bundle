import re, urlparse, cgi

DEVELOPER_KEY = 'AI39si7PodNU93CVDU6kxh3-m2R9hkwqoVrfijDMr0L85J94ZrJFlimNxzFA9cSky9jCSHz9epJdps8yqHu1wb743d_SfSCRWA'
YOUTUBE_VIDEO_DETAILS = 'http://gdata.youtube.com/feeds/api/videos/%s?v=2&alt=jsonc'
YOUTUBE_VIDEO_FORMATS = ['Standard', 'Medium', 'High', '720p', '1080p']
YOUTUBE_FMT =           [ 34,         18,       35,     22,     37]
YOUTUBE_CONTAINERS =    ['flv',      'mp4',    'flv',  'mp4',  'mp4']
YOUTUBE_VIDEORES =      ['sd',       'sd',     '480',  '720',  '1080']
YOUTUBE_VIDEOCODEC =    ['h264',     'h264',   'h264', 'h264', 'h264']
YOUTUBE_AUDIOCODEC =    ['aac',      'aac',    'aac',  'aac',  'aac']

httpHeaders = { 'X-GData-Key' : "key="+DEVELOPER_KEY }

def NormalizeURL(url):
  video_id = None

  if isinstance(url, basestring):
    url = urlparse.urlparse(url)

  domain = url.netloc

  if domain.startswith('youtube.'):
    domain = 'www.' + domain

  # Edit mobile urls
  if domain.startswith('m.'):
    domain = domain.replace('m.', 'www.')

    # Rewrite mobile urls that contain a hash
    if url.fragment != '':
      url = urlparse.urlparse('%s://%s%s' % (url.scheme, domain, url.fragment))

  # http://www.youtube.com/?v=lgTssWW2Qw4&feature=player_embedded
  # http://www.youtube.com/watch?v=lgTssWW2Qw4&feature=player_embedded
  if url.path == '/' or re.match("^/watch(_popup)?", url.path):
    qs = cgi.parse_qs(url.query)
    if 'v' in qs:
      video_id = cgi.parse_qs(url.query)['v'][0]

  # http://youtu.be/vXhmyyXFd5I
  elif domain == 'youtu.be':
    domain = 'www.youtube.com'
    video_id = url.path[1:]

  # http://www.youtube.com/user/andyverg#p/a/u/0/HTGOoQNYGL4
  elif (url.path[0:6] == '/user/' or re.match("^/[^/]+$", url.path)) and url.fragment != '':
    video_id = url.fragment.split('/')[-1]

  # http://www.youtube.com/v/taaSlWjKdDY
  elif url.path[0:3] == '/v/':
    video_id = re.findall('/v/(.{11})', url.path)[0]

  # http://www.youtube.com/e/NO00y65njH0
  elif url.path[0:3] == '/e/':
    video_id = re.findall('/e/(.{11})', url.path)[0]

  # http://www.youtube.com/embed/nd5WGLWNllA
  elif url.path[0:7] == '/embed/':
    video_id = re.findall('/embed/(.{11})', url.path)[0]

  # http://www.youtube.com/my_subscriptions?pid=h1zmNxWzZYk&show_edit=1&feature=uploadeemail_edit
  elif url.path[0:17] == '/my_subscriptions' and url.query != '':
    video_id = re.findall('pid=(.{11})', url.query)[0]

  if video_id is None:
    page = HTTP.Request(url.geturl())
    if re.search('text/html', page.headers['content-type']):
      id = re.search('"video_id":\s"([^"]+)', page.content)
      if id:
        video_id = id.group(1)
      else:
        return None
    else:
      return None

  return 'http://%s/watch?v=%s' % (domain, video_id)

def MetadataObjectForURL(url):
  video_id = url[url.find('v=')+2:].split('&')[0]
  details = JSON.ObjectFromURL(YOUTUBE_VIDEO_DETAILS % video_id, headers=httpHeaders)['data']

  thumbs = details['thumbnail']
  if 'hqDefault' in thumbs:
    thumb = thumbs['hqDefault']
  else:
    thumb = thumbs.get('sqDefault', None)

  try:
    rating = details['rating'] * 2
  except:
    rating = None

  try:
    tags = details['tags']
  except:
    tags = []

  video = VideoClipObject(
    title = details['title'],
    summary = details['description'],
    thumb = thumb,
    rating = rating,
    tags = tags,
    originally_available_at = Datetime.ParseDate(details['uploaded']).date(),
    duration = details['duration'] * 1000,
    genres = [details['category']]
  )

  return video

def MediaObjectsForURL(url):
  ret = []

  fmts = list(YOUTUBE_VIDEO_FORMATS)
  fmts.reverse()

  for fmt in fmts:
    index = YOUTUBE_VIDEO_FORMATS.index(fmt)
    ret.append(MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, post_url=url, default_fmt=fmt))],
      container = YOUTUBE_CONTAINERS[index],
      video_codec = YOUTUBE_VIDEOCODEC[index],
      audio_codec = YOUTUBE_AUDIOCODEC[index],
      video_resolution = YOUTUBE_VIDEORES[index],
      optimized_for_streaming = (YOUTUBE_CONTAINERS[index] == 'mp4'),
    ))

  return ret

def PickMatch(fmts, index, match_format):
  fmt = None
  desired_container = YOUTUBE_CONTAINERS[index]
  desired_codec = YOUTUBE_VIDEOCODEC[index]

  # See if we can find the right quality.
  for i in reversed(range(0, index+1)):
    if YOUTUBE_FMT[i] in fmts:
      this_container = YOUTUBE_CONTAINERS[i]
      this_codec = YOUTUBE_VIDEOCODEC[i]
      if match_format == False or (this_container == desired_container and this_codec == desired_codec):
        Log(" -> PICKED %s %s/%s %s", YOUTUBE_CONTAINERS[i], YOUTUBE_VIDEOCODEC[i], YOUTUBE_AUDIOCODEC[i], YOUTUBE_VIDEORES[i])
        fmt = YOUTUBE_FMT[i]
        break

  return fmt

@indirect
def PlayVideo(url, default_fmt = None):
  yt_page = HTTP.Request(url, headers=httpHeaders).content

  # Build up the format map.
  import re
  fmt_url_map = re.findall('"url_encoded_fmt_stream_map".+?"([^"]+)', yt_page)[0]
  fmt_url_map = fmt_url_map.replace('\/', '/').split(',')

  fmts = []
  fmts_info = {}

  for f in fmt_url_map:
    map = {}
    params = f.split('\u0026')
    for p in params:
      (name, value) = p.split('=')
      map[name] = value
    quality = int(map['itag'])
    fmts_info[quality] = String.Unquote(map['url'])
    fmts.append(quality)

  Log("Available formats: %s", str(fmts))

  # Figure out the index we're looking for.
  index = YOUTUBE_VIDEO_FORMATS.index(default_fmt)

  # Try to match with format.
  fmt = PickMatch(fmts, index, True)

  # If that didn't work, pick any format in <= quality.
  if not fmt:
    fmt = PickMatch(fmts, index, False)

  # Just pick the worst quality.
  if not fmt:
    fmt = fmts[-1]

  final_url = fmts_info[fmt].decode('unicode_escape')
  Log("VIDEO URL (fmt=%d): %s", fmt, final_url)

  c = ObjectContainer()
  c.add(VideoClipObject(
    key = URLService.LookupURLForMediaURL(url.decode('unicode_escape')),
    items = [
      MediaObject(
        parts = [
          PartObject(key = final_url)
        ],
        protocol = Protocol.HTTPStreamingVideo if fmt in (18, 22, 37, 38) else Protocol.HTTPVideo
      )
    ]
  ))
  c.http_cookies = HTTP.CookiesForURL('http://www.youtube.com')
  return c
