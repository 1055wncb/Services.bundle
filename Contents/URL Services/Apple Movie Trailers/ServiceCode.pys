import re

httpHeaders = { 'User-Agent' : 'iTunes/10.2.1' }
AMT_VIDEOS_NS = {'a':'http://www.apple.com/itms/'}

####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):
  xml = XML.ElementFromURL(BuildXmlUrl(url), cacheTime=7200, headers=httpHeaders)

  movie_title = xml.xpath('//a:TrackList//a:array/a:dict[1]/a:key[text()="playlistName"]/following-sibling::*[1]', namespaces=AMT_VIDEOS_NS)[0].text
  subtitle = xml.xpath('//a:TrackList//a:array/a:dict[1]/a:key[text()="songName"]/following-sibling::*[1]', namespaces=AMT_VIDEOS_NS)[0].text.rsplit(' (', 1)[0]
  title = movie_title + ' (' + subtitle + ')'
  summary = xml.xpath('//a:ScrollView//comment()[contains(.,"DESCRIPTION")]/following-sibling::a:TextView[1]/a:SetFontStyle', namespaces=AMT_VIDEOS_NS)[0].text.strip()

  # Poster
  try:
    thumb = xml.xpath('//a:PictureView[contains(@url, "poster.jpg") or contains(@url, "poster-large.jpg")]', namespaces=AMT_VIDEOS_NS)[0].get('url')
  except:
    thumb = None

  # Construct a metadata item
  return VideoClipObject(
    title = title,
    summary = summary,
    thumb = thumb
  )

####################################################################################################
def MediaObjectsForURL(url):
  items = []

  for video in XML.ElementFromURL(BuildXmlUrl(url), cacheTime=7200, headers=httpHeaders).xpath('//a:TrackList//a:array/a:dict', namespaces=AMT_VIDEOS_NS):
    duration = video.xpath('./a:key[text()="duration"]/following-sibling::*[1]', namespaces=AMT_VIDEOS_NS)[0].text
    video_url = video.xpath('./a:key[text()="previewURL"]/following-sibling::*[1]', namespaces=AMT_VIDEOS_NS)[0].text

    ipod, video_resolution = VideoInfo(video_url)

    mo = MediaObject(
      parts = [
        PartObject(key=Callback(PlayVideo, url=video_url))
      ],
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      video_resolution = video_resolution,
      duration = int(duration),
      optimized_for_streaming = True
    )

    items.append(mo)

  items.reverse()
  return items

####################################################################################################
def VideoInfo(url):
  ipod = False
  if re.search('_i([0-9]+)\.(m4v|mov)$', url):
    ipod = True

  # For HD videos: use the given height (480, 720, 1080)
  # For SD videos: use a 16x9 AR when calculating the approximate height of a video for videos we know the width of
  #
  resolution = re.search('_(h|i)([0-9]+)(w|p)?\.(mov|m4v)', url)
  
  if resolution.group(3) == 'p':
    video_resolution = resolution.group(2)
  elif resolution.group(1) == 'i' and resolution.group(2) == '320':
    video_resolution = 360 # Apple's i320 videos have actually a width of 640 -- (640/16)*9 = 360
  else:
    width = int(resolution.group(2))
    video_resolution = int((width/16)*9)

  if int(video_resolution) in [576, 480, 720, 1080]:
    video_resolution = str(video_resolution)
  else:
    video_resolution = 'sd'

  return [ipod, video_resolution]

####################################################################################################
def BuildXmlUrl(url):
  studio, title, video = re.findall('^http://trailers\.apple\.com/trailers/([^/]+)/([^/#]+)/?#?(.+)?$', url)[0]
  if not video: video = 'trailer'
  xml_url = 'http://trailers.apple.com/moviesxml/s/%s/%s/%s.xml' % (studio, title, video)
  return xml_url

####################################################################################################
@indirect
def PlayVideo(url):
  c = ObjectContainer()

  c.add(VideoClipObject(
    items = [
      MediaObject(
        parts = [PartObject(key=url)]
      )
    ]
  ))

  c.http_headers = httpHeaders
  return c
