import re, urllib2, httplib
httpHeaders = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27' }

####################################################################################################
def NormalizeURL(url):
  post_id = None

  if url.find('/file/') != -1:
    file_id = re.search('blip\.tv/file/([0-9]{7})', url).group(1)
    url = 'http://blip.tv/file/%s' % file_id
  elif url.find('/play/') != -1:
    play_id = re.search('blip\.tv/play/([^$.]+)', url).group(1)
    request = urllib2.Request('http://blip.tv/play/%s' % play_id)
    opener = urllib2.build_opener(SmartRedirectHandler)
    f = opener.open(request)
    if f.status == 301 or f.status == 302:
      redirect_url = String.Unquote(f.url, usePlus=False)
      post_id = re.search('blip\.tv/rss/flash/([0-9]{7})', redirect_url).group(1)
  else:
    try:
      post_id = re.search('blip\.tv/.+/.+-([0-9]{7})', url).group(1)
    except:
      pass

  if post_id:
    data = GetJSON('http://blip.tv/posts/%s?skin=json&version=2' % post_id)
    if 'url' in data:
      url = data['url']

  return url

####################################################################################################
def MetadataObjectForURL(url):
  data = GetJSON(url + '?skin=json')

  tags = []
  for tag in data['tags']:
    tags.append(tag['name'])

  video = VideoClipObject(
    title = data['title'],
    summary = String.StripTags(re.sub(u'[\u0000-\u001F]', '', data['description'])),
    originally_available_at = Datetime.ParseDate(data['datestamp']).date(),
    duration = int(data['media']['duration']) * 1000,
    thumb = data['thumbnailUrl'],
    genres = [data['categoryName']],
    tags = tags
  )

  return video

####################################################################################################
def MediaObjectsForURL(url):
  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      container = 'm4v',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='720p'))],
      protocols = [Protocol.HTTPStreamingVideo720p],
      video_resolution = '720',
      container = 'm4v',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='sd'))],
      protocols = [Protocol.HTTPStreamingVideo],
      video_resolution = 'sd',
      container = 'm4v',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    )
  ]

####################################################################################################
def PlayVideo(url, fmt=None):
  data = GetJSON(url + '?skin=json')

  if not fmt:
    fmt = Prefs['blip_fmt']

  media = {}
  for video in data['additionalMedia']:
    role = video['role']
    media[role] = video['url']

  if fmt == '720p' and 'Blip HD 720' in media:
    video_url = media['Blip HD 720']
  else:
    try: video_url = media['Blip SD']
    except: video_url = media['Portable (iPod)']

  return Redirect(video_url)

####################################################################################################
def GetJSON(url):
  try:
    json = HTTP.Request(url, cacheTime=CACHE_1DAY, headers=httpHeaders).content
    json = re.search('blip_ws_results\(\[(.*)\]\);', json, re.DOTALL).group(1)
    json = JSON.ObjectFromString(json)

    if 'Post' in json:
      json = json['Post']

    return json
  except:
    return {}

####################################################################################################
class SmartRedirectHandler(urllib2.HTTPRedirectHandler):
  def http_error_301(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_301(self, req, fp, code, msg, headers)
    result.status = code
    return result

  def http_error_302(self, req, fp, code, msg, headers):
    result = urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)
    result.status = code
    return result
