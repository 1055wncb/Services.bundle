XML_URL = 'http://www.cnn.com/video/data/3.0/video/%s/index.xml'

CNN_SMIL = 'http://ht.cdn.turner.com/cnn/big/bestoftv/2011/07/25/exp.tsr.todd.murdoch.pkg.mov.cnn.smil'

MEDIA_URL = 'http://ht.cdn.turner.com/%s'

CNN_URL = 'http://www.cnn.com/video/'

####################################################################################################

def NormalizeURL(url):
  ### Add changes here if we start seeing non-"normal" urls
  return url

####################################################################################################

def MetadataObjectForURL(url):
  data_url = XML_URL % url.split('#')[1].strip('/video/')
  data = XML.ElementFromURL(data_url, cacheTime=7200, errors='ignore')
  
  thumbUrl = data.xpath('//image[@name="640x480"]')[0].text
  #Log(thumbUrl)
  
  summary = data.xpath('//description')[0].text
  #Log(summary)
  
  date = data.xpath('//dateCreated')[0].text
  
  duration = data.xpath('//length')[0].text
  #Log(duration)
  durationParts = duration.split(':')
  if durationParts[0] == '':
    duration = int(durationParts[1])*1000
  else:
    duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
  #Log(duration)
  
  try: show = data.xpath('//branding')[0].text
  except: show = ''
  
  clip_title = data.xpath('//headline')[0].text
  #Log(clip_title)

  # Construct a metadata item
  co = EpisodeObject(
    title = clip_title,
    originally_available_at = Datetime.ParseDate(date).date(),
    duration = duration,
    summary = summary,
    tags = [show],
    thumb = thumbUrl,
    source_title = 'CNN.com'
    )
  return co
  
####################################################################################################
def MediaObjectsForURL(url):
  
    return [
        MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='1280x720'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = '720',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
        ),
    MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='896x504'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = '504',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
    ),
    MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='768x432'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = '432',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
    ),
    MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='640x360'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = '360',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
    ),
    MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='512x288'))],
        container = 'mp4',
        optimized_for_streaming = True,
        aspect_ratio = "1.78",
        video_resolution = 'sd',
        video_codec = VideoCodec.H264,
        audio_codec = AudioCodec.AAC,
        audio_channels = 2
    )
  ]

####################################################################################################
def PlayVideo(url, resolution):
  
    data_url = XML_URL % url.split('#')[1]
    data = XML.ElementFromURL(data_url, cacheTime=7200, errors='ignore')
  
    smil_url = data.xpath('//file')[0].text
  
    smil = HTML.ElementFromURL(smil_url, cacheTime=7200, errors='ignore')
  
    mp4_url = ''
  
    for video in smil.xpath('//video'):
        mp4_url = video.get('src')
        if resolution in mp4_url:
          break
        #test_res = video.get('bitrate')
        #if test_res == resolution:
        #    mp4_url = video.get('src')
        else: pass
    
    if mp4_url == '': Log('Unable to find  MP4 link')
    
    return Redirect(MEDIA_URL % mp4_url)

####################################################################################################
def TestURLs():
    test_urls = []
    cnn = HTML.ElementFromURL(CNN_URL)

    for video in cnn.xpath('//ol[@id="WE_RECOMMENDList"]/li'):
        if len(test_urls) > 2: break
        else: pass
        video_url = CNN_URL + '#/' + video.get('videoid')
        Log(video_url)
        test_urls.append(video_url)

    return test_urls