import re
CLIP_LOOKUP	= 'http://watch.%s/AJAX/ClipLookup.aspx?episodeid=%s'

####################################################################################################
def MetadataObjectForURL(url):
  
  data = HTML.ElementFromURL(url)

  title = data.xpath('//meta[@name="title"]')[0].get('content').split(' : ')
  show_title = title[0]
  episode_title = title[1]
  summary = data.xpath('//meta[@name="description"]')[0].get('content')
  thumbUrl = data.xpath('//meta[@name="Thumbnail"]')[0].get('content')
  
  try: season = int(re.search('season\-([0-9]+)', url).group(1))
  except: season = None
  try: episode = int(re.search('-ep-([0-9]+)-', url).group(1).lstrip(season))
  except: episode = None

  print season, episode

  # Construct a metadata item
  ec = EpisodeObject(
    title = episode_title,
    show = show_title,
    season = season,
    index = episode,
    #originally_available_at = postedDate,
    summary = summary,
    thumb = thumbUrl
  )
  return ec

####################################################################################################
def MediaObjectsForURL(url):

  return [(MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocols = [Protocol.WebKit],
      video_resolution = '720'
        )
      )
    ]

####################################################################################################
def PlayVideo(url):
  video_url = None

  episode_id = HTML.ElementFromURL(url).xpath('//meta[@name="EntityId"]')[0].get('content')
  Log(episode_id)
  network = re.search('watch\.(.+?)/', url).group(1)
  Log(network)
  
  show = HTTP.Request(CLIP_LOOKUP %(network, episode_id)).content
  Log(show)
  expression = re.compile("EpisodePermalink:'(.+?)'", re.MULTILINE)
  permalink = expression.search(show).group(1)
  Log(permalink)
  level = 0
  format = re.search("Format:'(.+?)'", show).group(1)

  if format == 'WMV':
    video_url = url + '#Silverlight'
  else:
    video_url = url + '#Flash'

  return Redirect(video_url)