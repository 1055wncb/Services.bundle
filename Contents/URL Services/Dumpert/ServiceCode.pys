import re

DEFAULT_AUDIO_THUMB = 'http://www.dumpert.nl/gfx/thumb_audio.png'
THUMB_URL = 'http://static.dumpert.nl/sq_thumbs/%s_%s.jpg'

####################################################################################################

def MetadataObjectForURL(url):
    try:

        # Request the page
        page = HTML.ElementFromURL(url)

        # Extract the details from the page...
        title = page.xpath("//meta[@name='title']")[0].get('content')
        summary = page.xpath("//meta[@name='description']")[0].get('content')

        # If the url contains an audio clip, we should return a suitable 
        # TrackObject.
        audio_elements = page.xpath("//script[contains(text(), 'audio')]")
        if len(audio_elements) > 0:

            thumb = DEFAULT_AUDIO_THUMB
            return TrackObject(
                title = title,
                thumb = thumb)

        # Otherwise, the page contains a VideoClipObject. 
        thumb = page.xpath("//link[@rel='image_src']")[0].get('href')
        return VideoClipObject(
            title = title,
            summary = summary,
            thumb = thumb)

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    page_content = HTTP.Request(url).content
    page = HTML.ElementFromString(page_content)

    # If the page contains scripts associated with audio, then the page contains MP3's
    audio_elements = page.xpath("//script[contains(text(), 'audio')]")
    if len(audio_elements) > 0:
        track_url = re.match(".*mp3player.swf\?file=(?P<track_url>[^&]*).*", page_content, re.DOTALL).groupdict()['track_url']
        return [
          MediaObject(
            audio_codec = AudioCodec.MP3,
            parts = [PartObject(key=track_url)]
          )
        ]

    # We now have to examine the video url to determine it's format.
    container = 'flv'
    video_url = re.match(".*var flashurl = '(?P<video_url>[^\']*)';.*", page_content, re.DOTALL).groupdict()['video_url']
    if video_url.endswith(".mp4"):
        container = Container.MP4

    return [
      MediaObject(
        audio_codec = AudioCodec.AAC,
        container = container,
        parts = [PartObject(key=video_url)]
      )
    ]