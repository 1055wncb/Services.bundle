import re

####################################################################################################

def MetadataObjectForURL(url):
    try:
        
        # Extract the details from the page.
        details = JSONFromURL(url)
        return VideoClipObject(
            title = details['displayName'],
            summary = details['shortDescription'],
            thumb = details['videoStillURL'],
            originally_available_at = details['publishedDate'],
            tags = [ tag['name'] for tag in details['tags'] ])

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################

def MediaObjectsForURL(url):
    return [
        MediaObject(
          protocol = Protocol.RTMP,
          parts = [PartObject(key=Callback(PlayVideo, url = url))]
        )
    ]

####################################################################################################

def PlayVideo(url):

    # Extract the details from the page
    details = JSONFromURL(url)
    url = details['FLVFullLengthURL']

    # Generate the appropriate RTMP streams.
    rtmp_details = url.split('&')
    return Redirect(RTMPVideoItem(rtmp_details[0], clip = rtmp_details[1]))

####################################################################################################

class ContentOverride(object):
    def __init__ (self, videoId=None):
        self.contentType = int(0)
        self.contentIds = None
        self.target = 'videoPlayer'
        self.contentId = int(videoId)
        self.featuredRefId = None
        self.contentRefIds = None
        self.featuredId = float('nan')
        self.contentRefId = None

class ViewerExperienceRequest(object):
    def __init__ (self, playerId=None, video=None):
        self.experienceId = int(playerId)
        self.contentOverrides = []
        self.contentOverrides.append(video)
        self.TTLToken = ''
        self.URL = ''

def JSONFromURL(url):
    content = HTTP.Request(url).content
    playerId = re.search('param name="playerID" value="([0-9]+)"', content).group(1)
    videoId = re.search('param name="@videoPlayer" value="([0-9]+)"', content).group(1)
    return DoAmfRequest(playerId, videoId)['programmedContent']['videoPlayer']['mediaDTO']
    
def DoAmfRequest(playerId, videoId):
    client = AMF.RemotingService('http://c.brightcove.com/services/messagebroker/amf', user_agent='', client_type=3)
    service = client.getService('com.brightcove.experience.ExperienceRuntimeFacade')
    
    AMF.RegisterClass(ContentOverride, 'com.brightcove.experience.ContentOverride')
    AMF.RegisterClass(ViewerExperienceRequest, 'com.brightcove.experience.ViewerExperienceRequest')
    
    video = ContentOverride(videoId)
    experience = ViewerExperienceRequest(playerId, video)
    
    result = service.getDataForExperience('', experience)
    return result
