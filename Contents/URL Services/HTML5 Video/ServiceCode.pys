import re, urlparse

# use the iPad user agent to try to make websites give us <video> instead of Flash
httpHeaders = { 'User-Agent' : 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10' }

def FixUrl(parent_url, url):
  parent_url = urlparse.urlparse(parent_url)
  
  if url and url[0] == '/':
    # Absolute path.
    final_url = '%s://%s%s' % (parent_url.scheme, parent_url.netloc, url)
  elif url and url.find('://') == -1:
    # Relative path.
    final_url = '%s://%s%s%s' % (parent_url.scheme, parent_url.netloc, parent_url.path, url)
  else:
    final_url = url
  
  return final_url

def MetadataObjectForURL(url):
  the_url = urlparse.urlparse(url)
  doc = HTML.ElementFromURL(url, headers=httpHeaders)
  videos = doc.xpath('//video')

  if len(videos) == 0:
    return None

  tag = videos[0]

  poster = FixUrl(url, tag.get('poster'))
    
  return VideoClipObject(
    title = tag.get('title') or doc.xpath('//title')[0].text.strip(),
    thumb = poster,
  )

def MediaObjectsForURL(url):
  doc = HTML.ElementFromURL(url, headers=httpHeaders)
  videos = doc.xpath('//video')

  if len(videos) == 0:
    return None

  def codecsForVideoTypeValue(value):
    if value == None:
      return None

    match = re.search('codecs="([^"]+)"', value)
    if match:
      return re.split('\s*,\s*', match.groups()[0])

  tag = videos[0]
  width = tag.get('width') or tag.get('videoWidth')
  height = tag.get('height') or tag.get('videoHeight')

  result = []
  sources = tag.xpath('./source')
  sources.insert(0, tag)

  for source in sources:
    src = source.get('src')

    if src == None:
      continue

    src = FixUrl(url, src)
    videoType = source.get('type')
    codecs = codecsForVideoTypeValue(videoType)
    attrs = {
      'parts': [PartObject(key=src)],
      'protocol': Protocol.HTTPVideo
    }

    if codecs and len(codecs) > 0:
      attrs['video_codec'] = codecs[0]

    if width:
      attrs['width'] = int(width)

    if height:
      attrs['height'] = int(height)

    if codecs and len(codecs) > 1:
      attrs['audio_codec'] = codecs[1]

    result.append(MediaObject(**attrs))

  return result

