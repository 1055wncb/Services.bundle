import re

def NormalizeURL(url):
  return url
 
def MetadataObjectForURL(url):
  smil = GetXML(url)
  data = HTML.ElementFromURL(url)

  title = smil.xpath('//title')[0].text
  #Log(title)
  try: summary = data.xpath('//div[@class="video-caption bottom_1"]')[0].text.strip()
  except: summary = ''
  date = smil.xpath('//airdate')[0].text
  Log(date)
  thumb = smil.xpath('//switch[@format-height="720"]/img')[0].get('src')
  Log(thumb)
 
  # Construct a metadata item
  vc = VideoClipObject(
    title = title,
    summary = summary,
    thumb = thumb,
    #duration = duration,
    originally_available_at = Datetime.ParseDate(date).date()
  ) 
  return vc
 
def MediaObjectsForURL(url):
  return [
    MediaObject(
    parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='hd'))],
    container = 'mp4',
    protocol = 'HTTPMP4Video',
    video_resolution = '720',
    aspect_ratio = '1.77',
    video_codec = VideoCodec.H264,
    audio_codec = AudioCodec.AAC,
    audio_channels = 2
    ),
    MediaObject(
    parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='sd'))],
    container = 'mp4',
    protocol = 'HTTPMP4Video',
    video_resolution = 'sd',
    aspect_ratio = '1.77',
    video_codec = VideoCodec.H264,
    audio_codec = AudioCodec.AAC,
    audio_channels = 2
    )
  ]

def PlayVideo(url, fmt):
 
  smil = GetXML(url)
  
  if fmt == 'hd':
    try:
      video_url = smil.xpath('//downloadable[@type="HQ"]')[0].get('src')
    except:
      video_url = smil.xpath('//downloadable[@type="iPod"]')[0].get('src')
  elif fmt == 'sd':
    video_url = smil.xpath('//downloadable[@type="iPod"]')[0].get('src')
  #Log(video_url)
 
  return Redirect(video_url)
 
def GetXML(url):
  
  data = HTTP.Request(url).content
  #Log(data)
  xml_url = re.search('"config_episodic":"(http:.+\.xml)",', data).group(1)
  #Log(xml_url)
  xml = HTML.ElementFromURL(xml_url.replace('\\',''))
 
  return xml