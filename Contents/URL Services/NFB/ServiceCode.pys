####################################################################################################
def NormalizeURL(url):
  if url[-1] == '/':
    url = url[:-1]
  return url

####################################################################################################
def MetadataObjectForURL(url):
  data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')

  title = data.xpath('//meta[@name="dcterms.title"]')[0].get('content')
  summary = data.xpath('//meta[@name="dcterms.description"]')[0].get('content')
  try: director = data.xpath('//ul[@class="infos player-tools"]/li/ul/li/a/em')[0].text
  except: director = ''
  
  try:
      year = data.xpath('//ul[@class="infos player-tools"]/li/ul/li/a/em')[-1].text
      originally_available_at = Datetime.ParseDate(year).date()
  except:
      originally_available_at = None
  
  duration = data.xpath('//ul[@class="infos player-tools"]//em[@itemprop="duration"]')[0].get('datetime')[2:]
  durationParts = duration.split(':')
  duration = ((int(durationParts[0]) * 3600) + (int(durationParts[1]) * 60) + int(durationParts[2]))*1000
    
  thumbUrl = data.xpath('//link[@rel="image_src"]')[0].get('href')
  
  # Construct a metadata item
  mc = MovieObject(
    title = title,
    duration = duration, 
    originally_available_at = originally_available_at,
    summary = summary,
    directors = [director],
    thumb = thumbUrl
  )
  return mc
  
####################################################################################################

def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocols = [Protocol.RTMP],
      ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='1080p'))],
      protocols = [Protocol.RTMP],
      video_resolution = '1080',
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
      ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='720p'))],
      protocols = [Protocol.RTMP],
      video_resolution = '720',
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='576p'))],
      protocols = [Protocol.RTMP],
      video_resolution = '480',
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='480p'))],
      protocols = [Protocol.RTMP],
      video_resolution = '576',
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='sd'))],
      protocols = [Protocol.RTMP],
      video_resolution = 'sd',
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
  ]

####################################################################################################

def PlayVideo(url, fmt=None):

  fmt_map = {"sd":"low", "480p":"normal", "576p":"extreme", "720p":"720p", "1080p":"1080p"}
  video_page = HTML.ElementFromURL(url, errors='ignore')
  video_url = video_page.xpath('//link[@rel="video_src"]')[0].get('href')
  video_url = video_url.split('&width=')[0]
  video_id = video_url.split('?mID=')[1]

  client = AMF.RemotingService('http://www.nfb.ca/gwplayer/', user_agent='', client_type=3)
  service = client.getService('get_movie_package')
  result = service('06bc1add-b90e-5539-9b8f-5345fd0de479', video_id, 'default')

  VIDEO_FORMATS = ["low", "normal", "extreme", "720p", "1080p"]
    
  if not fmt:
    index = VIDEO_FORMATS.index(Prefs["nfb_fmt"])
  else:
    index = VIDEO_FORMATS.index(fmt_map[fmt])
  available = False
  while not available:
    try:
      rtmp_url = result['movie_urls'][str(VIDEO_FORMATS[index])]['url']
      available = True
    except:
      index = index - 1

  try:
    if Prefs['prefer_cc'] and result['movie_urls'][str(VIDEO_FORMATS[index])]['has_cc']:
      rtmp_url = result['movie_urls'][str(VIDEO_FORMATS[index])]['cc_url']
  except:
    pass

  parts = rtmp_url.split('FLASH')
  url = parts[0]
  clip = 'FLASH' + parts[1].split('?')[0]
  if clip[-4:] == '.mp4':
    clip = 'mp4:' + clip[0:-4]

  return Redirect(RTMPVideoItem(url=url, clip=clip))
