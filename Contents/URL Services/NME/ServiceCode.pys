import re

VIDEO_DETAILS_URL = 'http://c.brightcove.com/services/viewer/htmlFederated?&width=1000&height=512&playerID=%s&@videoPlayer=%s'

####################################################################################################

def MetadataObjectForURL(url):
    try:
        
        # Request the url
        page = HTML.ElementFromURL(url)

        # Extract the details available directly form the page.
        title = page.xpath("//meta[@property='og:title']")[0].get('content')
        thumb = page.xpath("//meta[@property='og:image']")[0].get('content')
        description = page.xpath("//meta[@property='og:description']")[0].get('content')
        
        return VideoClipObject(
            title = title,
            summary = description,
            thumb = thumb)

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    content = HTTP.Request(url).content
    playerId = re.search('param name="playerID" value="([0-9]+)"', content).group(1)
    videoId = re.search('param name="@videoPlayer" value="([0-9]+)"', content).group(1)

    video_details_page = HTTP.Request(VIDEO_DETAILS_URL % (playerId, videoId)).content
    experience = re.search('var experienceJSON = (.+)};', video_details_page).group(1) + '}'
    details = JSON.ObjectFromString(experience)

    media_objects = []
    videos = details['data']['programmedContent']['videoPlayer']['mediaDTO']['renditions']
    for video_item in videos:
        if video_item['videoCodec'] != "H264":
            continue

        media_objects.append(MediaObject(
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            video_resolution = video_item['frameHeight'],
            bitrate = video_item['encodingRate'],
            protocol = Protocol.HTTPMP4Video,
            audio_channels = 2,
            parts = [PartObject(key=video_item['defaultURL'])]
        ))
   

    return media_objects
