import re

####################################################################################################

def MetadataObjectForURL(url):
    try:

        # Request the page.
        page_content = HTTP.Request(url).content

        # The config associated with the player is very close to being perfectly valid JSON. However,
        # we can simply change the data node so that it represents the head of the object and therefore
        # we can parse the data easier.
        app_config = re.match('.*new pftv.App\((?P<config>[^;]*)\);.*', page_content, re.DOTALL).groups()[0]
        app_config = app_config.replace('data', '"data"')

        details = JSON.ObjectFromString(app_config)

        # The JSON will contain a number of video titles. We therefore need to search for the one
        # currently being played.
        currently_playing = None
        currently_playing_id = details['data']['current']
        for title in details['data']['videos']:
            if title['id'] == currently_playing_id:
                currently_playing  = title
                break
        
        # Extract the available information from the details
        title = currently_playing['title']
        description = currently_playing['description']
        thumb = currently_playing['thumbnails']['legacy_homepage']
        date = currently_playing['date']
        date = Datetime.ParseDate(date)
        
        duration_dict = re.match("(?P<mins>[0-9]*):(?P<secs>[0-9]*)", currently_playing['length']).groupdict()
        mins = int(duration_dict['mins'])
        secs = int(duration_dict['secs'])
        duration = ((mins * 60) + secs) * 1000

        return VideoClipObject(
            title = title,
            summary = description,
            thumb = thumb,
            duration = duration,
            originally_available_at = date)

    except:
        Log.Exception("An error occurred while attempting to retrieve the required meta data.")

####################################################################################################
def MediaObjectsForURL(url):
    return [
      MediaObject(
        parts = [PartObject(key=WebVideoURL(url))],
        protocols = [Protocol.WebKit]
      )
    ]