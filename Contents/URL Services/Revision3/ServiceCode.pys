REVISION3_NS = {'og':'http://opengraphprotocol.org/schema/'}
FMT_INDEX = {'720p':0, '480p':1, 'SD':2}

####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):
  data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')

  title = data.xpath('//meta[@name="description"]')[0].get('content').split(' - ')[0].split(': ')
  show_title = title[0]
  episode_title = title[1]
  try: date = Datetime.ParseDate(data.xpath('//meta[@name="publish-date"]')[0].get('content')).date()
  except: date = None
  summary = data.xpath('//meta[@property="og:description"]', namespaces=REVISION3_NS)[0].get('content')
  episode_index = data.xpath('//li[@class="episode item"]/p/a')[0].text
  episode_index = episode_index.strip(' ').split('Episode ')[1].split(' ')[0]
  details = data.xpath('//li[@class="episode item"]/p/a')[0]
  details.find('.//br').drop_tag()
  try:
    duration = details.xpath('//li[@class="episode item"]/p/a')[0].text
    duration = duration.split('(')[-1].strip(')')
    durationParts = duration.split(':')
    duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
  except:
    duration = None

  thumbUrl = data.xpath('//link[@rel="image_src"]')[0].get('href')
  try:
    thumbUrl = thumbUrl.replace('-small.thumb.jpg', '-medium.thumb.jpg')
  except:
    pass

  # Construct a metadata item
  ec = EpisodeObject(
    title = episode_title,
    show = show_title,
    #duration = duration, 
    index = int(episode_index),
    originally_available_at = date,
    summary = summary,
    thumb = thumbUrl
  )
  return ec
  
####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='720p'))],
      protocols = [Protocol.HTTPMP4Streaming],
      video_resolution = '720',
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='480p'))],
      protocols = [Protocol.HTTPMP4Streaming],
      video_resolution = '480',
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='SD'))],
      protocols = [Protocol.HTTPMP4Streaming],
      video_resolution = 'sd',
      container = 'mp4',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC
    )
  ]

####################################################################################################
def PlayVideo(url, fmt=None):
  data = HTML.ElementFromURL(url, cacheTime=7200, errors='ignore')

  if not fmt:
    fmt = Prefs['rev3_fmt']

  videos = data.xpath('//div[@id="action-panels-download-MP4"]')[0]

  video = videos.xpath('.//a[@class="sizename"]')[FMT_INDEX[fmt]]
  video_url = video.get('href')

  return Redirect(video_url)
