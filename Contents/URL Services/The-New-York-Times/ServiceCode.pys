import re
HTTP.Headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.17) Gecko/20110420 Firefox/3.6.17'

####################################################################################################

def MetadataObjectForURL(url):

            # The title of the video
            page = HTML.ElementFromURL(url)
            title = page.xpath("//div[@class='story']/h1/text()")[0].strip()

            # The summary of the video
            summary = page.xpath("//div[@class='story']//p[@class='summary']/text()")[0].strip()
            
            # Attempt to separate the credits. This includes the various titles along with the associated individual
            credits = None
            try: credits = ParseCredits(page)
            except: pass

            # [Optional] - The directors
            directed_by = None
            if credits != None and credits.has_key('Directed'):
                directed_by = credits['Directed']

            # [Optional] - The producers
            produced_by = None
            if credits != None and credits.has_key('Produced'):
                produced_by = credits['Produced']

            return VideoClipObject(
                title = title,
                summary = summary,
                #directors = directed_by,
                producers = produced_by)

def ParseCredits(page):
    dictionary = {}

    try:
        s = page.xpath("//p[@class='credit']/text()")[0] + ','

        # Notes the previous group of Titles.
        titles = []

        # Notes whether the current position in the string is after a Name.
        name_found = False

        while len(s.strip()) > 0:
            match = re.match('^\s*(\w+)\s*by\s*', s, re.IGNORECASE)

            if match is not None:
                # Title found
                if name_found:
                    # This is the first title after a name.  Reset the title state and the name_found state
                    name_found = False
                    titles = []
                    
                titles.append(match.groups()[0])
                s = s.replace(match.group(), '', 1)  # Consume the first instance of the matched string
            
                continue
            
            match = re.match('^\s*([^,]*)\s*,\s*', s, re.IGNORECASE)
            
            if match is not None:
                # Name found
                name_found = True
                
                # Add name to dictionary under each title
                for title in titles:
                    dictionary[title] = dictionary.get(title, []) + [match.groups()[0]]
                
                s = s.replace(match.group(), '', 1)  # Consume the first instance of the matched string
                
                continue
            
            s = ''

    except: pass

    return dictionary

####################################################################################################
def MediaObjectsForURL(url):
    return [
      MediaObject(
        parts = [PartObject(key = WebVideoURL(url))],
        protocols = [Protocol.WebKit]
      )
    ]